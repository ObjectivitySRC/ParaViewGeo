<ServerManagerConfiguration>
  <ProxyGroup name="writers">

    <!-- ================================================================= -->
    <PWriterProxy name="XMLPVDWriter" class="vtkXMLPVDWriter" 
      base_proxygroup="internal_writers" base_proxyname="ParallelWriterBase">
      <Documentation
        short_help="Write ParaView data files (pvd).">
        Writer to write ParaView data files (pvd). It is used to save all pieces
        of a source/filter to a file with pieces spread across the server
        processes. 
      </Documentation>
      <InputProperty name="Input" command="SetInputConnection">
        <ProxyGroupDomain name="groups">
          <Group name="sources"/>
          <Group name="filters"/>
        </ProxyGroupDomain>
        <DataTypeDomain name="input_type" composite_data_supported="0">
          <DataType value="vtkDataSet"/>
        </DataTypeDomain>
        <Documentation>
          The input filter/source whose output dataset is to written to the
          files.
        </Documentation>
      </InputProperty>

      <IntVectorProperty name="DataMode"
        command="SetDataMode"
        number_of_elements="1"
        default_values="2">
        <EnumerationDomain name="enum">
          <Entry value="0" text="Ascii" />
          <Entry value="1" text="Binary" />
          <Entry value="2" text="Appended" />
        </EnumerationDomain>
        <Documentation>
          The mode uses for writing the file's data i.e. ascii, binary, appended
          binary.
        </Documentation>
      </IntVectorProperty>

      <IntVectorProperty name="EncodeAppendedData"
        command="SetEncodeAppendedData"
        number_of_elements="1"
        default_values="0">
        <BooleanDomain name="bool" /> 
        <Documentation>
        When EncodeAppendedData is turned ON, the writer uses base64 encoding
        when writing binary data (only if appended mode is selected).
        </Documentation>
      </IntVectorProperty>

      <IntVectorProperty name="CompressorType"
        command="SetCompressorType"
        number_of_elements="1"
        default_values="0">
        <EnumerationDomain name="enum">
          <Entry value="0" text="None" />
          <Entry value="1" text="ZLib" />
        </EnumerationDomain>
        <Documentation>
          The compression algorithm used to compress binary data (appended mode only).
        </Documentation>
      </IntVectorProperty>
      <Hints>
        <Property name="Input" show="0"/>
        <Property name="FileName" show="0"/>
        <WriterFactory extensions="pvd" file_description="ParaView Data Files" />
      </Hints>
      <!-- End of XMLPVDWriter -->
    </PWriterProxy>

    <!-- ================================================================= -->
    <WriterProxy  name="XMLDataSetWriterBase"
                  base_proxygroup="internal_writers"
                  base_proxyname="FileSeriesWriter" > 
      <Documentation>
        Base for all XML-based file-series writers.
      </Documentation>

      <SubProxy>
        <Proxy name="Writer"
          proxygroup="internal_writers"
          proxyname="XMLDataSetWriterCore">
        </Proxy>
        <ExposedProperties>
          <Property name="DataMode" />
          <Property name="EncodeAppendedData" />
          <Property name="CompressorType" />
        </ExposedProperties>
      </SubProxy>

      <!-- End of XMLDataSetWriterBase -->
    </WriterProxy>

    <!-- ================================================================= -->
    <WriterProxy  name="XMLPolyDataWriter" 
                    class="vtkFileSeriesWriter"
                    file_name_method="SetFileName"
                    base_proxygroup="writers"
                    base_proxyname="XMLDataSetWriterBase" >
      <Documentation
        short_help="Write poly data in a xml-based vtk data file.">
        Writer to write poly data in a xml-based vtk data file. Cannot be used
        for parallel writing.
      </Documentation>

      <InputProperty name="Input" command="SetInputConnection">
        <DataTypeDomain name="input_type" composite_data_supported="0">
          <DataType value="vtkPolyData" />
        </DataTypeDomain>
        <Documentation>
          The input filter/source whose output dataset is to written to the
          file.
        </Documentation>
      </InputProperty>

      <Hints>
        <Property name="Input" show="0"/>
        <Property name="FileName" show="0"/>
        <WriterFactory extensions="vtp" file_description="VTK PolyData Files"/>
      </Hints>
      <!-- End of XMLPolyDataWriter -->
    </WriterProxy>

    <!-- ================================================================= -->
    <WriterProxy name="XMLHyperOctreeWriter"
                   class="vtkFileSeriesWriter"
                   file_name_method="SetFileName"
                   base_proxygroup="writers"
                   base_proxyname="XMLDataSetWriterBase" >
      <Documentation
        short_help="Write unstructured grid in a xml-based vtk data file.">
        Writer to write unstructured grid in a xml-based vtk data file. Cannot be used
        for parallel writing.
      </Documentation>
      <InputProperty name="Input" command="SetInputConnection">
        <DataTypeDomain name="input_type" composite_data_supported="0">
          <DataType value="vtkHyperOctree" />
        </DataTypeDomain>
        <Documentation>
          The input filter/source whose output dataset is to written to the
          file.
        </Documentation>
      </InputProperty>
      <Hints>
        <Property name="Input" show="0"/>
        <Property name="FileName" show="0"/>
        <WriterFactory extensions="vto" file_description="VTK Octree Files"/>
      </Hints>
      <!-- End of XMLUnstructuredGridWriter -->
    </WriterProxy>

    <!-- ================================================================= -->
    <WriterProxy name="XMLUnstructuredGridWriter"
                   class="vtkFileSeriesWriter"
                   file_name_method="SetFileName"
                   base_proxygroup="writers"
                   base_proxyname="XMLDataSetWriterBase" >
      <Documentation
        short_help="Write unstructured grid in a xml-based vtk data file.">
        Writer to write unstructured grid in a xml-based vtk data file. Cannot be used
        for parallel writing.
      </Documentation>
      <InputProperty name="Input" command="SetInputConnection">
        <DataTypeDomain name="input_type" composite_data_supported="0">
          <DataType value="vtkUnstructuredGrid" />
        </DataTypeDomain>
        <Documentation>
          The input filter/source whose output dataset is to written to the
          file.
        </Documentation>
      </InputProperty>
      <Hints>
        <Property name="Input" show="0"/>
        <Property name="FileName" show="0"/>
        <WriterFactory extensions="vtu" file_description="VTK UnstructuredGrid Files"/>
      </Hints>
      <!-- End of XMLUnstructuredGridWriter -->
    </WriterProxy>

    <!-- ================================================================= -->
    <WriterProxy  name="XMLStructuredGridWriter" 
                    class="vtkFileSeriesWriter"
                    file_name_method="SetFileName"
                    base_proxygroup="writers"
                    base_proxyname="XMLDataSetWriterBase" >
      <Documentation
        short_help="Write structured grid in a xml-based vtk data file." >
        Writer to write structured grid in a xml-based vtk data file. Cannot be used
        for parallel writing.
      </Documentation>

      <InputProperty name="Input" command="SetInputConnection">
        <DataTypeDomain name="input_type" composite_data_supported="0">
          <DataType value="vtkStructuredGrid" />
        </DataTypeDomain>
        <Documentation>
          The input filter/source whose output dataset is to written to the
          file.
        </Documentation>
      </InputProperty>
      <Hints>
        <Property name="Input" show="0"/>
        <Property name="FileName" show="0"/>
        <WriterFactory extensions="vts"
          file_description="VTK StructuredGrid Files"/>
      </Hints>
      <!-- End of XMLStructuredGridWriter -->
    </WriterProxy>

    <!-- ================================================================= -->
    <WriterProxy name="XMLRectilinearGridWriter" 
      class="vtkFileSeriesWriter"
      file_name_method="SetFileName"
      base_proxygroup="writers"
      base_proxyname="XMLDataSetWriterBase" >
      <Documentation
        short_help="Write rectilinear grid in a xml-based vtk data file." >
        Writer to write rectilinear grid in a xml-based vtk data file. Cannot be used
        for parallel writing.
      </Documentation>
      <InputProperty name="Input" command="SetInputConnection">
        <DataTypeDomain name="input_type" composite_data_supported="0">
          <DataType value="vtkRectilinearGrid" />
        </DataTypeDomain>
        <Documentation>
          The input filter/source whose output dataset is to written to the
          file.
        </Documentation>
      </InputProperty>
      <Hints>
        <Property name="Input" show="0"/>
        <Property name="FileName" show="0"/>
        <WriterFactory extensions="vtr"
          file_description="VTK RectilinearGrid Files"/>
      </Hints>
      <!-- End of XMLRectilinearGridWriter -->
    </WriterProxy>

    <!-- ================================================================= -->
    <WriterProxy name="XMLImageDataWriter" 
      class="vtkFileSeriesWriter"
      file_name_method="SetFileName"
      base_proxygroup="writers"
      base_proxyname="XMLDataSetWriterBase" >
      <Documentation
        short_help="Write image data in a xml-based vtk data file.">
        Writer to write image data in a xml-based vtk data file. Cannot be used
        for parallel writing.
      </Documentation>
      <InputProperty name="Input" command="SetInputConnection">
        <DataTypeDomain name="input_type" composite_data_supported="0">
          <DataType value="vtkImageData" />
        </DataTypeDomain>
        <Documentation>
          The input filter/source whose output dataset is to written to the
          file.
        </Documentation>
      </InputProperty>
      <Hints>
        <Property name="Input" show="0"/>
        <Property name="FileName" show="0"/>
        <WriterFactory extensions="vti"
          file_description="VTK ImageData Files"/>
      </Hints>
      <!-- End of XMLImageDataWriter -->
    </WriterProxy>

    <!-- ================================================================= -->
    <WriterProxy name="XMLPPolyDataWriter"
      class="vtkFileSeriesWriter"
      file_name_method="SetFileName"
      parallel_only="1"
      base_proxygroup="internal_writers" base_proxyname="ParallelFileSeriesWriter">
      <Documentation
        short_help="Write polydata in a xml-based vtk data file.">
        Writer to write polydata in a xml-based vtk data file. Can be used
        for parallel writing.
      </Documentation>

      <InputProperty name="Input" command="SetInputConnection">
        <DataTypeDomain name="input_type" composite_data_supported="0">
          <DataType value="vtkPolyData" />
        </DataTypeDomain>
        <Documentation>
          The input filter/source whose output dataset is to written to the
          file.
        </Documentation>
      </InputProperty>

      <SubProxy>
        <Proxy name="Writer" proxygroup="internal_writers"
          proxyname="XMLPPolyDataWriterCore">
        </Proxy>
        <ExposedProperties>
          <Property name="DataMode" />
          <Property name="EncodeAppendedData" />
          <Property name="CompressorType" />
        </ExposedProperties>
      </SubProxy>

      <Hints>
        <Property name="Input" show="0"/>
        <Property name="FileName" show="0"/>
        <WriterFactory extensions="pvtp"
          file_description="PVTK PolyData Files"/>
      </Hints>
      <!-- End of XMLPPolyDataWriter -->
    </WriterProxy>

    <!-- ================================================================= -->
    <WriterProxy name="XMLPUnstructuredGridWriter"
      parallel_only="1"
      class="vtkFileSeriesWriter"
      file_name_method="SetFileName"
      base_proxygroup="internal_writers" base_proxyname="ParallelFileSeriesWriter">
      <Documentation
        short_help="Write unstructured grid in a xml-based vtk data file.">
        Writer to write unstructured grid in a xml-based vtk data file. Can be used
        for parallel writing.
      </Documentation>

      <InputProperty name="Input" command="SetInputConnection">
        <DataTypeDomain name="input_type" composite_data_supported="0">
          <DataType value="vtkUnstructuredGrid" />
        </DataTypeDomain>
        <Documentation>
          The input filter/source whose output dataset is to written to the
          file.
        </Documentation>
      </InputProperty>

      <SubProxy>
        <Proxy name="Writer" proxygroup="internal_writers"
          proxyname="XMLPUnstructuredGridWriterCore">
        </Proxy>
        <ExposedProperties>
          <Property name="DataMode" />
          <Property name="EncodeAppendedData" />
          <Property name="CompressorType" />
        </ExposedProperties>
      </SubProxy>

      <Hints>
        <Property name="Input" show="0"/>
        <Property name="FileName" show="0"/>
        <WriterFactory
          extensions="pvtu"
          file_description="PVTK UnstructuredGrid Files"/>
      </Hints>
      <!-- End of XMLPUnstructuredGridWriter -->
    </WriterProxy>

    <!-- ================================================================= -->
    <WriterProxy name="XMLPStructuredGridWriter"
      parallel_only="1"
      class="vtkFileSeriesWriter"
      file_name_method="SetFileName"
      base_proxygroup="internal_writers" base_proxyname="ParallelFileSeriesWriter">
      <Documentation
        short_help="Write structured grid in a xml-based vtk data file.">
        Writer to write structured grid in a xml-based vtk data file. Can be used
        for parallel writing.
      </Documentation>

      <InputProperty name="Input" command="SetInputConnection">
        <DataTypeDomain name="input_type" composite_data_supported="0">
          <DataType value="vtkStructuredGrid" />
        </DataTypeDomain>
        <Documentation>
          The input filter/source whose output dataset is to written to the
          file.
        </Documentation>
      </InputProperty>

      <SubProxy>
        <Proxy name="Writer" proxygroup="internal_writers"
          proxyname="XMLPStructuredGridWriterCore">
        </Proxy>
        <ExposedProperties>
          <Property name="DataMode" />
          <Property name="EncodeAppendedData" />
          <Property name="CompressorType" />
        </ExposedProperties>
      </SubProxy>

      <Hints>
        <Property name="Input" show="0"/>
        <Property name="FileName" show="0"/>
        <WriterFactory
          extensions="pvts"
          file_description="PVTK StructuredGrid Files"/>
      </Hints>
      <!-- End of XMLPStructuredGridWriter -->
    </WriterProxy>

    <!-- ================================================================= -->
    <WriterProxy name="XMLPRectilinearGridWriter"
      base_proxygroup="internal_writers" base_proxyname="ParallelFileSeriesWriter"
      class="vtkFileSeriesWriter"
      file_name_method="SetFileName"
      parallel_only="1">
      <Documentation
        short_help="Write rectilinear grid in a xml-based vtk data file.">
        Writer to write rectilinear grid in a xml-based vtk data file. Can be used
        for parallel writing.
      </Documentation>

      <InputProperty name="Input" command="SetInputConnection">
        <DataTypeDomain name="input_type" composite_data_supported="0">
          <DataType value="vtkRectilinearGrid" />
        </DataTypeDomain>
        <Documentation>
          The input filter/source whose output dataset is to written to the
          file.
        </Documentation>
      </InputProperty>

      <SubProxy>
        <Proxy name="Writer" proxygroup="internal_writers"
          proxyname="XMLPRectilinearGridWriterCore">
        </Proxy>
        <ExposedProperties>
          <Property name="DataMode" />
          <Property name="EncodeAppendedData" />
          <Property name="CompressorType" />
        </ExposedProperties>
      </SubProxy>

      <Hints>
        <Property name="Input" show="0"/>
        <Property name="FileName" show="0"/>
        <WriterFactory
          extensions="pvtr"
          file_description="PVTK RectilinearGrid Files"/>
      </Hints>
      <!-- End of XMLPRectilinearGridWriter -->
    </WriterProxy>

    <!-- ================================================================= -->
    <WriterProxy name="XMLPImageDataWriter"
      class="vtkFileSeriesWriter"
      file_name_method="SetFileName"
      parallel_only="1"
      base_proxygroup="internal_writers" base_proxyname="ParallelFileSeriesWriter">
      <Documentation
        short_help="Write image data in a xml-based vtk data file.">
        Writer to write image data in a xml-based vtk data file. Can be used
        for parallel writing.
      </Documentation>

      <InputProperty name="Input" command="SetInputConnection">
        <DataTypeDomain name="input_type" composite_data_supported="0">
          <DataType value="vtkImageData" />
        </DataTypeDomain>
        <Documentation>
          The input filter/source whose output dataset is to written to the
          file.
        </Documentation>
      </InputProperty>

      <SubProxy>
        <Proxy name="Writer" proxygroup="internal_writers"
          proxyname="XMLPImageDataWriterCore">
        </Proxy>
        <ExposedProperties>
          <Property name="DataMode" />
          <Property name="EncodeAppendedData" />
          <Property name="CompressorType" />
        </ExposedProperties>
      </SubProxy>

      <Hints>
        <Property name="Input" show="0"/>
        <Property name="FileName" show="0"/>
        <WriterFactory
          extensions="pvti"
          file_description="PVTK ImageData Files"/>
      </Hints>
      <!-- End of XMLPImageDataWriter -->
    </WriterProxy>

    <!-- ================================================================= -->
    <WriterProxy name="XMLMultiBlockDataWriter"
      class="vtkFileSeriesWriter"
      file_name_method="SetFileName"
      supports_parallel="1"
      base_proxygroup="internal_writers"
      base_proxyname="FileSeriesWriter">
      <Documentation
        short_help="Write a multiblock in a xml-based vtk data file.">
        Writer to write a multiblock dataset in a xml-based vtk data file. Can be used
        for parallel writing as well as serial writing.
      </Documentation>

      <InputProperty name="Input" command="SetInputConnection">
        <DataTypeDomain name="input_type" composite_data_supported="1">
          <DataType value="vtkMultiBlockDataSet" />
        </DataTypeDomain>
        <Documentation>
          The input filter/source whose output dataset is to written to the
          file.
        </Documentation>
      </InputProperty>

      <SubProxy>
        <Proxy name="Writer"
          proxygroup="internal_writers"
          proxyname="XMLPMultiBlockDataWriterCore">
        </Proxy>
        <ExposedProperties>
          <Property name="DataMode" />
          <Property name="EncodeAppendedData" />
          <Property name="CompressorType" />
        </ExposedProperties>
      </SubProxy>

      <Hints>
        <Property name="Input" show="0"/>
        <Property name="FileName" show="0"/>
        <WriterFactory
          extensions="vtm"
          file_description="VTK Multi Block Files"/>
      </Hints>

      <!-- End of XMLMultiBlockDataWriter -->
    </WriterProxy>

    <!-- ================================================================= -->
    <WriterProxy name="XMLHierarchicalBoxDataWriter"
      class="vtkFileSeriesWriter"
      file_name_method="SetFileName"
      supports_parallel="1"
      base_proxygroup="internal_writers"
      base_proxyname="FileSeriesWriter">
      <Documentation
        short_help="Write a hierarchical box dataset in a xml-based vtk data file.">
        Writer to write a hierarchical box in a xml-based vtk data file. Can be used
        for parallel writing as well as serial writing.
      </Documentation>

      <InputProperty name="Input" command="SetInputConnection">
        <DataTypeDomain name="input_type" composite_data_supported="1">
          <DataType value="vtkHierarchicalBoxDataSet" />
        </DataTypeDomain>
        <Documentation>
          The input filter/source whose output dataset is to written to the
          file.
        </Documentation>
      </InputProperty>

      <SubProxy>
        <Proxy name="Writer"
          proxygroup="internal_writers"
          proxyname="XMLPHierarchicalBoxDataWriterCore">
        </Proxy>
        <ExposedProperties>
          <Property name="DataMode" />
          <Property name="EncodeAppendedData" />
          <Property name="CompressorType" />
        </ExposedProperties>
      </SubProxy>

      <Hints>
        <Property name="Input" show="0"/>
        <Property name="FileName" show="0"/>
        <WriterFactory
          extensions="vthb"
          file_description="VTK Hierarchical Box Files"/>
      </Hints>

      <!-- End of XMLPHierarchicalBoxDataWriter -->
    </WriterProxy>

    <!-- ================================================================= -->
    <WriterProxy  name="DataSetWriter" 
                    class="vtkFileSeriesWriter"
                    file_name_method="SetFileName"
                    base_proxygroup="internal_writers"
                    base_proxyname="FileSeriesWriter" >
      <Documentation
        short_help="Write any type of data object in a legacy vtk data file.">
        Writer to write any type of data object in a legacy vtk data file. 
        Cannot be used for parallel writing.
      </Documentation>

      <SubProxy>
        <Proxy name="Writer"
          proxygroup="internal_writers" proxyname="DataSetWriterCore">
        </Proxy>
        <ExposedProperties>
          <Property name="FileType" />
        </ExposedProperties>
      </SubProxy>

      <InputProperty name="Input" command="SetInputConnection">
        <ProxyGroupDomain name="groups">
          <Group name="sources"/>
          <Group name="filters"/>
        </ProxyGroupDomain>
        <DataTypeDomain name="input_type" composite_data_supported="0">
          <DataType value="vtkDataObject"/>
        </DataTypeDomain>
        <Documentation>
          The input filter/source whose output dataset is to written to the
          file.
        </Documentation>
      </InputProperty>

      <Hints>
        <Property name="Input" show="0"/>
        <Property name="FileName" show="0"/>
        <WriterFactory
          extensions="vtk"
          file_description="Legacy VTK Files"/>
      </Hints>
      <!-- End of DataSetWriter -->
    </WriterProxy>

    <!-- ================================================================= -->
    <PSWriterProxy name="PDataSetWriter" class="vtkParallelSerialWriter"
      file_name_method="SetFileName" parallel_only="1">
      <Documentation
        short_help="Writer that writes polydata as legacy vtk files.">
        Writer to write any type of data object in a legacy vtk data file. 
        This version is used when running in parallel. It gathers data to
        first node and saves one file.
      </Documentation>

      <SubProxy>
        <Proxy name="Writer"
          proxygroup="internal_writers" proxyname="DataSetWriterCore">
        </Proxy>
        <ExposedProperties>
          <Property name="FileType" />
        </ExposedProperties>
      </SubProxy>

      <InputProperty name="Input" command="SetInputConnection">
        <ProxyGroupDomain name="groups">
          <Group name="sources"/>
          <Group name="filters"/>
        </ProxyGroupDomain>
        <DataTypeDomain name="input_type" composite_data_supported="0">
          <DataType value="vtkDataObject"/>
        </DataTypeDomain>
        <Documentation>
          The input filter/source whose output dataset is to written to the
          file.
        </Documentation>
      </InputProperty>

      <StringVectorProperty name="FileName" 
        command="SetFileName"
        number_of_elements="1">
       <Documentation>
        The name of the file to be written.
        </Documentation>
      </StringVectorProperty>

      <IntVectorProperty name="WriteAllTimeSteps"
        command="SetWriteAllTimeSteps"
        number_of_elements="1"
        default_values="0">
        <BooleanDomain name="bool" /> 
        <Documentation>
        When WriteAllTimeSteps is turned ON, the writer is executed 
        once for each timestep available from the reader.
        </Documentation>
      </IntVectorProperty>

      <SubProxy>
        <Proxy name="PostGatherHelper" 
          proxygroup="filters" proxyname="AppendPolyData" />
      </SubProxy>

      <Hints>
        <Property name="Input" show="0"/>
        <Property name="FileName" show="0"/>
        <WriterFactory
          extensions="vtk"
          file_description="Legacy VTK Files"/>
      </Hints>
      <!-- End of PDataSetWriter -->
    </PSWriterProxy>

    <!-- ================================================================= -->
    <PSWriterProxy name="PPLYWriter" class="vtkParallelSerialWriter"
      file_name_method="SetFileName">
      <Documentation
        short_help="Write polygonal data in Stanford University PLY format.">
        Writer to write polygonal data in Stanford University PLY format. The 
        data can be written in either binary (little or big endian) or ASCII 
        representation. As for PointData and CellData, vtkPLYWriter cannot 
        handle normals or vectors. It only handles RGB PointData and CellData. 
        This version is used when running in parallel. It gathers data to
        first node and saves one file.
      </Documentation>
      <SubProxy>
        <Proxy name="Writer"
          proxygroup="internal_writers" proxyname="PLYWriter">
        </Proxy>
        <ExposedProperties>
          <Property name="FileType" />
        </ExposedProperties>
      </SubProxy>
      <InputProperty name="Input" command="SetInputConnection">
        <ProxyGroupDomain name="groups">
          <Group name="sources"/>
          <Group name="filters"/>
        </ProxyGroupDomain>
        <DataTypeDomain name="input_type">
          <DataType value="vtkPolyData"/>
        </DataTypeDomain>
        <Documentation>
          The input filter/source whose output dataset is to written to the
          file.
        </Documentation>
      </InputProperty>
      <StringVectorProperty 
        name="FileName" 
        command="SetFileName"
        number_of_elements="1">
       <Documentation>
        The name of the file to be written.
        </Documentation>
      </StringVectorProperty>

      <SubProxy>
        <Proxy name="PostGatherHelper" 
          proxygroup="filters" proxyname="AppendPolyData" />
      </SubProxy>

      <Hints>
        <Property name="Input" show="0"/>
        <Property name="FileName" show="0"/>
        <WriterFactory
          extensions="ply"
          file_description="PLY Polygonal File Format"/>
      </Hints>
      <!-- End of PLYWriter -->
    </PSWriterProxy>

    <!-- ================================================================= -->
    <PSWriterProxy name="PSTLWriter" class="vtkParallelSerialWriter"
      file_name_method="SetFileName">
      <Documentation
        short_help="Write stereo lithography files.">
        STLWriter writes stereo lithography (.stl) files in either ASCII or
        binary form. Stereo lithography files only contain triangles. If
        polygons with more than 3 vertices are present, only the first 3
        vertices are written.  Use TriangleFilter to convert polygons to
        triangles. This version of the reader is used when running in
        parallel. It gathers all the geometry to first node and saves 1 file.
      </Documentation>
      <SubProxy>
        <Proxy name="Writer"
          proxygroup="internal_writers" proxyname="STLWriter">
        </Proxy>
        <ExposedProperties>
          <Property name="FileType" />
        </ExposedProperties>
      </SubProxy>
      <InputProperty name="Input" command="SetInputConnection">
        <ProxyGroupDomain name="groups">
          <Group name="sources"/>
          <Group name="filters"/>
        </ProxyGroupDomain>
        <DataTypeDomain name="input_type">
          <DataType value="vtkPolyData"/>
        </DataTypeDomain>
        <Documentation>
          The input filter/source whose output dataset is to written to the
          file.
        </Documentation>
      </InputProperty>
      <StringVectorProperty 
        name="FileName" 
        command="SetFileName"
        number_of_elements="1">
       <Documentation>
        The name of the file to be written.
        </Documentation>
      </StringVectorProperty>

      <SubProxy>
        <Proxy name="PostGatherHelper" 
          proxygroup="filters" proxyname="AppendPolyData" />
      </SubProxy>

      <Hints>
        <Property name="Input" show="0"/>
        <Property name="FileName" show="0"/>
        <WriterFactory
          extensions="stl"
          file_description="Stereo Lithography File Format"/>
      </Hints>
      <!-- End of PSTLWriter -->
    </PSWriterProxy>

    <!-- ================================================================= -->
    <WriterProxy name="MetaImageWriter" class="vtkMetaImageWriter">
      <Documentation
        short_help="Write a binary UNC meta image data.">
        Writer to write a binary UNC meta image data. This is a fairly simple 
        yet powerful format consisting of a text header and a binary data 
        section. 
        MetaImage headers are expected to have extension: ".mha" or ".mhd"
      </Documentation>
      <InputProperty name="Input" command="SetInputConnection">
        <ProxyGroupDomain name="groups">
          <Group name="sources"/>
          <Group name="filters"/>
        </ProxyGroupDomain>
        <DataTypeDomain name="input_type" composite_data_supported="0">
          <DataType value="vtkImageData"/>
        </DataTypeDomain>
        <Documentation>
          The input filter/source whose output dataset is to written to the
          file.
        </Documentation>
      </InputProperty>
      <StringVectorProperty 
        name="FileName" 
        command="SetFileName"
        number_of_elements="1">
       <Documentation>
        The name of the file to be written.
        </Documentation>
      </StringVectorProperty>
      <Hints>
        <Property name="Input" show="0"/>
        <Property name="FileName" show="0"/>
        <WriterFactory
          extensions="mhd"
          file_description="Meta Image Files"/>
      </Hints>
      <!-- End of MetaImageWriter -->
    </WriterProxy>

    <!-- ================================================================= -->
    <WriterProxy name="PNGWriter" class="vtkPNGWriter">
      <Documentation
        short_help="Write image data as a PNG file.">
        Writer to write image data as a PNG file. It supports 1 to 4 component
        data of unsigned char or unsigned short.
      </Documentation>
      <InputProperty name="Input" command="SetInputConnection">
        <ProxyGroupDomain name="groups">
          <Group name="sources"/>
          <Group name="filters"/>
        </ProxyGroupDomain>
        <DataTypeDomain name="input_type" composite_data_supported="0">
          <DataType value="vtkImageData"/>
        </DataTypeDomain>
        <Documentation>
          The input filter/source whose output dataset is to written to the
          file.
        </Documentation>
      </InputProperty>
      <StringVectorProperty 
        name="FileName" 
        command="SetFileName"
        number_of_elements="1">
       <Documentation>
        The name of the file to be written.
        </Documentation>
      </StringVectorProperty>
      <Hints>
        <Property name="Input" show="0"/>
        <Property name="FileName" show="0"/>
        <WriterFactory
          extensions="png"
          file_description="PNG Image Files"/>
      </Hints>
      <!-- End of PNGWriter -->
    </WriterProxy>

    <!-- ================================================================= -->

    <WriterProxy name="XdmfWriter" class="vtkXdmfWriter">
      <Documentation
        short_help="Write data in Xdmf files.">
        Writer to write data in eXtensible Data Model and Format *(XDMF) files.
      </Documentation>
      <InputProperty name="Input" command="SetInputConnection">
        <ProxyGroupDomain name="groups">
          <Group name="sources"/>
          <Group name="filters"/>
        </ProxyGroupDomain>
        <DataTypeDomain name="input_type" composite_data_supported="1">
          <DataType value="vtkDataSet"/>
        </DataTypeDomain>
        <Documentation>
          The input filter/source whose output dataset is to written to the
          file.
        </Documentation>
      </InputProperty>

      <StringVectorProperty 
        name="FileName" 
        command="SetFileName"
        number_of_elements="1">
        <Documentation>
            The name of the file to be written.
        </Documentation>
      </StringVectorProperty>
      <Hints>
        <Property name="Input" show="0"/>
        <Property name="FileName" show="0"/>
        <WriterFactory extensions="xmf" file_description="Xdmf Data File"/>
      </Hints>
      <!-- End of XdmfWriter -->
    </WriterProxy>

    <!-- ================================================================= -->
    <PWriterProxy name="ExodusIIWriter" class="vtkExodusIIWriter"
      base_proxygroup="internal_writers" base_proxyname="ParallelWriterBase">
      <Documentation
        short_help="Write Exodus II files.">
        Writer to write Exodus II files. Refere to http://endo.sandia.gov/SEACAS/ 
        for more information about the Exodus II format.
      </Documentation>

      <InputProperty name="Input" command="SetInputConnection">
        <ProxyGroupDomain name="groups">
          <Group name="sources"/>
          <Group name="filters"/>
        </ProxyGroupDomain>
        <DataTypeDomain name="input_type" composite_data_supported="1">
          <DataType value="vtkCompositeDataSet"/>
          <DataType value="vtkDataSet"/>
        </DataTypeDomain>
        <Documentation>
          The input filter/source whose output dataset is to written to the
          file.
        </Documentation>
      </InputProperty>

      <IntVectorProperty name="WriteAllTimeSteps"
        command="SetWriteAllTimeSteps"
        number_of_elements="1"
        default_values="0">
        <BooleanDomain name="bool" /> 
        <Documentation>
        When WriteAllTimeSteps is turned ON, the writer is executed 
        once for each time step available from the reader.
        </Documentation>
      </IntVectorProperty>
      <Hints>
        <Property name="Input" show="0"/>
        <Property name="FileName" show="0"/>
        <Property name="GhostLevel" show="0"/>
        <WriterFactory
          extensions="g e ex2 ex2v2 exo gen exoII exoii"
          file_description="Exodus II File"/>
      </Hints>
      <!-- End of ExodusIIWriter -->
    </PWriterProxy>

    <!-- ================================================================= -->
    <PWriterProxy name="EnSightWriter" class="vtkEnSightWriter"
      base_proxygroup="internal_writers" base_proxyname="ParallelWriterBase">
      <Documentation
        short_help="Write unstructured grid data as an EnSight file.">
        Writer to write unstructured grid data as an EnSight file. Binary files 
        written on one system may not be readable on other systems. Be sure to 
        specify the endian-ness of the file when reading it into EnSight.
      </Documentation>

      <InputProperty name="Input" command="SetInputConnection">
        <ProxyGroupDomain name="groups">
          <Group name="sources"/>
          <Group name="filters"/>
        </ProxyGroupDomain>
        <DataTypeDomain name="input_type" composite_data_supported="0">
          <DataType value="vtkUnstructuredGrid"/>
        </DataTypeDomain>
        <Documentation>
          The input filter/source whose output dataset is to written to the
          file.
        </Documentation>
      </InputProperty>
      <Hints>
        <Property name="Input" show="0"/>
        <Property name="FileName" show="0"/>
        <WriterFactory
          extensions="case"
          file_description="EnSight File"/>
      </Hints>
      <!-- End of EnSightWriter -->
    </PWriterProxy>

    <Proxy name="AnimationSceneImageWriter" class="vtkSMAnimationSceneImageWriter">
      <Documentation>
        Internal writer to used paraview uses when it disconnects the GUI.
      </Documentation>

      <IntVectorProperty name="Magnification"
        command="SetMagnification"
        number_of_elements="1"
        default_values="1">
        <IntRangeDomain name="range" min="1" />
        <Documentation>
          The magnification factor to use for the saved animation.
        </Documentation>
      </IntVectorProperty>

      <StringVectorProperty name="FileName"
        command="SetFileName"
        number_of_elements="1">
        <Documentation>
          The name of the file to save the animation into.
        </Documentation>
      </StringVectorProperty>

      <DoubleVectorProperty name="FrameRate"
        command="SetFrameRate"
        number_of_elements="1"
        default_values="0">
        <Documentation>
          Get/Set the frame rate to use for saving the animation.
          This frame rate is the frame rate that gets saved in the movie
          file generated, if applicable. If does not affect the FrameRate
          set on the animation scene at all. In other words, this is the
          playback frame rate and not the animation generation frame rate.
        </Documentation>
      </DoubleVectorProperty>

      <Hints>
        <Property name="Input" show="0"/>
        <Property name="FileName" show="0"/>
      </Hints>
    <!-- End of AnimationSceneImageWriter -->
    </Proxy>

    <!-- ================================================================= -->
    <SourceProxy name="XMLPVAnimationWriter" class ="vtkXMLPVAnimationWriter">
      <Documentation>
        Internal writer proxy used when saving animation geometry to save all
        parts of the current source to the file with pieces spread across the
        server processes.
      </Documentation>

      <InputProperty
        name="Representations"
        command="AddRepresentation"
        clean_command="RemoveAllRepresentations"
        si_class="vtkSIXMLAnimationWriterRepresentationProperty"
        repeat_command="1">
        <Documentation>
          The input filter/source whose output dataset is to written to the
          file.
        </Documentation>
      </InputProperty>

      <StringVectorProperty name="FileName" command="SetFileName" >
        <Documentation>
          Name of the file to write.
        </Documentation>
      </StringVectorProperty>

      <Property name="Start" command="Start">
        <Documentation>Used to begin writing of the animation</Documentation>
      </Property>

      <DoubleVectorProperty name="WriteTime"
        command="WriteTime"
        number_of_elements="1"
        default_values="0.0"
        is_internal="1">
        <DoubleRangeDomain name="range" min="0" />
        <Documentation>Write each time step in the animation</Documentation>
      </DoubleVectorProperty>

      <Property name="Finish" command="Finish">
        <Documentation>Finish writing animation</Documentation>
      </Property>

      <IntVectorProperty name="ErrorCode"
        command="GetErrorCode"
        information_only="1">
      </IntVectorProperty>

      <Hints>
        <Property name="Input" show="0"/>
        <Property name="FileName" show="0"/>
      </Hints>
      <!-- End of XMLPVAnimationWriter -->
    </SourceProxy>

    <!-- ================================================================= -->
    <PSWriterProxy name="CSVWriter" class="vtkParallelSerialWriter"
      file_name_method="SetFileName">
      <Documentation short_help="Writer to write CSV files">
        Writer to write CSV files from table.
        In parallel, it delivers the table to the root node and then saves the
        CSV. For composite datasets, it saves multiple csv files.
      </Documentation>
      <SubProxy>
        <Proxy name="Writer" class="vtkCSVWriter" />
      </SubProxy>

      <InputProperty name="Input" command="SetInputConnection">
        <ProxyGroupDomain name="groups">
          <Group name="sources"/>
          <Group name="filters"/>
        </ProxyGroupDomain>
        <DataTypeDomain name="input_type">
          <DataType value="vtkTable" />
        </DataTypeDomain>
        <Documentation>
          The input filter/source whose output dataset is to written to the
          file.
        </Documentation>
      </InputProperty>
      <StringVectorProperty 
        name="FileName" 
        command="SetFileName"
        number_of_elements="1">
       <Documentation>
        The name of the file to be written.
        </Documentation>
      </StringVectorProperty>
      <IntVectorProperty name="WriteAllTimeSteps"
        command="SetWriteAllTimeSteps"
        number_of_elements="1"
        default_values="0">
        <BooleanDomain name="bool" /> 
        <Documentation>
        When WriteAllTimeSteps is turned ON, the writer is executed 
        once for each time step available from the reader.
        </Documentation>
      </IntVectorProperty>

      <SubProxy>
        <Proxy name="PostGatherHelper" class="vtkPVMergeTables" />
      </SubProxy>

      <Hints>
        <Property name="Input" show="0"/>
        <Property name="FileName" show="0"/>
        <WriterFactory
          extensions="csv"
          file_description="CSV File"/>
      </Hints>
      <!-- End of CSVWriter -->
    </PSWriterProxy>

    <!-- ================================================================= -->
    <PSWriterProxy name="DataSetCSVWriter" class="vtkParallelSerialWriter"
      file_name_method="SetFileName">
      <Documentation short_help="Writer to write CSV files">
        Writer to write CSV files from any dataset. Set FieldAssociation to
        choose whether cell data/point data needs to be saved.
        In parallel, it delivers the table to the root node and then saves the
        CSV. For composite datasets, it saves multiple csv files.
      </Documentation>
      <SubProxy>
        <Proxy name="Writer" class="vtkCSVWriter" />
      </SubProxy>

      <InputProperty name="Input" command="SetInputConnection">
        <ProxyGroupDomain name="groups">
          <Group name="sources"/>
          <Group name="filters"/>
        </ProxyGroupDomain>
        <DataTypeDomain name="input_type">
          <DataType value="vtkDataSet" />
        </DataTypeDomain>
        <Documentation>
          The input filter/source whose output dataset is to written to the
          file.
        </Documentation>
      </InputProperty>

      <StringVectorProperty name="FileName" 
        command="SetFileName"
        number_of_elements="1">
       <Documentation>
        The name of the file to be written.
        </Documentation>
      </StringVectorProperty>

      <IntVectorProperty name="WriteAllTimeSteps"
        command="SetWriteAllTimeSteps"
        number_of_elements="1"
        default_values="0">
        <BooleanDomain name="bool" /> 
        <Documentation>
        When WriteAllTimeSteps is turned ON, the writer is executed 
        once for each timestep available from the reader.
        </Documentation>
      </IntVectorProperty>

      <SubProxy>
        <Proxy name="PreGatherHelper" class="vtkAttributeDataToTableFilter">
           <IntVectorProperty name="FieldAssociation"
             command="SetFieldAssociation"
             number_of_elements="1"
             default_values="0">
             <Documentation>
               Select the attribute data to pass.
             </Documentation>
             <EnumerationDomain name="enum">
               <Entry text="Points" value="0" />
               <Entry text="Cells" value="1" />
               <Entry text="Field Data" value="2" />
               <!-- These values are not applicable for vtkDataSet.
               <Entry text="Vertices" value="4" />
               <Entry text="Edges" value="5" />
               <Entry text="Rows" value="6" />
               -->
             </EnumerationDomain>
           </IntVectorProperty>
           <IntVectorProperty name="AddMetaData"
             command="SetAddMetaData"
             number_of_elements="1"
             default_values="1">
             <Documentation>
               It is possible for this filter to add additional meta-data to the
               field data such as point coordinates (when point attributes are
               selected and input is pointset) or structured coordinates etc.
               To enable this addition of extra information, turn this flag on.
             </Documentation>
             <BooleanDomain name="bool" />
           </IntVectorProperty>
        </Proxy>
        <ExposedProperties>
          <Property name="FieldAssociation" />
        </ExposedProperties>
      </SubProxy>

      <SubProxy>
        <Proxy name="PostGatherHelper" class="vtkPVMergeTables" />
      </SubProxy>

      <Hints>
        <Property name="Input" show="0"/>
        <Property name="FileName" show="0"/>
        <WriterFactory extensions="csv"
          file_description="CSV File"/>
      </Hints>
      <!-- End of CSVWriter -->
    </PSWriterProxy>
  </ProxyGroup>

</ServerManagerConfiguration>
