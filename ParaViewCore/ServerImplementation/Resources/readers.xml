<ServerManagerConfiguration>

  <ProxyGroup name="internal_sources">
   <SourceProxy name="AVSucdReader"
                class="vtkAVSucdReader"
                label="AVS UCD Reader">
     <Documentation
       short_help="Read a dataset in AVS UCD format."
       long_help="Reads binary or ASCII files stored in AVS UCD format.">
       The AVS UCD reader reads binary or ASCII files stored in AVS UCD format.
       The default file extension is .inp. The output of this reader is
       unstructured grid.
     </Documentation>
     <StringVectorProperty
        name="FileName"
        animateable="0"
        command="SetFileName"
        number_of_elements="1">
        <FileListDomain name="files"/>
        <Documentation>
          This property specifies the file name for the AVS UCD reader.
        </Documentation>
     </StringVectorProperty>

     <StringVectorProperty
        name="CellArrayInfo"
        information_only="1">
        <ArraySelectionInformationHelper attribute_name="Cell"/>
     </StringVectorProperty>

     <StringVectorProperty
        name="CellArrayStatus"
        command="SetCellArrayStatus"
        number_of_elements="2"
        repeat_command="1"
        number_of_elements_per_command="2"
        element_types="2 0"
        information_property="CellArrayInfo"
        label="Cell Arrays">
       <ArraySelectionDomain name="array_list">
          <RequiredProperties>
             <Property name="CellArrayInfo" function="ArrayList"/>
          </RequiredProperties>
       </ArraySelectionDomain>
       <Documentation>
         This property contains a list of the cell-centered arrays to read.
       </Documentation>
     </StringVectorProperty>

     <StringVectorProperty
        name="PointArrayInfo"
        information_only="1">
        <ArraySelectionInformationHelper attribute_name="Point"/>
     </StringVectorProperty>

     <StringVectorProperty
        name="PointArrayStatus"
        command="SetPointArrayStatus"
        number_of_elements="2"
        repeat_command="1"
        number_of_elements_per_command="2"
        element_types="2 0"
        information_property="PointArrayInfo"
        label="Point Arrays">
       <ArraySelectionDomain name="array_list">
          <RequiredProperties>
             <Property name="PointArrayInfo" function="ArrayList"/>
          </RequiredProperties>
       </ArraySelectionDomain>
       <Documentation>
         This property contains a list of the point-centered arrays to read.
       </Documentation>
     </StringVectorProperty>
   <!-- End AVSucdReader -->
   </SourceProxy>

   <SourceProxy name="MetaImageReaderCore"
                class="vtkMetaImageReader"
                label="Meta Image reader">
     <Documentation
       short_help="Read UNC meta image data."
       long_help="Reads binary UNC meta image data.">
       The Meta Image Reader reads binary UNC meta image data, and produces uniform rectilinear (image/volume) data. The default file extensions are .mhd and .mha.
     </Documentation>
     <StringVectorProperty
        name="FileName"
        animateable="0"
        command="SetFileName"
        number_of_elements="1">
        <FileListDomain name="files"/>
        <Documentation>
          This property specifies the file name for the Meta Image reader.
        </Documentation>
     </StringVectorProperty>
     <Hints>
      <ReaderFactory extensions="mhd mha"
          file_description="Meta Image Data Files" />
     </Hints>
   <!-- End Meta Image Reader -->
   </SourceProxy>

   <SourceProxy name="legacyreader"
                class="vtkPDataSetReader"
                label="Legacy VTK Reader">
     <Documentation
       short_help="Read legacy VTK files."
       long_help="Reads files stored in VTK's legacy file format.">
       The Legacy VTK reader loads files stored in VTK's legacy file format. The expected file extension is .vtk. The type of the dataset may be structured grid, uniform rectilinear grid (image/volume), non-uniform rectiinear grid, unstructured grid, or polygonal.
     </Documentation>
     <StringVectorProperty
        name="FileName"
        animateable="0"
        command="SetFileName"
        number_of_elements="1">
        <FileListDomain name="files"/>
        <Documentation>
          This property specifies the file name for the Legacy VTK reader.
        </Documentation>
     </StringVectorProperty>
   <!-- End legacyreader -->
   </SourceProxy>

   <SourceProxy name="XMLPolyDataReaderCore"
                class="vtkXMLPolyDataReader"
                label="XML PolyData Reader">
     <Documentation
       short_help="Read VTK XML polydata files."
       long_help="Reads serial VTK XML polydata files.">
       The XML Polydata reader reads the VTK XML polydata file format. The standard extension is .vtp.
     </Documentation>
     <StringVectorProperty
        name="FileName"
        command="SetFileName"
        animateable="0"
        number_of_elements="1">
        <FileListDomain name="files"/>
        <Documentation>
          This property specifies the file name for the VTK XML polygonal dataset reader.
        </Documentation>
     </StringVectorProperty>

     <DoubleVectorProperty
        name="TimestepValues"
        repeatable="1"
        information_only="1">
        <TimeStepsInformationHelper/>
        <Documentation>
          Available timestep values.
        </Documentation>
     </DoubleVectorProperty>

     <StringVectorProperty
        name="CellArrayInfo"
        information_only="1">
        <ArraySelectionInformationHelper attribute_name="Cell"/>
     </StringVectorProperty>

     <StringVectorProperty
        name="CellArrayStatus"
        command="SetCellArrayStatus"
        number_of_elements="0"
        repeat_command="1"
        number_of_elements_per_command="2"
        element_types="2 0"
        information_property="CellArrayInfo"
        label="Cell Arrays">
       <ArraySelectionDomain name="array_list">
          <RequiredProperties>
             <Property name="CellArrayInfo" function="ArrayList"/>
          </RequiredProperties>
       </ArraySelectionDomain>
       <Documentation>
         This property lists which cell-centered arrays to read.
       </Documentation>
     </StringVectorProperty>

     <StringVectorProperty
        name="PointArrayInfo"
        information_only="1">
        <ArraySelectionInformationHelper attribute_name="Point"/>
     </StringVectorProperty>

     <StringVectorProperty
        name="PointArrayStatus"
        command="SetPointArrayStatus"
        number_of_elements="0"
        repeat_command="1"
        number_of_elements_per_command="2"
        element_types="2 0"
        information_property="PointArrayInfo"
        label="Point Arrays">
       <ArraySelectionDomain name="array_list">
          <RequiredProperties>
             <Property name="PointArrayInfo" function="ArrayList"/>
          </RequiredProperties>
       </ArraySelectionDomain>
       <Documentation>
         This property lists which point-centered arrays to read.
       </Documentation>
     </StringVectorProperty>
   <!-- End XMLPolyDataReaderCore -->
   </SourceProxy>

   <SourceProxy name="XMLUnstructuredGridReaderCore"
                class="vtkXMLUnstructuredGridReader"
                label="XML Unstructured Grid reader">
     <Documentation
       short_help="Read VTK XML unstructured grid data files."
       long_help="Reads serial VTK XML unstructured grid data files.">
       The XML Unstructured Grid reader reads the VTK XML unstructured grid data file format. The standard extension is .vtu.
     </Documentation>
     <StringVectorProperty
        name="FileName"
        command="SetFileName"
        animateable="0"
        number_of_elements="1">
        <FileListDomain name="files"/>
        <Documentation>
          This property specifies the file name for the VTK XML unstructured grid reader.
        </Documentation>
     </StringVectorProperty>

     <DoubleVectorProperty
        name="TimestepValues"
        repeatable="1"
        information_only="1">
        <TimeStepsInformationHelper/>
        <Documentation>
          Available timestep values.
        </Documentation>
     </DoubleVectorProperty>

     <StringVectorProperty
        name="CellArrayInfo"
        information_only="1">
        <ArraySelectionInformationHelper attribute_name="Cell"/>
     </StringVectorProperty>

     <StringVectorProperty
        name="CellArrayStatus"
        command="SetCellArrayStatus"
        number_of_elements="0"
        repeat_command="1"
        number_of_elements_per_command="2"
        element_types="2 0"
        information_property="CellArrayInfo"
        label="Cell Arrays">
       <ArraySelectionDomain name="array_list">
          <RequiredProperties>
             <Property name="CellArrayInfo" function="ArrayList"/>
          </RequiredProperties>
       </ArraySelectionDomain>
       <Documentation>
         This property lists which cell-centered arrays to read.
       </Documentation>
     </StringVectorProperty>

     <StringVectorProperty
        name="PointArrayInfo"
        information_only="1">
        <ArraySelectionInformationHelper attribute_name="Point"/>
     </StringVectorProperty>

     <StringVectorProperty
        name="PointArrayStatus"
        command="SetPointArrayStatus"
        number_of_elements="0"
        repeat_command="1"
        number_of_elements_per_command="2"
        element_types="2 0"
        information_property="PointArrayInfo"
        label="Point Arrays">
       <ArraySelectionDomain name="array_list">
          <RequiredProperties>
             <Property name="PointArrayInfo" function="ArrayList"/>
          </RequiredProperties>
       </ArraySelectionDomain>
       <Documentation>
         This property lists which point-centered arrays to read.
       </Documentation>
     </StringVectorProperty>
   <!-- End XMLUnstructuredGridReaderCore -->
   </SourceProxy>

   <SourceProxy name="XMLImageDataReaderCore"
                class="vtkXMLImageDataReader"
                label="XML Image Data Reader">
     <Documentation
       short_help="Read VTK XML image data files."
       long_help="Reads serial VTK XML image data files.">
       The XML Image Data reader reads the VTK XML image data file format. The standard extension is .vti.
     </Documentation>
     <StringVectorProperty
        name="FileName"
        animateable="0"
        command="SetFileName"
        number_of_elements="1">
        <FileListDomain name="files"/>
        <Documentation>
          This property specifies the file name for the VTK XML uniform rectilinear (image/volume) data reader.
        </Documentation>
     </StringVectorProperty>

     <DoubleVectorProperty
        name="TimestepValues"
        repeatable="1"
        information_only="1">
        <TimeStepsInformationHelper/>
        <Documentation>
          Available timestep values.
        </Documentation>
     </DoubleVectorProperty>

     <StringVectorProperty
        name="CellArrayInfo"
        information_only="1">
        <ArraySelectionInformationHelper attribute_name="Cell"/>
     </StringVectorProperty>

     <StringVectorProperty
        name="CellArrayStatus"
        command="SetCellArrayStatus"
        number_of_elements="0"
        repeat_command="1"
        number_of_elements_per_command="2"
        element_types="2 0"
        information_property="CellArrayInfo"
        label="Cell Arrays">
       <ArraySelectionDomain name="array_list">
          <RequiredProperties>
             <Property name="CellArrayInfo" function="ArrayList"/>
          </RequiredProperties>
       </ArraySelectionDomain>
       <Documentation>
         This property lists which cell-centered arrays to read.
       </Documentation>
     </StringVectorProperty>

     <StringVectorProperty
        name="PointArrayInfo"
        information_only="1">
        <ArraySelectionInformationHelper attribute_name="Point"/>
     </StringVectorProperty>

     <StringVectorProperty
        name="PointArrayStatus"
        command="SetPointArrayStatus"
        number_of_elements="0"
        repeat_command="1"
        number_of_elements_per_command="2"
        element_types="2 0"
        information_property="PointArrayInfo"
        label="Point Arrays">
       <ArraySelectionDomain name="array_list">
          <RequiredProperties>
             <Property name="PointArrayInfo" function="ArrayList"/>
          </RequiredProperties>
       </ArraySelectionDomain>
       <Documentation>
         This property lists which point-centered arrays to read.
       </Documentation>
     </StringVectorProperty>

   <!-- End XMLImageDataReaderCore -->
   </SourceProxy>

   <SourceProxy name="XMLStructuredGridReaderCore"
                class="vtkXMLStructuredGridReader"
                label="XML Structured Grid Reader">
     <Documentation
       short_help="Read VTK XML structured grid data files."
       long_help="Reads serial VTK XML structured grid data files.">
       The XML Structured Grid reader reads the VTK XML structured grid data file format. The standard extension is .vts.
     </Documentation>
     <StringVectorProperty
        name="FileName"
        animateable="0"
        command="SetFileName"
        number_of_elements="1">
        <FileListDomain name="files"/>
        <Documentation>
          This property specifies the file name for the VTK XML structured grid reader.
        </Documentation>
     </StringVectorProperty>

     <DoubleVectorProperty
        name="TimestepValues"
        repeatable="1"
        information_only="1">
        <TimeStepsInformationHelper/>
        <Documentation>
          Available timestep values.
        </Documentation>
     </DoubleVectorProperty>

     <StringVectorProperty
        name="CellArrayInfo"
        information_only="1">
        <ArraySelectionInformationHelper attribute_name="Cell"/>
     </StringVectorProperty>

     <StringVectorProperty
        name="CellArrayStatus"
        command="SetCellArrayStatus"
        number_of_elements="0"
        repeat_command="1"
        number_of_elements_per_command="2"
        element_types="2 0"
        information_property="CellArrayInfo"
        label="Cell Arrays">
       <ArraySelectionDomain name="array_list">
          <RequiredProperties>
             <Property name="CellArrayInfo" function="ArrayList"/>
          </RequiredProperties>
       </ArraySelectionDomain>
       <Documentation>
         This property lists which cell-centered arrays to read.
       </Documentation>
     </StringVectorProperty>

     <StringVectorProperty
        name="PointArrayInfo"
        information_only="1">
        <ArraySelectionInformationHelper attribute_name="Point"/>
     </StringVectorProperty>

     <StringVectorProperty
        name="PointArrayStatus"
        command="SetPointArrayStatus"
        number_of_elements="0"
        repeat_command="1"
        number_of_elements_per_command="2"
        element_types="2 0"
        information_property="PointArrayInfo"
        label="Point Arrays">
       <ArraySelectionDomain name="array_list">
          <RequiredProperties>
             <Property name="PointArrayInfo" function="ArrayList"/>
          </RequiredProperties>
       </ArraySelectionDomain>
       <Documentation>
         This property lists which point-centered arrays to read.
       </Documentation>
     </StringVectorProperty>
   <!-- End XMLStructuredGridReaderCore -->
   </SourceProxy>

   <SourceProxy name="XMLRectilinearGridReaderCore"
                class="vtkXMLRectilinearGridReader"
                label="XML Rectilinear Grid Reader">
     <Documentation
       short_help="Read VTK XML rectilinear grid data files."
       long_help="Reads serial VTK XML rectilinear grid data files.">
       The XML Rectilinear Grid reader reads the VTK XML rectilinear grid data file format. The standard extension is .vtr.
     </Documentation>
     <StringVectorProperty
        name="FileName"
        animateable="0"
        command="SetFileName"
        number_of_elements="1">
        <FileListDomain name="files"/>
        <Documentation>
          This property specifies the file name for the VTK XML non-uniform rectilinear grid reader.
        </Documentation>
     </StringVectorProperty>

     <DoubleVectorProperty
        name="TimestepValues"
        repeatable="1"
        information_only="1">
        <TimeStepsInformationHelper/>
        <Documentation>
          Available timestep values.
        </Documentation>
     </DoubleVectorProperty>

     <StringVectorProperty
        name="CellArrayInfo"
        information_only="1">
        <ArraySelectionInformationHelper attribute_name="Cell"/>
     </StringVectorProperty>

     <StringVectorProperty
        name="CellArrayStatus"
        command="SetCellArrayStatus"
        number_of_elements="0"
        repeat_command="1"
        number_of_elements_per_command="2"
        element_types="2 0"
        information_property="CellArrayInfo"
        label="Cell Arrays">
       <ArraySelectionDomain name="array_list">
          <RequiredProperties>
             <Property name="CellArrayInfo" function="ArrayList"/>
          </RequiredProperties>
       </ArraySelectionDomain>
       <Documentation>
         This property lists which cell-centered arrays to read.
       </Documentation>
     </StringVectorProperty>

     <StringVectorProperty
        name="PointArrayInfo"
        information_only="1">
        <ArraySelectionInformationHelper attribute_name="Point"/>
     </StringVectorProperty>

     <StringVectorProperty
        name="PointArrayStatus"
        command="SetPointArrayStatus"
        number_of_elements="0"
        repeat_command="1"
        number_of_elements_per_command="2"
        element_types="2 0"
        information_property="PointArrayInfo"
        label="Point Arrays">
       <ArraySelectionDomain name="array_list">
          <RequiredProperties>
             <Property name="PointArrayInfo" function="ArrayList"/>
          </RequiredProperties>
       </ArraySelectionDomain>
       <Documentation>
         This property lists which point-centered arrays to read.
       </Documentation>
     </StringVectorProperty>
   <!-- End XMLRectilinearGridReaderCore -->
   </SourceProxy>

   <SourceProxy name="XMLPPolyDataReaderCore"
                class="vtkXMLPPolyDataReader"
                label="XML Partitioned Polydata Reader">
     <Documentation
       short_help="Read partitioned VTK XML polydata files."
       long_help="Reads the summary file and the associated VTK XML polydata files.">
       The XML Partitioned Polydata reader reads the partitioned VTK polydata file format. It reads the partitioned format's summary file and then the associated VTK XML polydata files. The expected file extension is .pvtp.
     </Documentation>
     <StringVectorProperty
        name="FileName"
        animateable="0"
        command="SetFileName"
        number_of_elements="1">
        <FileListDomain name="files"/>
        <Documentation>
          This property specifies the file name for the partitioned VTK XML polygonal dataset reader.
        </Documentation>
     </StringVectorProperty>

     <StringVectorProperty
        name="CellArrayInfo"
        information_only="1">
        <ArraySelectionInformationHelper attribute_name="Cell"/>
     </StringVectorProperty>

     <StringVectorProperty
        name="CellArrayStatus"
        command="SetCellArrayStatus"
        number_of_elements="0"
        repeat_command="1"
        number_of_elements_per_command="2"
        element_types="2 0"
        information_property="CellArrayInfo"
        label="Cell Arrays">
       <ArraySelectionDomain name="array_list">
          <RequiredProperties>
             <Property name="CellArrayInfo" function="ArrayList"/>
          </RequiredProperties>
       </ArraySelectionDomain>
       <Documentation>
         This property lists which cell-centered arrays to read.
       </Documentation>
     </StringVectorProperty>

     <StringVectorProperty
        name="PointArrayInfo"
        information_only="1">
        <ArraySelectionInformationHelper attribute_name="Point"/>
     </StringVectorProperty>

     <StringVectorProperty
        name="PointArrayStatus"
        command="SetPointArrayStatus"
        number_of_elements="0"
        repeat_command="1"
        number_of_elements_per_command="2"
        element_types="2 0"
        information_property="PointArrayInfo"
        label="Point Arrays">
       <ArraySelectionDomain name="array_list">
          <RequiredProperties>
             <Property name="PointArrayInfo" function="ArrayList"/>
          </RequiredProperties>
       </ArraySelectionDomain>
       <Documentation>
         This property lists which point-centered arrays to read.
       </Documentation>
     </StringVectorProperty>

   <!-- End XMLPPolyDataReaderCore -->
   </SourceProxy>

   <SourceProxy name="XMLPUnstructuredGridReaderCore"
                class="vtkXMLPUnstructuredGridReader"
                label="XML Partitioned Unstructured Grid Reader">
     <Documentation
       short_help="Read partitioned VTK XML unstructured grid files."
       long_help="Reads the summary file and the associated VTK XML unstructured grid files.">
       The XML Partitioned Unstructured Grid reader reads the partitioned VTK unstructured grid data file format. It reads the partitioned format's summary file and then the associated VTK XML unstructured grid data files. The expected file extension is .pvtu.
     </Documentation>
     <StringVectorProperty
        name="FileName"
        animateable="0"
        command="SetFileName"
        number_of_elements="1">
        <FileListDomain name="files"/>
        <Documentation>
          This property specifies the file name for the partitioned VTK XML unstructured grid reader.
        </Documentation>
     </StringVectorProperty>

     <StringVectorProperty
        name="CellArrayInfo"
        information_only="1">
        <ArraySelectionInformationHelper attribute_name="Cell"/>
     </StringVectorProperty>

     <StringVectorProperty
        name="CellArrayStatus"
        command="SetCellArrayStatus"
        number_of_elements="0"
        repeat_command="1"
        number_of_elements_per_command="2"
        element_types="2 0"
        information_property="CellArrayInfo"
        label="Cell Arrays">
       <ArraySelectionDomain name="array_list">
          <RequiredProperties>
             <Property name="CellArrayInfo" function="ArrayList"/>
          </RequiredProperties>
       </ArraySelectionDomain>
       <Documentation>
         This property lists which cell-centered arrays to read.
       </Documentation>
     </StringVectorProperty>

     <StringVectorProperty
        name="PointArrayInfo"
        information_only="1">
        <ArraySelectionInformationHelper attribute_name="Point"/>
     </StringVectorProperty>

     <StringVectorProperty
        name="PointArrayStatus"
        command="SetPointArrayStatus"
        number_of_elements="0"
        repeat_command="1"
        number_of_elements_per_command="2"
        element_types="2 0"
        information_property="PointArrayInfo"
        label="Point Arrays">
       <ArraySelectionDomain name="array_list">
          <RequiredProperties>
             <Property name="PointArrayInfo" function="ArrayList"/>
          </RequiredProperties>
       </ArraySelectionDomain>
       <Documentation>
         This property lists which point-centered arrays to read.
       </Documentation>
     </StringVectorProperty>
   <!-- End XMLPUnstructuredGridReaderCore -->
   </SourceProxy>

   <SourceProxy name="XMLPImageDataReaderCore"
                class="vtkXMLPImageDataReader"
                label="XML Partitioned Image Data Reader">
     <Documentation
       short_help="Read partitioned VTK XML image data files."
       long_help="Reads the summary file and the associated VTK XML image data files.">
       The XML Partitioned Image Data reader reads the partitioned VTK image data file format. It reads the partitioned format's summary file and then the associated VTK XML image data files. The expected file extension is .pvti.
     </Documentation>
     <StringVectorProperty
        name="FileName"
        animateable="0"
        command="SetFileName"
        number_of_elements="1">
        <FileListDomain name="files"/>
        <Documentation>
          This property specifies the file name for the partitioned VTK XML uniform rectilinear grid (image/volume) reader.
        </Documentation>
     </StringVectorProperty>

     <StringVectorProperty
        name="CellArrayInfo"
        information_only="1">
        <ArraySelectionInformationHelper attribute_name="Cell"/>
     </StringVectorProperty>

     <StringVectorProperty
        name="CellArrayStatus"
        command="SetCellArrayStatus"
        number_of_elements="0"
        repeat_command="1"
        number_of_elements_per_command="2"
        element_types="2 0"
        information_property="CellArrayInfo"
        label="Cell Arrays">
       <ArraySelectionDomain name="array_list">
          <RequiredProperties>
             <Property name="CellArrayInfo" function="ArrayList"/>
          </RequiredProperties>
       </ArraySelectionDomain>
       <Documentation>
         This propert lists which cell-centered arrays to read.
       </Documentation>
     </StringVectorProperty>

     <StringVectorProperty
        name="PointArrayInfo"
        information_only="1">
        <ArraySelectionInformationHelper attribute_name="Point"/>
     </StringVectorProperty>

     <StringVectorProperty
        name="PointArrayStatus"
        command="SetPointArrayStatus"
        number_of_elements="0"
        repeat_command="1"
        number_of_elements_per_command="2"
        element_types="2 0"
        information_property="PointArrayInfo"
        label="Point Arrays">
       <ArraySelectionDomain name="array_list">
          <RequiredProperties>
             <Property name="PointArrayInfo" function="ArrayList"/>
          </RequiredProperties>
       </ArraySelectionDomain>
       <Documentation>
         This property lists which point-centered arrays to read.
       </Documentation>
     </StringVectorProperty>
   <!-- End XMLPImageDataReaderCore -->
   </SourceProxy>

   <SourceProxy name="XMLPStructuredGridReaderCore"
                class="vtkXMLPStructuredGridReader"
                label="XML Partitioned Structured Grid Reader">
     <Documentation
       short_help="Read partitioned VTK XML structured grid files."
       long_help="Reads the summary file and the associated VTK XML structured grid files.">
       The XML Partitioned Structured Grid reader reads the partitioned VTK structured grid data file format. It reads the partitioned format's summary file and then the associated VTK XML structured grid data files. The expected file extension is .pvts.
     </Documentation>
     <StringVectorProperty
        name="FileName"
        animateable="0"
        command="SetFileName"
        number_of_elements="1">
        <FileListDomain name="files"/>
        <Documentation>
          This property specifies the file name for the partitioned VTK XML structured grid reader.
        </Documentation>
     </StringVectorProperty>

     <StringVectorProperty
        name="CellArrayInfo"
        information_only="1">
        <ArraySelectionInformationHelper attribute_name="Cell"/>
     </StringVectorProperty>

     <StringVectorProperty
        name="CellArrayStatus"
        command="SetCellArrayStatus"
        number_of_elements="0"
        repeat_command="1"
        number_of_elements_per_command="2"
        element_types="2 0"
        information_property="CellArrayInfo"
        label="Cell Arrays">
       <ArraySelectionDomain name="array_list">
          <RequiredProperties>
             <Property name="CellArrayInfo" function="ArrayList"/>
          </RequiredProperties>
       </ArraySelectionDomain>
       <Documentation>
         This property lists which cell-centered arrays to read.
       </Documentation>
     </StringVectorProperty>

     <StringVectorProperty
        name="PointArrayInfo"
        information_only="1">
        <ArraySelectionInformationHelper attribute_name="Point"/>
     </StringVectorProperty>

     <StringVectorProperty
        name="PointArrayStatus"
        command="SetPointArrayStatus"
        number_of_elements="0"
        repeat_command="1"
        number_of_elements_per_command="2"
        element_types="2 0"
        information_property="PointArrayInfo"
        label="Point Arrays">
       <ArraySelectionDomain name="array_list">
          <RequiredProperties>
             <Property name="PointArrayInfo" function="ArrayList"/>
          </RequiredProperties>
       </ArraySelectionDomain>
       <Documentation>
         This property lists which point-centered arrays to read.
       </Documentation>
     </StringVectorProperty>
   <!-- End XMLPStructuredGridReaderCore -->
   </SourceProxy>

   <SourceProxy name="XMLPRectilinearGridReaderCore"
                class="vtkXMLPRectilinearGridReader"
                label="XML Partitioned Rectilinear Grid Reader">
     <Documentation
       short_help="Read partitioned VTK XML rectilinear grid files."
       long_help="Reads the summary file and the associated VTK XML rectilinear grid files.">
       The XML Partitioned Rectilinear Grid reader reads the partitioned VTK rectilinear grid file format. It reads the partitioned format's summary file and then the associated VTK XML rectilinear grid files. The expected file extension is .pvtr.
     </Documentation>
     <StringVectorProperty
        name="FileName"
        animateable="0"
        command="SetFileName"
        number_of_elements="1">
        <FileListDomain name="files"/>
        <Documentation>
          This property specifies the file name for the partitioned VTK XML non-uniform rectilinear grid reader.
        </Documentation>
     </StringVectorProperty>

     <StringVectorProperty
        name="CellArrayInfo"
        information_only="1">
        <ArraySelectionInformationHelper attribute_name="Cell"/>
     </StringVectorProperty>

     <StringVectorProperty
        name="CellArrayStatus"
        command="SetCellArrayStatus"
        number_of_elements="0"
        repeat_command="1"
        number_of_elements_per_command="2"
        element_types="2 0"
        information_property="CellArrayInfo"
        label="Cell Arrays">
       <ArraySelectionDomain name="array_list">
          <RequiredProperties>
             <Property name="CellArrayInfo" function="ArrayList"/>
          </RequiredProperties>
       </ArraySelectionDomain>
       <Documentation>
         This property lists which cell-centered arrays to read.
       </Documentation>
     </StringVectorProperty>

     <StringVectorProperty
        name="PointArrayInfo"
        information_only="1">
        <ArraySelectionInformationHelper attribute_name="Point"/>
     </StringVectorProperty>

     <StringVectorProperty
        name="PointArrayStatus"
        command="SetPointArrayStatus"
        number_of_elements="0"
        repeat_command="1"
        number_of_elements_per_command="2"
        element_types="2 0"
        information_property="PointArrayInfo"
        label="Point Arrays">
       <ArraySelectionDomain name="array_list">
          <RequiredProperties>
             <Property name="PointArrayInfo" function="ArrayList"/>
          </RequiredProperties>
       </ArraySelectionDomain>
       <Documentation>
         This property lists which point-centered arrays to read.
       </Documentation>
     </StringVectorProperty>
   <!-- End XMLPRectilinearGridReaderCore -->
   </SourceProxy>

   <SourceProxy name="stlreadercore" class="vtkSTLReader" label="STL Reader">
     <Documentation
       short_help="Read STL files."
       long_help="Reads ASCII or binary stereo lithography (STL) files.">
       The STL reader reads ASCII or binary stereo lithography (STL) files. The expected file extension is .stl. The output of this reader is a polygonal dataset.
     </Documentation>
     <StringVectorProperty
        name="FileName"
        animateable="0"
        command="SetFileName"
        number_of_elements="1">
        <FileListDomain name="files"/>
        <Documentation>
          This property specifies the file name for the STL reader.
        </Documentation>
     </StringVectorProperty>

      <IntVectorProperty name="ScalarTags"
        command="SetScalarTags"
        number_of_elements="1"
        default_values="1">
        <BooleanDomain name="bool" />
        <Documentation>
          When set to true, the reader will include cell data describing which solid a cell belongs to.
        </Documentation>
      </IntVectorProperty>

   <!-- End stlreader -->
   </SourceProxy>

   <SourceProxy name="CSVReaderCore" class="vtkDelimitedTextReader" label="CSV Reader">
      <Documentation
        short_help="Read a comma-separated values file."
        long_help="Reads a comma-separated values file into a 1D rectilinear grid.">
        The CSV reader reads a comma-separated values file into a 1D rectilinear
        grid. If the file was saved using the CSVWriter, then the rectilinear
        grid's points and point data can be restored as well as the cell data.
        Otherwise all the data in the CSV file is treated as cell data. The
        default file extension is .csv.
      </Documentation>
      <StringVectorProperty name="FileName"
        command="SetFileName"
        animateable="0"
        number_of_elements="1">
        <FileListDomain name="files"/>
        <Documentation>
          This property specifies the file name for the CSV (Command Separated Values) reader.
        </Documentation>
      </StringVectorProperty>

      <IntVectorProperty name="DetectNumericColumns"
        command="SetDetectNumericColumns"
        number_of_elements="1"
        default_values="1">
        <BooleanDomain name="bool" />
        <Documentation>
          When set to true, the reader will detect numeric columns and create
          vtkDoubleArray or vtkIntArray for those instead of vtkStringArray.
        </Documentation>
      </IntVectorProperty>

      <IntVectorProperty name="UseStringDelimiter"
        command="SetUseStringDelimiter"
        number_of_elements="1"
        default_values="1">
        <BooleanDomain name="bool" />
        <Documentation>
          This property indicates whether to use the string delimiter.
        </Documentation>
      </IntVectorProperty>

      <IntVectorProperty name="HaveHeaders"
        command="SetHaveHeaders"
        number_of_elements="1"
        default_values="1">
        <BooleanDomain name="bool" />
        <Documentation>
          If the value of this property is 1, treat the first line of the file as headers.
        </Documentation>
      </IntVectorProperty>

      <StringVectorProperty name="FieldDelimiterCharacters"
        command="SetFieldDelimiterCharacters"
        number_of_elements="1"
        default_values=",">
        <Documentation>
          This property lists the characters that may be used to separate fields. For
          example, a value of "," indicates a comma-separated value file. A
          value of ".:;" indicates that columns may be separated by a
          period, colon or semicolon. The order of the characters in the text
          string does not matter.
        </Documentation>
      </StringVectorProperty>

    <IntVectorProperty name="MergeConsecutiveDelimiters"
        command="SetMergeConsecutiveDelimiters"
        number_of_elements="1"
        default_values="0">
        <BooleanDomain name="bool" />
        <Documentation>
          Whether to merge successive delimiters. Use this if (for example) your fields are separated
          by spaces but you don't know exactly how many.
        </Documentation>
      </IntVectorProperty>

      <!-- End of CSVReaderCore -->
   </SourceProxy>

   <SourceProxy name="XMLMultiBlockDataReaderCore"
                class="vtkXMLMultiBlockDataReader"
                label="XML Multi-Block Data reader">
     <Documentation>
        Internal proxy used by XMLMultiBlockDataWriter.
     </Documentation>

     <StringVectorProperty
        name="FileName"
        command="SetFileName"
        animateable="0"
        number_of_elements="1">
        <FileListDomain name="files"/>
        <Documentation>
          This property specifies the file name for the VTK multi-block reader.
        </Documentation>
     </StringVectorProperty>
   <!-- End MultiBlockDataReader -->
   </SourceProxy>

   <SourceProxy name="XMLHierarchicalBoxDataReaderCore"
                class="vtkXMLHierarchicalBoxDataReader"
                label="XML Hierarchical Box Data reader">

     <StringVectorProperty
        name="FileName"
        command="SetFileName"
        animateable="0"
        number_of_elements="1">
        <FileListDomain name="files"/>
        <Documentation>
          This property specifies the file name for the VTK hierarchical box data reader.
        </Documentation>
     </StringVectorProperty>
   <!-- End HierarchicalBoxDataReader -->
   </SourceProxy>

    <SourceProxy name="SLACParticleReaderCore"
                 class="vtkSLACParticleReader"
                 label="SLAC Particle Data Reader">
      <Documentation>
        The SLAC Particle data reader.
      </Documentation>

      <StringVectorProperty name="FileName"
                            command="SetFileName"
                            animateable="0"
                            number_of_elements="1">
        <FileListDomain name="files" />
        <Documentation>
          The name of the file to load.
        </Documentation>
      </StringVectorProperty>
    </SourceProxy> <!-- SLACParticleReaderCore -->


    <SourceProxy name="ParticleReaderCore"
      class="vtkParticleReader"
      label="VTK Particle Reader">
      <Documentation>
        Core for ParticleReader.
      </Documentation>

      <StringVectorProperty name="FileName"
        command="SetFileName"
        number_of_elements="1">
        <FileListDomain name="files" />
        <Documentation>
          The name of the file to load.
        </Documentation>
      </StringVectorProperty>

      <IntVectorProperty name="ByteOrder"
        command="SetDataByteOrder"
        number_of_elements="1"
        default_values="0">
        <Documentation>
        Set/Get the byte ordering of the file you are trying to read in.
        </Documentation>
        <EnumerationDomain name="enum">
          <Entry text="BigEndian" value="0" />
          <Entry text="LittleEndian" value="1" />
        </EnumerationDomain>
      </IntVectorProperty>

      <IntVectorProperty name="HasScalar"
        command="SetHasScalar"
        number_of_elements="1"
        default_values="1">
        <Documentation>
          Default: 1. If 1 then each particle has a value associated with it.
        </Documentation>
        <BooleanDomain name="bool" />
      </IntVectorProperty>

      <IntVectorProperty name="FileType"
        command="SetFileType"
        number_of_elements="1"
        default_values="0">
        <Documentation>
          Set the file type. The options are:
          - Unknown (0) (default) the reader will attempt to determine the file
            type. If this fails then you should set the file type yourself.
          - Text (1) the file type is text.
          - Binary (2) the file type is binary.
        </Documentation>
        <EnumerationDomain name="enum">
          <Entry text="Unknown" value="0" />
          <Entry text="Text" value="1" />
          <Entry text="Binary" value="2" />
        </EnumerationDomain>
      </IntVectorProperty>

      <IntVectorProperty name="DataType"
        command="SetDataType"
        number_of_elements="1"
        default_values="10">
        <Documentation>
          Get/Set the data type. The options are:
          - Float (10) (default) single precision floating point.
          - Double (11) double precision floating point.
        </Documentation>
        <EnumerationDomain name="enum">
          <Entry text="Float" value="10" />
          <Entry text="Double" value="11" />
        </EnumerationDomain>
      </IntVectorProperty>

      <!-- ParticleReaderCore -->
    </SourceProxy>

   <SourceProxy name="ExodusIIReaderCore"
                class="vtkPExodusIIReader">
     <Documentation
       short_help="Read Exodus II files."
       long_help="Reads an Exodus II file to produce an unstructured grid.">
       The Exodus reader loads Exodus II files and produces an unstructured grid output.
       The default file extensions are .g, .e, .ex2, .ex2v2, .exo, .gen, .exoII, .exii, .0, .00, .000, and .0000.
     </Documentation>

     <StringVectorProperty
        name="FileName"
        command="SetFileName"
        number_of_elements="1"
        animateable="0">
        <FileListDomain name="files"/>
        <Documentation>
          This property specifies the file name for the Exodus reader.
        </Documentation>
     </StringVectorProperty>

     <StringVectorProperty
        name="FilePrefixInfo"
        command="GetFilePrefix"
        information_only="1">
        <SimpleStringInformationHelper/>
     </StringVectorProperty>

     <StringVectorProperty
        name="FilePrefix"
        command="SetFilePrefix"
        number_of_elements="1"
        animateable="0"
        information_property="FilePrefixInfo" >
       <FileListDomain name="default_value" optional="1">
          <RequiredProperties>
             <Property name="FilePrefixInfo" function="Prefix"/>
          </RequiredProperties>
       </FileListDomain>
        <Documentation>
          This property specifies the file root used with the file pattern to format a file name. (See the File Pattern property.)
        </Documentation>
     </StringVectorProperty>

     <StringVectorProperty
        name="FilePatternInfo"
        command="GetFilePattern"
        information_only="1">
        <SimpleStringInformationHelper/>
     </StringVectorProperty>

     <StringVectorProperty
        name="FilePattern"
        command="SetFilePattern"
        number_of_elements="1"
        animateable="0"
        information_property="FilePatternInfo" >
       <FileListDomain name="default_value" optional="1">
          <RequiredProperties>
             <Property name="FilePatternInfo" function="Pattern"/>
          </RequiredProperties>
       </FileListDomain>
       <Documentation>
         This property contains a text string specifying the pattern used to load files. There are two parts to it: the prefix (%s) and the file number (%i). The format used is the same as that used for printf.
       </Documentation>
     </StringVectorProperty>

     <IntVectorProperty
        name="FileRangeInfo"
        command="GetFileRange"
        information_only="1">
        <SimpleIntInformationHelper/>
     </IntVectorProperty>

     <IntVectorProperty
        name="FileRange"
        command="SetFileRange"
        number_of_elements="2"
        default_values="-1 -1"
        animateable="0"
        information_property="FileRangeInfo" >
       <IntRangeDomain name="range">
          <RequiredProperties>
             <Property name="FileRangeInfo" function="Range"/>
          </RequiredProperties>
       </IntRangeDomain>
       <Documentation>
         This property controls the indices of the first and last files to be read.
       </Documentation>
     </IntVectorProperty>

     <StringVectorProperty
        name="XMLFileNameInfo"
        command="GetXMLFileName"
        information_only="1">
        <SimpleStringInformationHelper/>
     </StringVectorProperty>

     <StringVectorProperty
        name="XMLFileName"
        command="SetXMLFileName"
        number_of_elements="1"
        animateable="0"
        label="XML File Name">
       <FileListDomain name="default_value" optional="1">
          <RequiredProperties>
             <Property name="XMLFileNameInfo" function="XMLFileName"/>
          </RequiredProperties>
       </FileListDomain>
       <Documentation>
         This property specifies the name of an XML file containing part and material descriptions and a mapping to element blocks.
       </Documentation>
     </StringVectorProperty>

     <IntVectorProperty name="HasModeShapes"
                        command="SetHasModeShapes"
                        number_of_elements="1"
                        default_values="0">
       <BooleanDomain name="bool"/>
       <Documentation>
         Some simulations overload the Exodus time steps to represent mode
         shapes. In this case, it does not make sense to iterate over the
         "time steps", because they are not meant to be played in order.
         Rather, each represents the vibration at a different "mode."
         Setting the value of this property to 1 changes the semantics of the reader to not
         report the time steps to downstream filters.
       </Documentation>
     </IntVectorProperty>

     <IntVectorProperty name="AnimateVibrations"
                        command="SetAnimateModeShapes"
                        number_of_elements="1"
                        default_values="1"
                        animateable="0"
                        label="Animate Vibrations">
       <BooleanDomain name="bool"/>
       <Documentation>
         If this flag is on and HasModeShapes is also on, then this reader
         will report a continuous time range [0,1] and animate the
         displacements in a periodic sinusoid. If this flag is off and
         HasModeShapes is on, this reader ignores time. This flag has no
         effect if HasModeShapes is off.
       </Documentation>
     </IntVectorProperty>

     <!-- The following two properties magically send time information -->
     <!-- to the animation panel. Usually you only need one (the former -->
     <!-- for discrete time, the latter for continuous time), but changing -->
     <!-- the HasModeShapes ivar switches between discrete and continuous -->
     <!-- time. -->
     <DoubleVectorProperty
         name="TimestepValues"
         repeatable="1"
         information_only="1">
       <TimeStepsInformationHelper/>
     </DoubleVectorProperty>
     <DoubleVectorProperty name="TimeRange" information_only="1">
       <TimeRangeInformationHelper/>
     </DoubleVectorProperty>

     <IntVectorProperty name="ModeShape"
                        command="SetModeShape"
                        number_of_elements="1"
                        default_values="1"
                        information_property="TimestepValues">
       <IntRangeDomain name="range">
         <RequiredProperties>
           <Property name="TimeStepRangeInfo" function="Range"/>
         </RequiredProperties>
       </IntRangeDomain>
       <Documentation>
         Specify which mode shape to animate when HasModeShapes is on.
       </Documentation>
     </IntVectorProperty>

     <Property name="Refresh"
               command="UpdateTimeInformation"
               is_internal="1">
       <Documentation>
         Read in additional time steps that have been written to the file since it was first opened in ParaView.
         Useful for monitoring a simulation while it is running.
       </Documentation>
     </Property>

     <StringVectorProperty
        name="EdgeBlocksInfo"
        information_only="1">
        <ArraySelectionInformationHelper attribute_name="EdgeBlock"/>
     </StringVectorProperty>

     <StringVectorProperty
        name="EdgeBlocks"
        command="SetEdgeBlockArrayStatus"
        number_of_elements="2"
        repeat_command="1"
        number_of_elements_per_command="2"
        element_types="2 0"
        information_property="EdgeBlockArrayInfo">
       <ArraySelectionDomain name="array_list">
          <RequiredProperties>
             <Property name="EdgeBlocksInfo" function="ArrayList"/>
          </RequiredProperties>
       </ArraySelectionDomain>
       <Documentation>
         Use this property to select which blocks of edges should be loaded.
         All edges in the same block will have the same interpolant (linear, quadratic, etc.)
         and have the same variables defined over them.
       </Documentation>
     </StringVectorProperty>

     <StringVectorProperty
        name="FaceBlocksInfo"
        information_only="1">
        <ArraySelectionInformationHelper attribute_name="FaceBlock"/>
     </StringVectorProperty>

     <StringVectorProperty
        name="FaceBlocks"
        command="SetFaceBlockArrayStatus"
        number_of_elements="2"
        repeat_command="1"
        number_of_elements_per_command="2"
        element_types="2 0"
        information_property="FaceBlockArrayInfo">
       <ArraySelectionDomain name="array_list">
          <RequiredProperties>
             <Property name="FaceBlocksInfo" function="ArrayList"/>
          </RequiredProperties>
       </ArraySelectionDomain>
       <Documentation>
         Use this property to select which blocks of faces should be loaded.
         All faces in the same block will have the same interpolant (triangular, bilinear quadrilateral, etc.)
         and have the same variables defined over them.
       </Documentation>
     </StringVectorProperty>

     <IntVectorProperty name="SILUpdateStamp"
        command="GetSILUpdateStamp"
        information_only="1">
        <SimpleIntInformationHelper />
        <Documentation>
          Information property indicating the update stamp of the SIL. Every
          time the SIL is rebuilt, this time stamp is changed.
        </Documentation>
     </IntVectorProperty>

     <StringVectorProperty
        name="ElementBlocksInfo"
        information_only="1"
        si_class="vtkSISILProperty"
        command="GetSIL"
        subtree="Blocks"/>

    <IdTypeVectorProperty name="SILTimeStamp"
                          command="GetSILUpdateStamp"
                          number_of_elements="1"
                          default_values="0"
                          information_only="1" />
     
     <StringVectorProperty
        name="ElementBlocks"
        command="SetElementBlockArrayStatus"
        repeat_command="1"
        number_of_elements_per_command="2"
        element_types="2 0" >
       <SILDomain name="array_list" subtree="Blocks">
          <RequiredProperties>
             <Property name="ElementBlocksInfo" function="ArrayList" />
             <Property name="SILTimeStamp" function="TimeStamp" />
          </RequiredProperties>
       </SILDomain>
       <Documentation>
         Use this property to select which blocks of elements (cells) should be loaded.
         All elements (cells) in the same block will have the same interpolant (tetrahedral, triangular, trilinear hexahedral, etc.)
         and have the same variables defined over them.
       </Documentation>
     </StringVectorProperty>

     <StringVectorProperty
        name="GlobalVariablesInfo"
        information_only="1">
        <ArraySelectionInformationHelper attribute_name="GlobalResult"/>
     </StringVectorProperty>

     <StringVectorProperty
        name="GlobalVariables"
        command="SetGlobalResultArrayStatus"
        repeat_command="1"
        number_of_elements_per_command="2"
        element_types="2 0"
        information_property="GlobalVariablesInfo">
       <ArraySelectionDomain name="array_list">
          <RequiredProperties>
             <Property name="GlobalVariablesInfo" function="ArrayList"/>
          </RequiredProperties>
       </ArraySelectionDomain>
       <Documentation>
         Use this property to select which global (i.e., per-mesh) variables should be loaded.
         Global variables are stored as arrays in the field data of the reader's output.
       </Documentation>
     </StringVectorProperty>

     <StringVectorProperty
        name="PointVariablesInfo"
        information_only="1">
        <ArraySelectionInformationHelper attribute_name="PointResult"/>
     </StringVectorProperty>

     <StringVectorProperty
        name="PointVariables"
        command="SetPointResultArrayStatus"
        number_of_elements="2"
        repeat_command="1"
        number_of_elements_per_command="2"
        element_types="2 0"
        information_property="PointVariablesInfo">
       <ArraySelectionDomain name="array_list">
          <RequiredProperties>
             <Property name="PointVariablesInfo" function="ArrayList"/>
          </RequiredProperties>
       </ArraySelectionDomain>
       <Documentation>
         Use this property to select which nodal (i.e., per-point) variables should be loaded.
       </Documentation>
     </StringVectorProperty>

     <StringVectorProperty
        name="EdgeVariablesInfo"
        information_only="1">
        <ArraySelectionInformationHelper attribute_name="EdgeResult"/>
     </StringVectorProperty>

     <StringVectorProperty
        name="EdgeVariables"
        command="SetEdgeResultArrayStatus"
        number_of_elements="2"
        repeat_command="1"
        number_of_elements_per_command="2"
        element_types="2 0"
        information_property="EdgeVariablesInfo">
       <ArraySelectionDomain name="array_list">
          <RequiredProperties>
             <Property name="EdgeVariablesInfo" function="ArrayList"/>
          </RequiredProperties>
       </ArraySelectionDomain>
       <Documentation>
         Use this property to select which variables defined over edges should be loaded.
         Edges are oriented boundaries of one or more higher-dimensional cells also present in the mesh.
         Edge variables specify a single value per entry in some edge block.
       </Documentation>
     </StringVectorProperty>

     <StringVectorProperty
        name="FaceVariablesInfo"
        information_only="1">
        <ArraySelectionInformationHelper attribute_name="FaceResult"/>
     </StringVectorProperty>

     <StringVectorProperty
        name="FaceVariables"
        command="SetFaceResultArrayStatus"
        number_of_elements="2"
        repeat_command="1"
        number_of_elements_per_command="2"
        element_types="2 0"
        information_property="FaceVariablesInfo">
       <ArraySelectionDomain name="array_list">
          <RequiredProperties>
             <Property name="FaceVariablesInfo" function="ArrayList"/>
          </RequiredProperties>
       </ArraySelectionDomain>
       <Documentation>
         Use this property to select which variables defined over faces should be loaded.
         Faces are oriented boundaries of one or more higher-dimensional cells also present in the mesh.
         Face variables specify a single value per entry in some face block.
       </Documentation>
     </StringVectorProperty>

     <StringVectorProperty
        name="ElementVariablesInfo"
        information_only="1">
        <ArraySelectionInformationHelper attribute_name="ElementResult"/>
     </StringVectorProperty>

     <StringVectorProperty
        name="ElementVariables"
        command="SetElementResultArrayStatus"
        number_of_elements="2"
        repeat_command="1"
        number_of_elements_per_command="2"
        element_types="2 0"
        information_property="ElementVariablesInfo">
       <ArraySelectionDomain name="array_list">
          <RequiredProperties>
             <Property name="ElementVariablesInfo" function="ArrayList"/>
          </RequiredProperties>
       </ArraySelectionDomain>
       <Documentation>
         Use this property to select which variables defined over elements (cells) should be loaded.
         Element variables specify a single value per entry in some element block.
       </Documentation>
     </StringVectorProperty>

     <StringVectorProperty
        name="NodeMapInfo"
        information_only="1">
        <ArraySelectionInformationHelper attribute_name="NodeMap"/>
     </StringVectorProperty>

     <StringVectorProperty
        name="NodeMapArrayStatus"
        command="SetNodeMapArrayStatus"
        number_of_elements="2"
        repeat_command="1"
        number_of_elements_per_command="2"
        element_types="2 0"
        information_property="NodeMapInfo">
       <ArraySelectionDomain name="array_list">
          <RequiredProperties>
             <Property name="NodeMapInfo" function="ArrayList"/>
          </RequiredProperties>
       </ArraySelectionDomain>
       <Documentation>
         Specify which maps defined over nodes (points) in the mesh should be loaded.
         A node map is a renumbering of all the points in a file from their offset in the file
         to some arbitrary integers, usually specifying a unique global ID across a set of files.
         These are sometimes called new-style maps because they are specified differently
         than in older Exodus files, which only allowed a single node map.
       </Documentation>
     </StringVectorProperty>

      <StringVectorProperty
        name="EdgeMapInfo"
        information_only="1">
        <ArraySelectionInformationHelper attribute_name="EdgeMap"/>
     </StringVectorProperty>

     <StringVectorProperty
        name="EdgeMapArrayStatus"
        command="SetEdgeMapArrayStatus"
        number_of_elements="2"
        repeat_command="1"
        number_of_elements_per_command="2"
        element_types="2 0"
        information_property="EdgeMapInfo">
       <ArraySelectionDomain name="array_list">
          <RequiredProperties>
             <Property name="EdgeMapInfo" function="ArrayList"/>
          </RequiredProperties>
       </ArraySelectionDomain>
       <Documentation>
         Specify which maps defined over edges in the mesh should be loaded.
         An edge map is a renumbering of all the edges (across all the edge blocks of a file) from their offset in the file
         to some arbitrary integers, usually specifying a unique global ID across a set of files.
       </Documentation>
     </StringVectorProperty>

      <StringVectorProperty
        name="FaceMapInfo"
        information_only="1">
        <ArraySelectionInformationHelper attribute_name="FaceMap"/>
     </StringVectorProperty>

     <StringVectorProperty
        name="FaceMapArrayStatus"
        command="SetFaceMapArrayStatus"
        number_of_elements="2"
        repeat_command="1"
        number_of_elements_per_command="2"
        element_types="2 0"
        information_property="FaceMapInfo">
       <ArraySelectionDomain name="array_list">
          <RequiredProperties>
             <Property name="FaceMapInfo" function="ArrayList"/>
          </RequiredProperties>
       </ArraySelectionDomain>
       <Documentation>
         Specify which maps defined over faces in the mesh should be loaded.
         A face map is a renumbering of all the faces (across all the face blocks of a file) from their offset in the file
         to some arbitrary integers, usually specifying a unique global ID across a set of files.
       </Documentation>
     </StringVectorProperty>

      <StringVectorProperty
        name="ElementMapInfo"
        information_only="1">
        <ArraySelectionInformationHelper attribute_name="ElementMap"/>
     </StringVectorProperty>

     <StringVectorProperty
        name="ElementMapArrayStatus"
        command="SetElementMapArrayStatus"
        number_of_elements="2"
        repeat_command="1"
        number_of_elements_per_command="2"
        element_types="2 0"
        information_property="ElementMapInfo">
       <ArraySelectionDomain name="array_list">
          <RequiredProperties>
             <Property name="ElementMapInfo" function="ArrayList"/>
          </RequiredProperties>
       </ArraySelectionDomain>
       <Documentation>
         Specify which maps defined over elements (cells) in the mesh should be loaded.
         An element map is a renumbering of all the elements (across all the element blocks of a file) from their offset in the file
         to some arbitrary integers, usually specifying a unique global ID across a set of files.
         These are sometimes called new-style maps because they are specified differently
         than in older Exodus files, which only allowed a single element map.
       </Documentation>
     </StringVectorProperty>

     <StringVectorProperty
        name="NodeSetInfo"
        information_only="1">
        <ArraySelectionInformationHelper attribute_name="NodeSet"/>
     </StringVectorProperty>

     <StringVectorProperty
        name="NodeSetArrayStatus"
        command="SetNodeSetArrayStatus"
        number_of_elements="2"
        repeat_command="1"
        number_of_elements_per_command="2"
        element_types="2 0"
        information_property="NodeSetInfo">
       <ArraySelectionDomain name="array_list">
          <RequiredProperties>
             <Property name="NodeSetInfo" function="ArrayList"/>
          </RequiredProperties>
       </ArraySelectionDomain>
       <Documentation>
         An Exodus II file may define subsets of all the nodes (points) in a file as sets in their own right.
         Variables, such as boundary conditions, may then be defined over these sets by specifying a single number per node.
         This property specifies which of those sets should be loaded.
         The accompanying NodeSetResultArrayStatus property specifies which variables defined over those sets should be loaded.
       </Documentation>
     </StringVectorProperty>

     <StringVectorProperty
        name="SideSetInfo"
        information_only="1">
        <ArraySelectionInformationHelper attribute_name="SideSet"/>
     </StringVectorProperty>

     <StringVectorProperty
        name="SideSetArrayStatus"
        command="SetSideSetArrayStatus"
        number_of_elements="2"
        repeat_command="1"
        number_of_elements_per_command="2"
        element_types="2 0"
        information_property="SideSetInfo">
       <ArraySelectionDomain name="array_list">
          <RequiredProperties>
             <Property name="SideSetInfo" function="ArrayList"/>
          </RequiredProperties>
       </ArraySelectionDomain>
       <Documentation>
         An Exodus II file may define subsets of all the <i>boundaries</i> of all the elements in a file as sets in their own right.
         This property specifies which of those sets should be loaded.
         Variables, such as boundary conditions, may then be defined over these sets by specifying a single number per side.
         For example, a hexahedron has 18 sides: 6 faces and 12 edges.
         Any of these sides may be individually called out in a set and assigned a result value.
         The accompanying SideSetResultArrayStatus property specifies which variables defined over those sets should be loaded.
       </Documentation>
     </StringVectorProperty>

     <StringVectorProperty
        name="FaceSetInfo"
        information_only="1">
        <ArraySelectionInformationHelper attribute_name="FaceSet"/>
     </StringVectorProperty>

     <StringVectorProperty
        name="FaceSetArrayStatus"
        command="SetFaceSetArrayStatus"
        number_of_elements="2"
        repeat_command="1"
        number_of_elements_per_command="2"
        element_types="2 0"
        information_property="FaceSetInfo">
       <ArraySelectionDomain name="array_list">
          <RequiredProperties>
             <Property name="FaceSetInfo" function="ArrayList"/>
          </RequiredProperties>
       </ArraySelectionDomain>
       <Documentation>
         An Exodus II file may define subsets of all the faces (across all face blocks) in a file as sets in their own right.
         This property specifies which of those sets should be loaded.
         Variables, such as boundary conditions, may then be defined over these sets by specifying a single number per face.
         The accompanying FaceSetResultArrayStatus property specifies which variables defined over those sets should be loaded.
       </Documentation>
     </StringVectorProperty>

     <StringVectorProperty
        name="EdgeSetInfo"
        information_only="1">
        <ArraySelectionInformationHelper attribute_name="EdgeSet"/>
     </StringVectorProperty>

     <StringVectorProperty
        name="EdgeSetArrayStatus"
        command="SetEdgeSetArrayStatus"
        number_of_elements="2"
        repeat_command="1"
        number_of_elements_per_command="2"
        element_types="2 0"
        information_property="EdgeSetInfo">
       <ArraySelectionDomain name="array_list">
          <RequiredProperties>
             <Property name="EdgeSetInfo" function="ArrayList"/>
          </RequiredProperties>
       </ArraySelectionDomain>
       <Documentation>
         An Exodus II file may define subsets of all the edges (across all edge blocks) in a file as sets in their own right.
         This property specifies which of those sets should be loaded.
         Variables, such as boundary conditions, may then be defined over these sets by specifying a single number per edge.
         The accompanying EdgeSetResultArrayStatus property specifies which variables defined over those sets should be loaded.
       </Documentation>
     </StringVectorProperty>

     <StringVectorProperty
        name="ElementSetInfo"
        information_only="1">
        <ArraySelectionInformationHelper attribute_name="ElementSet"/>
     </StringVectorProperty>

     <StringVectorProperty
        name="ElementSetArrayStatus"
        command="SetElementSetArrayStatus"
        number_of_elements="2"
        repeat_command="1"
        number_of_elements_per_command="2"
        element_types="2 0"
        information_property="ElementSetInfo">
       <ArraySelectionDomain name="array_list">
          <RequiredProperties>
             <Property name="ElementSetInfo" function="ArrayList"/>
          </RequiredProperties>
       </ArraySelectionDomain>
       <Documentation>
         An Exodus II file may define subsets of all the elements (across all element blocks) in a file as sets in their own right.
         This property specifies which of those sets should be loaded.
         Variables, such as feature classifiers, may then be defined over these sets by specifying a single number per element.
         The accompanying ElementSetResultArrayStatus property specifies which variables defined over those sets should be loaded.
       </Documentation>
     </StringVectorProperty>

     <StringVectorProperty
        name="ElementSetResultArrayInfo"
        information_only="1">
        <ArraySelectionInformationHelper attribute_name="ElementSetResult"/>
     </StringVectorProperty>

     <StringVectorProperty
        name="ElementSetResultArrayStatus"
        command="SetElementSetResultArrayStatus"
        number_of_elements="2"
        repeat_command="1"
        number_of_elements_per_command="2"
        element_types="2 0"
        information_property="ElementSetResultArrayInfo">
       <ArraySelectionDomain name="array_list">
          <RequiredProperties>
             <Property name="ElementSetResultArrayInfo" function="ArrayList"/>
          </RequiredProperties>
       </ArraySelectionDomain>
       <Documentation>
         An Exodus II file may define subsets of all the elements (across all element blocks) in a file as sets in their own right.
         Variables, such as feature classifiers, may then be defined over these sets by specifying a single number per element.
         This property specifies which of those variables should be loaded.
         The corresponding set must also be loaded using the ElementSetArrayStatus property in order for the variable to appear.
       </Documentation>
     </StringVectorProperty>

     <StringVectorProperty
        name="SideSetResultArrayInfo"
        information_only="1">
        <ArraySelectionInformationHelper attribute_name="SideSetResult"/>
     </StringVectorProperty>

     <StringVectorProperty
        name="SideSetResultArrayStatus"
        command="SetSideSetResultArrayStatus"
        number_of_elements="2"
        repeat_command="1"
        number_of_elements_per_command="2"
        element_types="2 0"
        information_property="SideSetResultArrayInfo">
       <ArraySelectionDomain name="array_list">
          <RequiredProperties>
             <Property name="SideSetResultArrayInfo" function="ArrayList"/>
          </RequiredProperties>
       </ArraySelectionDomain>
       <Documentation>
         An Exodus II file may define subsets of all the <i>boundaries</i> of all the elements in a file as sets in their own right.
         Variables, such as boundary conditions, may then be defined over these sets by specifying a single number per side.
         For example, a hexahedron has 18 sides: 6 faces and 12 edges.
         Any of these sides may be individually called out in a set and assigned a result value.
         This property specifies which of those variables should be loaded.
         The corresponding set must also be loaded using the SideSetArrayStatus property in order for the variable to appear.
       </Documentation>
     </StringVectorProperty>

     <StringVectorProperty
        name="FaceSetResultArrayInfo"
        information_only="1">
        <ArraySelectionInformationHelper attribute_name="FaceSetResult"/>
     </StringVectorProperty>

     <StringVectorProperty
        name="FaceSetResultArrayStatus"
        command="SetFaceSetResultArrayStatus"
        number_of_elements="2"
        repeat_command="1"
        number_of_elements_per_command="2"
        element_types="2 0"
        information_property="FaceSetResultArrayInfo">
       <ArraySelectionDomain name="array_list">
          <RequiredProperties>
             <Property name="FaceSetResultArrayInfo" function="ArrayList"/>
          </RequiredProperties>
       </ArraySelectionDomain>
       <Documentation>
         An Exodus II file may define subsets of all the faces (across all face blocks) in a file as sets in their own right.
         Variables, such as boundary conditions, may then be defined over these sets by specifying a single number per face.
         This property specifies which of those variables should be loaded.
         The corresponding set must also be loaded using the FaceSetArrayStatus property in order for the variable to appear.
       </Documentation>
     </StringVectorProperty>

     <StringVectorProperty
        name="EdgeSetResultArrayInfo"
        information_only="1">
        <ArraySelectionInformationHelper attribute_name="EdgeSetResult"/>
     </StringVectorProperty>

     <StringVectorProperty
        name="EdgeSetResultArrayStatus"
        command="SetEdgeSetResultArrayStatus"
        number_of_elements="2"
        repeat_command="1"
        number_of_elements_per_command="2"
        element_types="2 0"
        information_property="EdgeSetResultArrayInfo">
       <ArraySelectionDomain name="array_list">
          <RequiredProperties>
             <Property name="EdgeSetResultArrayInfo" function="ArrayList"/>
          </RequiredProperties>
       </ArraySelectionDomain>
       <Documentation>
         An Exodus II file may define subsets of all the edges (across all edge blocks) in a file as sets in their own right.
         Variables, such as boundary conditions, may then be defined over these sets by specifying a single number per edge.
         This property specifies which of those variables should be loaded.
         The corresponding set must also be loaded using the EdgeSetArrayStatus property in order for the variable to appear.
       </Documentation>
     </StringVectorProperty>

     <StringVectorProperty
        name="NodeSetResultArrayInfo"
        information_only="1">
        <ArraySelectionInformationHelper attribute_name="NodeSetResult"/>
     </StringVectorProperty>

     <StringVectorProperty
        name="NodeSetResultArrayStatus"
        command="SetNodeSetResultArrayStatus"
        number_of_elements="2"
        repeat_command="1"
        number_of_elements_per_command="2"
        element_types="2 0"
        information_property="NodeSetResultArrayInfo">
       <ArraySelectionDomain name="array_list">
          <RequiredProperties>
             <Property name="NodeSetResultArrayInfo" function="ArrayList"/>
          </RequiredProperties>
       </ArraySelectionDomain>
       <Documentation>
         An Exodus II file may define subsets of all the nodes (points) in a file as sets in their own right.
         Variables, such as boundary conditions, may then be defined over these sets by specifying a single number per node.
         This property specifies which of those variables should be loaded.
         The corresponding set must also be loaded using the NodeSetArrayStatus property in order for the variable to appear.
       </Documentation>
     </StringVectorProperty>

     <IntVectorProperty
        name="ApplyDisplacements"
        command="SetApplyDisplacements"
        number_of_elements="1"
        default_values="1" >
       <BooleanDomain name="bool"/>
       <Documentation>
         Geometric locations can include displacements. When this option is on, the nodal positions are 'displaced' by the standard exodus displacement vector. If displacements are turned 'off', the user can explicitly add them by applying a warp filter.
       </Documentation>
     </IntVectorProperty>

     <DoubleVectorProperty
        name="DisplacementMagnitude"
        command="SetDisplacementMagnitude"
        number_of_elements="1"
        default_values="1" >
       <DoubleRangeDomain name="range"/>
       <Documentation>
         When displacements are being applied, they are scaled by this amount. Set to 1 for no scaling.
       </Documentation>
     </DoubleVectorProperty>

     <IntVectorProperty
        name="GenerateObjectIdCellArray"
        command="SetGenerateObjectIdCellArray"
        number_of_elements="1"
        default_values="1" >
       <BooleanDomain name="bool"/>
       <Documentation>
         Specifies whether a variable named "ObjectId" should be created for each entry of each block and set being loaded
         and assigned the identifying number of the block or set, so that given a cell one can readily identify the block
         or set it came from.
         This is useful for coloring a mesh by block ID or set ID.
       </Documentation>
     </IntVectorProperty>

     <IntVectorProperty
        name="GenerateGlobalNodeIdArray"
        command="SetGenerateGlobalNodeIdArray"
        number_of_elements="1"
        default_values="1" >
       <BooleanDomain name="bool"/>
       <Documentation>
         Should the reader retrieve the first new-style node map, or if that is not present,
         the solitary old-style node map (which always exists but may be procedurally generated
         if it is not stored with the file)?
       </Documentation>
     </IntVectorProperty>

     <IntVectorProperty
        name="GenerateGlobalElementIdArray"
        command="SetGenerateGlobalElementIdArray"
        number_of_elements="1"
        default_values="1" >
       <BooleanDomain name="bool"/>
       <Documentation>
         Should the reader retrieve the first new-style element map, or if that is not present,
         the solitary old-style element map (which always exists but may be procedurally generated
         if it is not stored with the file)?
       </Documentation>
     </IntVectorProperty>

     <IntVectorProperty
        name="GenerateImplicitNodeIdArray"
        command="SetGenerateImplicitNodeIdArray"
        number_of_elements="1"
        default_values="0" >
       <BooleanDomain name="bool"/>
       <Documentation>
         Should the reader retrieve the solitary old-style node map (which always exists but may be procedurally generated
         if it is not stored with the file)?
       </Documentation>
     </IntVectorProperty>

     <IntVectorProperty
        name="GenerateImplicitElementIdArray"
        command="SetGenerateImplicitElementIdArray"
        number_of_elements="1"
        default_values="0" >
       <BooleanDomain name="bool"/>
       <Documentation>
         Should the reader retrieve the solitary old-style element map (which always exists but may be procedurally generated
         if it is not stored with the file)?
       </Documentation>
     </IntVectorProperty>

     <IntVectorProperty
        name="GenerateFileIdArray"
        command="SetGenerateFileIdArray"
        number_of_elements="1"
        default_values="0" >
       <BooleanDomain name="bool"/>
       <Documentation>
         Should each cell in the mesh be assigned an integer identifying the file it came from?
         If turned on, a cell variable named "FileId" should be present.
       </Documentation>
     </IntVectorProperty>

     <IntVectorProperty
        name="ExodusModelMetadata"
        command="SetExodusModelMetadata"
        number_of_elements="1"
        default_values="0" >
       <BooleanDomain name="bool"/>
       <Documentation>
         Should metadata for the mesh be stored in the field data of the reader's output?
       </Documentation>
     </IntVectorProperty>

     <Hints>
       <Property name="Refresh" show="0"/>
     </Hints>

   <!-- End ExodusIIReaderCore -->
   </SourceProxy>

   <SourceProxy name="TecplotReaderCore"
                class="vtkTecplotReader"
                label="VTK Tecplot Reader">
       <Documentation>
          Core for TecplotReader
       </Documentation>

     <StringVectorProperty
        name="FileName"
        command="SetFileName"
        number_of_elements="1">
        <FileListDomain name="files"/>
        <Documentation>
          The name of the file to load
        </Documentation>
     </StringVectorProperty>

     <StringVectorProperty
        name="DataArrayInfo"
        information_only="1">
        <ArraySelectionInformationHelper attribute_name="Data"/>
     </StringVectorProperty>

     <StringVectorProperty
        name="DataArrayStatus"
        command="SetDataArrayStatus"
        number_of_elements="0"
        repeat_command="1"
        number_of_elements_per_command="2"
        element_types="2 0"
        information_property="DataArrayInfo"
        label="Data Arrays">

       <ArraySelectionDomain name="array_list">
          <RequiredProperties>
             <Property name="DataArrayInfo" function="ArrayList"/>
          </RequiredProperties>
       </ArraySelectionDomain>

       <Documentation>
         This property lists what dataset attribute arrays (point data and cell data) to read.
       </Documentation>
     </StringVectorProperty>
     <!-- End TecplotReaderCore-->
   </SourceProxy>

   <SourceProxy name="NetCDFPOPReaderCore"
              class="vtkNetCDFPOPReader"
              label="NetCDF POP reader">
     <Documentation>
       Core for NetCDF POP reader.
     </Documentation>

     <StringVectorProperty
        name="FileName"
        animateable="0"
        command="SetFileName"
        number_of_elements="1">
        <FileListDomain name="files"/>
        <Documentation>
          This property specifies the file name to read.
        </Documentation>
     </StringVectorProperty>

     <StringVectorProperty name="VariableArrayInfo"
                           information_only="1">
       <ArraySelectionInformationHelper attribute_name="Variable"/>
     </StringVectorProperty>
     <StringVectorProperty name="VariableArrayStatus"
                           command="SetVariableArrayStatus"
                           number_of_elements="0"
                           repeat_command="1"
                           number_of_elements_per_command="2"
                           element_types="2 0"
                           information_property="VariableArrayInfo"
                           label="Variables">
       <ArraySelectionDomain name="array_list">
         <RequiredProperties>
           <Property name="VariableArrayInfo" function="ArrayList" />
         </RequiredProperties>
       </ArraySelectionDomain>
       <Documentation>
         This property lists which netCDF variables to load.
       </Documentation>
     </StringVectorProperty>

     <IntVectorProperty
        name="Stride"
        command="SetStride"
        number_of_elements="3"
        default_values="1 1 1"
        animateable="0">
       <IntRangeDomain name="range" min="1 1 1" />
       <Documentation>
         This property indicate the number of indices per dimension (i,j,k) to skip between each point included
         in this output.
       </Documentation>
     </IntVectorProperty>

     <Hints>
       <ReaderFactory extensions="pop.ncdf pop.nc"
                      file_description="POP Ocean NetCDF (Rectilinear)" />
     </Hints>

   </SourceProxy>
   <!-- End NetCDFPOPReaderCore -->

   <SourceProxy name="PNetCDFPOPReaderCore"
                class="vtkPNetCDFPOPReader"
                label="Parallel NetCDF POP reader">
     <Documentation>
       Core for Parallel NetCDF POP reader.
     </Documentation>

     <StringVectorProperty
        name="FileName"
        animateable="0"
        command="SetFileName"
        number_of_elements="1">
       <FileListDomain name="files"/>
       <Documentation>
         This property specifies the file name to read.
       </Documentation>
     </StringVectorProperty>

     <StringVectorProperty name="VariableArrayInfo"
                           information_only="1">
       <ArraySelectionInformationHelper attribute_name="Variable"/>
     </StringVectorProperty>
     <StringVectorProperty name="VariableArrayStatus"
                           command="SetVariableArrayStatus"
                           number_of_elements="0"
                           repeat_command="1"
                           number_of_elements_per_command="2"
                           element_types="2 0"
                           information_property="VariableArrayInfo"
                           label="Variables">
       <ArraySelectionDomain name="array_list">
         <RequiredProperties>
           <Property name="VariableArrayInfo" function="ArrayList" />
         </RequiredProperties>
       </ArraySelectionDomain>
       <Documentation>
         This property lists which netCDF variables to load.
       </Documentation>
     </StringVectorProperty>

     <IntVectorProperty
        name="Stride"
        command="SetStride"
        number_of_elements="3"
        default_values="1 1 1"
        animateable="0">
       <IntRangeDomain name="range" min="1 1 1" />
       <Documentation>
         This property indicates the number of indices per dimension (i,j,k) to skip between each point included
         in this output.
       </Documentation>
     </IntVectorProperty>

     <IntVectorProperty
        name="NumberOfReaderProcesses"
        command="SetNumberOfReaderProcesses"
        number_of_elements="1"
        default_values="0"
        animateable="0">
       <IntRangeDomain name="range" min="0" />
       <Documentation>
         This property indicates the amount of processes that will actually read
         the file and then send out the information to other processes.
         An default value of 0 is used so that a proper value is set on the server.
         The actual value will range between 1 and the number of server processes.
       </Documentation>
     </IntVectorProperty>

     <Hints>
       <ReaderFactory extensions="pop.ncdf pop.nc"
                      file_description="Parallel POP Ocean NetCDF (Rectilinear)" />
     </Hints>

   </SourceProxy>
   <!-- End PNetCDFPOPReaderCore -->

   <SourceProxy name="CosmoReaderCore"
                class="vtkPCosmoReader"
                label="COSMO Reader">

     <StringVectorProperty
        name="FileName"
        command="SetFileName"
        animateable="0"
        number_of_elements="1">
        <FileListDomain name="files"/>
        <Documentation>
          This property specifies the file name for the COSMO reader.
        </Documentation>
     </StringVectorProperty>

     <IntVectorProperty
        name="CosmoFormat"
        command="SetCosmoFormat"
        label="Cosmo Format"
        number_of_elements="1"
        default_values="1" >
     <BooleanDomain name="bool" />
       <Documentation>
       If checked, the data will be read as the LANL Cosmo format. If unchecked, the data will be read as Gadget-2 format.
       </Documentation>
     </IntVectorProperty>

     <DoubleVectorProperty
        name="RL"
        command="SetRL"
        label="rL (physical box side length)"
        number_of_elements="1"
        default_values="100" >
     <DoubleRangeDomain name="range" min="0" />
       <Documentation>
       The box side length is used to wrap particles around if they exceed rL (or less than 0) in any dimension.
       </Documentation>
     </DoubleVectorProperty>

     <DoubleVectorProperty
        name="Overlap"
        command="SetOverlap"
        label="overlap (shared point/ghost cell gap distance)"
        number_of_elements="1"
        default_values="5" >
     <DoubleRangeDomain name="range" min="0" />
       <Documentation>
       The space (in rL units) to extend processor particle ownership for ghost particles/cells. It is needed for correct halo calculation when halos cross processor boundaries in parallel computation.
       </Documentation>
     </DoubleVectorProperty>

   </SourceProxy>

   <SourceProxy name="PNGReader"
                class="vtkPNGReader"
                label="PNG Reader">
     <Documentation
       short_help="Read a PNG file."
       long_help="Reads a PNG file into an image data.">
       The PNG reader reads PNG (Portable Network Graphics) files, and the output is a uniform rectilinear (image/volume) dataset. The default file extension is .png.
     </Documentation>
     <StringVectorProperty
        name="FileName"
        animateable="0"
        command="SetFileName"
        number_of_elements="1">
        <FileListDomain name="files"/>
        <Documentation>
          This property specifies the file name for the PNG reader.
        </Documentation>
      </StringVectorProperty>

      <Hints>
        <ReaderFactory extensions="png"
          file_description="PNG Image Files" />
      </Hints>
     <!-- End PNGReader -->
   </SourceProxy>

   <SourceProxy name="JPEGReader"
                class="vtkJPEGReader"
                label="JPEG Reader">
     <Documentation
       short_help="Read a JPEG file."
       long_help="Reads a JPEG file into an image data.">
       The JPEG reader reads JPEG files, and the output is a uniform rectilinear (image/volume) dataset. The default file extension is .jpg or .jpeg.
     </Documentation>
     <StringVectorProperty
        name="FileName"
        animateable="0"
        command="SetFileName"
        number_of_elements="1">
        <FileListDomain name="files"/>
        <Documentation>
          This property specifies the file name for the PNG reader.
        </Documentation>
      </StringVectorProperty>

      <Hints>
        <ReaderFactory extensions="jpg jpeg"
          file_description="JPEG Image Files" />
      </Hints>
     <!-- End JPEGReader -->
   </SourceProxy>


  <SourceProxy name="TIFFReader"
                class="vtkTIFFReader"
                label="TIFF Reader">
     <Documentation
       short_help="Read a TIFF file."
       long_help="Reads a TIFF file into an image data.">
       The TIFF reader reads TIFF (Tagged Image File Format) files, and the output is a uniform rectilinear (image/volume) dataset. The default file extension is .tiff.
     </Documentation>
     <StringVectorProperty
        name="FileName"
        animateable="0"
        command="SetFileName"
        number_of_elements="1">
        <FileListDomain name="files"/>
        <Documentation>
          This property specifies the file name for the TIFF reader.
        </Documentation>
     </StringVectorProperty>

     <Hints>
      <ReaderFactory extensions="tif tiff"
          file_description="TIFF Image Files"/>
     </Hints>
   <!-- End TIFFReader -->
   </SourceProxy>

    <SourceProxy name="netCDFReaderCore"
                 class="vtkNetCDFCFReader">

      <StringVectorProperty name="FileName"
                            command="SetFileName"
                            animateable="0"
                            number_of_elements="1">
        <FileListDomain name="files" />
        <Documentation>
          The name of the file to load.
        </Documentation>
      </StringVectorProperty>

      <StringVectorProperty name="DimensionInfo"
                            command="GetAllDimensions"
                            information_only="1">
        <StringArrayHelper />
      </StringVectorProperty>

      <StringVectorProperty name="Dimensions"
                            command="SetDimensions"
                            number_of_elements="1"
                            animatelable="0">
        <StringListDomain name="array_list">
          <RequiredProperties>
            <Property name="DimensionInfo" function="ArrayList" />
          </RequiredProperties>
        </StringListDomain>
        <Documentation>
          Load the grid with the given dimensions. Any arrays that conform
          to these dimensions will be loaded.
        </Documentation>
      </StringVectorProperty>

      <StringVectorProperty name="VariableDimensionInfo"
                            command="GetVariableDimensions"
                            information_only="1">
        <StringArrayHelper />
      </StringVectorProperty>

      <StringVectorProperty name="VariableArrayInfo"
                            command="GetAllVariableArrayNames"
                            information_only="1">
        <StringArrayHelper />
      </StringVectorProperty>

      <IntVectorProperty name="SphericalCoordinates"
                         command="SetSphericalCoordinates"
                         animateable="0"
                         number_of_elements="1"
                         default_values="1">
        <BooleanDomain name="bool" />
        <Documentation>
          If on, then data with latitude/longitude dimensions will be
          read in as curvilinear data shaped like spherical coordinates.
          If false, then the data will always be read in Cartesian
          coordinates.
        </Documentation>
      </IntVectorProperty>

      <DoubleVectorProperty name="VerticalScale"
                            command="SetVerticalScale"
                            number_of_elements="1"
                            default_values="1">
        <Documentation>
          The scale of the vertical component of spherical coordinates. It
          is common to write the vertical component with respect to
          something other than the center of the sphere (for example, the
          surface). In this case, it might be necessary to scale and/or
          bias the vertical height. The height will become height*scale +
          bias. Keep in mind that if the positive attribute of the
          vertical dimension is down, then the height is negated. The
          scaling will be adjusted if it results in invalid (negative)
          vertical values.
        </Documentation>
      </DoubleVectorProperty>

      <DoubleVectorProperty name="VerticalBias"
                            command="SetVerticalBias"
                            number_of_elements="1"
                            default_values="0">
        <Documentation>
          The bias of the vertical component of spherical coordinates. It
          is common to write the vertical component with respect to
          something other than the center of the sphere (for example, the
          surface). In this case, it might be necessary to scale and/or
          bias the vertical height. The height will become height*scale +
          bias. Keep in mind that if the positive attribute of the
          vertical dimension is down, then the height is negated. The
          scaling will be adjusted if it results in invalid (negative)
          vertical values.
        </Documentation>
      </DoubleVectorProperty>

      <IntVectorProperty name="ReplaceFillValueWithNan"
                         command="SetReplaceFillValueWithNan"
                         number_of_elements="1"
                         default_values="0">
        <BooleanDomain name="bool" />
        <Documentation>
          If on, any float or double variable read that has a _FillValue
          attribute will have that fill value replaced with a not-a-number
          (NaN) value. The advantage of setting these to NaN values is
          that, if implemented properly by the system and careful math
          operations are used, they can implicitly be ignored by
          calculations like finding the range of the values. That said,
          this option should be used with caution as VTK does not fully
          support NaN values and therefore odd calculations may occur.
        </Documentation>
      </IntVectorProperty>

      <IntVectorProperty name="OutputType"
                         command="SetOutputType"
                         number_of_elements="1"
                         animateable="0"
                         default_values="-1">
        <EnumerationDomain name="enum">
          <Entry value="-1" text="Automatic" />
          <Entry value="6" text="Image" />
          <Entry value="3" text="Rectilinear" />
          <Entry value="2" text="Structured" />
          <Entry value="4" text="Unstructured" />
        </EnumerationDomain>
        <Documentation>
          Specifies the type of data that the reader creates. If
          Automatic, the reader will use the most appropriate grid type for
          the data read. Note that not all grid types support all data. A
          warning is issued if a mismatch occurs.
        </Documentation>
      </IntVectorProperty>

      <DoubleVectorProperty name="TimestepValues"
                            repeatable="1"
                            information_only="1">
        <TimeStepsInformationHelper />
        <Documentation>
          This magic property sends time information to the animation
          panel. ParaView will then automatically set up the animation to
          visit the time steps defined in the file.
        </Documentation>
      </DoubleVectorProperty>

    </SourceProxy> <!-- netCDFReaderCore -->

   <SourceProxy name="P3DReaderCore" class="vtkMultiBlockPLOT3DReader">
     <Documentation
       short_help="Read PLOT3D files."
       long_help="Reads ASCII or binary PLOT3D files.">
       PLOT3D is a plotting package developed at NASA. The PLOT3D reader can read both ASCII and binary PLOT3D files. The default file extension for the geometry files is .xyz, and the default file extension for the solution files is .q. The output of this reader is a multi-block dataset containing curvilinear (structured grid) datasets.
     </Documentation>
     <StringVectorProperty
        name="FileName"
        animateable="0"
        command="SetFileName"
        number_of_elements="1">
        <FileListDomain name="files"/>
        <Documentation>
          This property specifies the .xyz (geometry) file name for the PLOT3D reader.
        </Documentation>
     </StringVectorProperty>

     <StringVectorProperty
        name="QFileName"
        command="SetQFileName"
        animateable="0"
        number_of_elements="1">
       <FileListDomain name="files"/>
       <Documentation>
         This property specifies the .q (solution) file name for the PLOT3D reader.
       </Documentation>
     </StringVectorProperty>

     <IntVectorProperty
        name="BinaryFile"
        command="SetBinaryFile"
        number_of_elements="1"
        default_values="1" >
       <BooleanDomain name="bool"/>
       <Documentation>
         This property indicates whether the data files are binary.
       </Documentation>
     </IntVectorProperty>

     <IntVectorProperty
        name="MultiGrid"
        command="SetMultiGrid"
        number_of_elements="1"
        default_values="0" >
       <BooleanDomain name="bool"/>
       <Documentation>
         This property indicates whether these files have multiple-block information.
       </Documentation>
     </IntVectorProperty>

     <IntVectorProperty
        name="HasByteCount"
        command="SetHasByteCount"
        number_of_elements="1"
        default_values="0" >
       <BooleanDomain name="bool"/>
       <Documentation>
         This property indicates whether this file uses Fortran leading-trailing byte counts.
       </Documentation>
     </IntVectorProperty>

     <IntVectorProperty
        name="IBlanking"
        command="SetIBlanking"
        number_of_elements="1"
        default_values="0" >
       <BooleanDomain name="bool"/>
       <Documentation>
         This property indicates whether this dataset has visibility information.
       </Documentation>
     </IntVectorProperty>

     <IntVectorProperty
        name="TwoDimensionalGeometry"
        command="SetTwoDimensionalGeometry"
        number_of_elements="1"
        default_values="0" >
       <BooleanDomain name="bool"/>
       <Documentation>
         This property indicates whether the data is two- or three-dimensional.
       </Documentation>
     </IntVectorProperty>

     <IntVectorProperty
        name="ForceRead"
        command="SetForceRead"
        number_of_elements="1"
        default_values="0" >
       <BooleanDomain name="bool"/>
       <Documentation>
         This property indicates whether to attempt to read the file even if it appears corrupt
       </Documentation>
     </IntVectorProperty>

     <IntVectorProperty
        name="ByteOrder"
        command="SetByteOrder"
        number_of_elements="1"
        default_values="0" >
       <EnumerationDomain name="enum">
         <Entry value="0" text="BigEndian"/>
         <Entry value="1" text="LittleEndian"/>
       </EnumerationDomain>
       <Documentation>
         This property specifies the byte order of any binary file(s).
       </Documentation>
     </IntVectorProperty>

     <IntVectorProperty
        name="Functions"
        command="AddFunction"
        clean_command="RemoveAllFunctions"
        repeat_command="1"
        number_of_elements_per_command="1">
       <EnumerationDomain name="array_list">
         <!-- <Entry value="100" text="Scalar - Density"/> -->
         <Entry value="110" text="Scalar - Pressure"/>
         <Entry value="120" text="Scalar - Temperature"/>
         <Entry value="130" text="Scalar - Enthalpy"/>
         <Entry value="140" text="Scalar - Internal energy"/>
         <Entry value="144" text="Scalar - Kinetic energy"/>
         <Entry value="153" text="Scalar - Velocity magnitude"/>
         <!-- <Entry value="163" text="Scalar - Stagnation energy"/> -->
         <Entry value="170" text="Scalar - Entropy"/>
         <Entry value="184" text="Scalar - Swirl."/>
         <Entry value="200" text="Vector - Velocity"/>
         <Entry value="201" text="Vector - Vorticity"/>
         <!-- <Entry value="202" text="Vector - Momentum"/> -->
         <Entry value="210" text="Vector - Pressure gradient"/>
       </EnumerationDomain>
       <Documentation>
         This property lists which functions (point-centered arrays) to compute.
       </Documentation>
     </IntVectorProperty>
   <!-- End P3DReaderCore -->
   </SourceProxy>

    <!-- End of "internal_sources" -->
  </ProxyGroup>

  <ProxyGroup name="sources">

   <SourceProxy name="DEMReader"
                class="vtkDEMReader"
                label="DEM Reader">
     <Documentation
       short_help="Read a dataset in DEM format"
       long_help="Reads a DEM (Digital Elevation Model) file.">
       The DEM reader reads Digital Elevation Model files containing elevation values derived from the U. S. Geologic Survey. The default file extension is .dem. This reader produces uniform rectilinear (image/volume) data output.
     </Documentation>
     <StringVectorProperty
        name="FileName"
        command="SetFileName"
        animateable="0"
        number_of_elements="1">
        <FileListDomain name="files"/>
        <Documentation>
          This property specifies the file name for the DEM (Digital Elevation Map) reader.
        </Documentation>
     </StringVectorProperty>

     <Hints>
      <ReaderFactory extensions="dem"
          file_description="Digital Elevation Map Files" />
     </Hints>

   <!-- End DEMReader -->
   </SourceProxy>

   <SourceProxy name="PVDReader"
                class="vtkPVDReader"
                label="PVD Reader">
     <Documentation
       short_help="Read a PVD file."
       long_help="Load a dataset stored in ParaView's PVD file format.">
       The PVD reader reads data stored in ParaView's PVD file format. The .pvd file is essentially a header file that collects together other data files stored in VTK's XML-based file format.
     </Documentation>
     <StringVectorProperty
        name="FileName"
        command="SetFileName"
        animateable="0"
        number_of_elements="1">
        <FileListDomain name="files"/>
        <Documentation>
          This property specifies the file name for the PVD reader.
        </Documentation>
     </StringVectorProperty>
     <DoubleVectorProperty
        name="TimestepValues"
        repeatable="1"
        information_only="1">
        <TimeStepsInformationHelper/>
        <Documentation>
          Available timestep values.
        </Documentation>
     </DoubleVectorProperty>

     <Hints>
        <ReaderFactory extensions="pvd"
          file_description="ParaView Data Files"/>
     </Hints>
   <!-- End PVDReader -->
   </SourceProxy>

   <SourceProxy name="MetaImageReader"
                          class="vtkFileSeriesReader"
                          label="Meta File Series Reader"
                          si_class="vtkSIFileSeriesReaderProxy"
                          file_name_method="SetFileName">
     <Documentation
       short_help="Read a series of meta images."
       long_help="Reads a series of meta images.">
       Read a series of meta images. The file extension is .mhd
     </Documentation>

     <SubProxy>
       <Proxy name="Reader"
              proxygroup="internal_sources"
              proxyname="MetaImageReaderCore">
       </Proxy>
     </SubProxy>

      <StringVectorProperty name="FileNameInfo"
        command="GetCurrentFileName"
        information_only="1" >
        <SimpleStringInformationHelper />
     </StringVectorProperty>

     <StringVectorProperty name="FileNames"
                           clean_command="RemoveAllFileNames"
                           command="AddFileName"
                           animateable="0"
                           number_of_elements="1"
                           repeat_command="1">
       <FileListDomain name="files"/>
       <Documentation>
         The list of files to be read by the reader. Each file is expected to be
         in the meta format. The standard extension is .mhd. If more than one file is specified,
         the reader will switch to file series mode in which it will pretend that it can support
         time and provide one file per time step.
       </Documentation>
     </StringVectorProperty>

     <DoubleVectorProperty name="TimestepValues"
                           repeatable="1"
                           information_only="1">
       <TimeStepsInformationHelper/>
       <Documentation>
         Available timestep values.
       </Documentation>
     </DoubleVectorProperty>

     <Hints>
      <ReaderFactory extensions="mhd mha"
          file_description="Meta Image Files" />
     </Hints>

   <!-- end of MetaFileSeriesReader -->
   </SourceProxy>

   <SourceProxy name="XMLMultiBlockDataReader"
                          class="vtkFileSeriesReader"
                          label="XML MultiBlock Data Reader"
                          si_class="vtkSIFileSeriesReaderProxy"
                          file_name_method="SetFileName">
     <Documentation
       short_help="Read VTK XML multi-block datasets."
       long_help="Reads a VTK XML multi-block data file and the serial VTK XML data files to which it points.">
       The XML Multi-Block Data reader reads the VTK XML multi-block data file
       format. XML multi-block data files are meta-files that point to a list of
       serial VTK XML files. When reading in parallel, this reader will
       distribute sub-blocks among processors. The expected file extensions are
       .vtm and .vtmb.
     </Documentation>

     <SubProxy>
       <Proxy name="Reader"
              proxygroup="internal_sources"
              proxyname="XMLMultiBlockDataReaderCore">
       </Proxy>
     </SubProxy>

     <StringVectorProperty name="FileNameInfo"
        command="GetCurrentFileName"
        information_only="1" >
        <SimpleStringInformationHelper />
     </StringVectorProperty>

     <StringVectorProperty name="FileName"
                           clean_command="RemoveAllFileNames"
                           command="AddFileName"
                           animateable="0"
                           number_of_elements="1"
                           information_property="FileNameInfo"
                           repeat_command="1">
       <FileListDomain name="files"/>
       <Documentation>
         The list of files to be read by the reader. Each file is expected to be
         in the VTK XML polygonal dataset format. The standard extension is
         .vtp. If more than one file is specified, the reader will switch to file
         series mode in which it will pretend that it can support time and
         provide one file per time step.
       </Documentation>
     </StringVectorProperty>

     <DoubleVectorProperty name="TimestepValues"
                           repeatable="1"
                           information_only="1">
       <TimeStepsInformationHelper/>
       <Documentation>
         Available timestep values.
       </Documentation>
     </DoubleVectorProperty>

     <Hints>
      <ReaderFactory extensions="vtm vtmb"
          file_description="VTK MultiBlock Data Files" />
     </Hints>

   <!-- end of XMLMultiBlockDataReader -->
   </SourceProxy>

   <SourceProxy name="XMLHierarchicalBoxDataReader"
                          class="vtkFileSeriesReader"
                          label="XML Hierarchical Box Data reader"
                          si_class="vtkSIFileSeriesReaderProxy"
                          file_name_method="SetFileName">
     <Documentation
       short_help="Read a VTK data file containing a hierarchical box dataset."
       long_help="Reads a VTK XML-based data file containing a hierarchical dataset containing vtkUniformGrids.">
       The XML Hierarchical Box Data reader reads VTK's XML-based file format
       containing a vtkHierarchicalBoxDataSet. The expected file extensions is
       either .vthb or .vth.
     </Documentation>

     <SubProxy>
       <Proxy name="Reader"
              proxygroup="internal_sources"
              proxyname="XMLHierarchicalBoxDataReaderCore">
       </Proxy>
     </SubProxy>

     <StringVectorProperty name="FileNameInfo"
        command="GetCurrentFileName"
        information_only="1" >
        <SimpleStringInformationHelper />
     </StringVectorProperty>

     <StringVectorProperty name="FileName"
                           clean_command="RemoveAllFileNames"
                           command="AddFileName"
                           animateable="0"
                           number_of_elements="1"
                           information_property="FileNameInfo"
                           repeat_command="1">
       <FileListDomain name="files"/>
       <Documentation>
         The list of files to be read by the reader. Each file is expected to be
         in the VTK XML polygonal dataset format. The standard extension is
         .vtp. If more than one file is specified, the reader will switch to file
         series mode in which it will pretend that it can support time and
         provide one file per time step.
       </Documentation>
     </StringVectorProperty>

     <DoubleVectorProperty name="TimestepValues"
                           repeatable="1"
                           information_only="1">
       <TimeStepsInformationHelper/>
       <Documentation>
         Available timestep values.
       </Documentation>
     </DoubleVectorProperty>

     <Hints>
      <ReaderFactory extensions="vthb vth"
          file_description="VTK Hierarchical Box Data Files" />
     </Hints>

   <!-- end of XMLHierarchicalBoxDataReader -->
   </SourceProxy>

   <SourceProxy name="XMLPolyDataReader"
                          class="vtkFileSeriesReader"
                          label="XML PolyData Reader"
                          si_class="vtkSIFileSeriesReaderProxy"
                          file_name_method="SetFileName">
     <Documentation short_help="Read VTK XML polydata files."
                    long_help="Reads serial VTK XML polydata files.">
       The XML Polydata reader reads the VTK XML polydata file format. The standard extension is .vtp. This reader also supports file series.
     </Documentation>

     <SubProxy>
       <Proxy name="Reader"
              proxygroup="internal_sources" proxyname="XMLPolyDataReaderCore">
       </Proxy>
       <ExposedProperties>
         <Property name="CellArrayInfo" />
         <Property name="CellArrayStatus" />
         <Property name="PointArrayInfo" />
         <Property name="PointArrayStatus" />
       </ExposedProperties>
     </SubProxy>

     <StringVectorProperty name="FileNameInfo"
        command="GetCurrentFileName"
        information_only="1" >
        <SimpleStringInformationHelper />
     </StringVectorProperty>

     <StringVectorProperty name="FileName"
                           clean_command="RemoveAllFileNames"
                           command="AddFileName"
                           animateable="0"
                           number_of_elements="1"
                           information_property="FileNameInfo"
                           repeat_command="1">
       <FileListDomain name="files"/>
       <Documentation>
         The list of files to be read by the reader. Each file is expected to be in the VTK XML polygonal dataset format. The standard extension is .vtp. If more than one file is specified, the reader will switch to file series mode in which it will pretend that it can support time and provide one file per time step.
       </Documentation>
     </StringVectorProperty>

     <DoubleVectorProperty name="TimestepValues"
                           repeatable="1"
                           information_only="1">
       <TimeStepsInformationHelper/>
       <Documentation>
         Available timestep values.
       </Documentation>
     </DoubleVectorProperty>

     <Hints>
      <ReaderFactory extensions="vtp"
          file_description="VTK PolyData Files" />
     </Hints>
   </SourceProxy> <!-- XMLPolyDataReader -->

   <SourceProxy name="XMLUnstructuredGridReader"
                          class="vtkFileSeriesReader"
                          label="XML Unstructured Grid Reader"
                          si_class="vtkSIFileSeriesReaderProxy"
                          file_name_method="SetFileName">
     <Documentation short_help="Read VTK XML unstructured grid data files."
                    long_help="Reads serial VTK XML unstructured grid data files.">
       The XML Unstructured Grid reader reads the VTK XML unstructured grid data file format. The standard extension is .vtu. This reader also supports file series.
     </Documentation>

     <SubProxy>
       <Proxy name="Reader"
              proxygroup="internal_sources"
              proxyname="XMLUnstructuredGridReaderCore">
       </Proxy>
       <ExposedProperties>
         <Property name="CellArrayInfo" />
         <Property name="CellArrayStatus" />
         <Property name="PointArrayInfo" />
         <Property name="PointArrayStatus" />
       </ExposedProperties>
     </SubProxy>

     <StringVectorProperty name="FileNameInfo"
        command="GetCurrentFileName"
        information_only="1" >
        <SimpleStringInformationHelper />
     </StringVectorProperty>

     <StringVectorProperty name="FileName"
                           clean_command="RemoveAllFileNames"
                           command="AddFileName"
                           animateable="0"
                           number_of_elements="1"
                           information_property="FileNameInfo"
                           repeat_command="1">
       <FileListDomain name="files"/>
       <Documentation>
         The list of files to be read by the reader. Each file is expected to be in the VTK XML unstructured grid data format. The standard extension is .vtu. If more than one file is specified, the reader will switch to file series mode in which it will pretend that it can support time and provide one file per time step.
       </Documentation>
     </StringVectorProperty>

     <DoubleVectorProperty name="TimestepValues"
                           repeatable="1"
                           information_only="1">
       <TimeStepsInformationHelper/>
       <Documentation>
         Available timestep values.
       </Documentation>
     </DoubleVectorProperty>

     <Hints>
      <ReaderFactory extensions="vtu"
          file_description="VTK UnstructuredGrid Files" />
     </Hints>

   </SourceProxy> <!-- XMLUnstructuredGridReader -->

   <SourceProxy name="XMLImageDataReader"
                          class="vtkFileSeriesReader"
                          label="XML Image Data Reader"
                          si_class="vtkSIFileSeriesReaderProxy"
                          file_name_method="SetFileName">
     <Documentation short_help="Read VTK XML image data files."
                    long_help="Reads serial VTK XML image data files.">
       The XML Image Data reader reads the VTK XML image data file format. The standard extension is .vti. This reader also supports file series.
     </Documentation>

     <SubProxy>
       <Proxy name="Reader"
              proxygroup="internal_sources"
              proxyname="XMLImageDataReaderCore">
       </Proxy>
       <ExposedProperties>
         <Property name="CellArrayInfo" />
         <Property name="CellArrayStatus" />
         <Property name="PointArrayInfo" />
         <Property name="PointArrayStatus" />
       </ExposedProperties>
     </SubProxy>

     <StringVectorProperty name="FileNameInfo"
        command="GetCurrentFileName"
        information_only="1" >
        <SimpleStringInformationHelper />
     </StringVectorProperty>

     <StringVectorProperty name="FileName"
                           clean_command="RemoveAllFileNames"
                           command="AddFileName"
                           animateable="0"
                           number_of_elements="1"
                           repeat_command="1"
                           information_property="FileNameInfo" >
       <FileListDomain name="files"/>
       <Documentation>
         The list of files to be read by the reader. Each file is expected to be in the VTK XML image data format. The standard extension is .vti. If more than one file is specified, the reader will switch to file series mode in which it will pretend that it can support time and provide one file per time step.
       </Documentation>
     </StringVectorProperty>

     <DoubleVectorProperty name="TimestepValues"
                           repeatable="1"
                           information_only="1">
       <TimeStepsInformationHelper/>
       <Documentation>
         Available timestep values.
       </Documentation>
     </DoubleVectorProperty>

     <Hints>
      <ReaderFactory extensions="vti"
          file_description="VTK ImageData Files" />
     </Hints>

   </SourceProxy> <!-- XMLImageDataReader -->

   <SourceProxy name="XMLStructuredGridReader"
                          class="vtkFileSeriesReader"
                          label="XML Structured Grid Reader"
                          si_class="vtkSIFileSeriesReaderProxy"
                          file_name_method="SetFileName">
     <Documentation short_help="Read VTK XML structured grid data files."
                    long_help="Reads serial VTK XML structured grid data files.">
       The XML Structured Grid reader reads the VTK XML structured grid data file format. The standard extension is .vts. This reader also supports file series.
     </Documentation>

     <SubProxy>
       <Proxy name="Reader"
              proxygroup="internal_sources"
              proxyname="XMLStructuredGridReaderCore">
       </Proxy>
       <ExposedProperties>
         <Property name="CellArrayInfo" />
         <Property name="CellArrayStatus" />
         <Property name="PointArrayInfo" />
         <Property name="PointArrayStatus" />
       </ExposedProperties>
     </SubProxy>

     <StringVectorProperty name="FileNameInfo"
        command="GetCurrentFileName"
        information_only="1" >
        <SimpleStringInformationHelper />
     </StringVectorProperty>

     <StringVectorProperty name="FileName"
                           clean_command="RemoveAllFileNames"
                           command="AddFileName"
                           animateable="0"
                           number_of_elements="1"
                           repeat_command="1"
                           information_property="FileNameInfo">
       <FileListDomain name="files"/>
       <Documentation>
         The list of files to be read by the reader. Each file is expected to be in the VTK XML structured grid data format. The standard extension is .vts. If more than one file is specified, the reader will switch to file series mode in which it will pretend that it can support time and provide one file per time step.
       </Documentation>
     </StringVectorProperty>

     <DoubleVectorProperty name="TimestepValues"
                           repeatable="1"
                           information_only="1">
       <TimeStepsInformationHelper/>
       <Documentation>
         Available timestep values.
       </Documentation>
     </DoubleVectorProperty>

     <Hints>
      <ReaderFactory extensions="vts"
          file_description="VTK StructuredGrid Files" />
     </Hints>
   </SourceProxy> <!-- XMLStructuredGridReader -->

   <SourceProxy name="XMLRectilinearGridReader"
                          class="vtkFileSeriesReader"
                          label="XML Rectilinear Grid Reader"
                          si_class="vtkSIFileSeriesReaderProxy"
                          file_name_method="SetFileName">
     <Documentation short_help="Read VTK XML rectilinear grid data files."
                    long_help="Reads serial VTK XML rectilinear grid data files.">
       The XML Rectilinear Grid reader reads the VTK XML rectilinear grid data file format. The standard extension is .vtr. This reader also supports file series.
     </Documentation>

     <SubProxy>
       <Proxy name="Reader"
              proxygroup="internal_sources"
              proxyname="XMLRectilinearGridReaderCore">
       </Proxy>
       <ExposedProperties>
         <Property name="CellArrayInfo" />
         <Property name="CellArrayStatus" />
         <Property name="PointArrayInfo" />
         <Property name="PointArrayStatus" />
       </ExposedProperties>
     </SubProxy>

     <StringVectorProperty name="FileNameInfo"
        command="GetCurrentFileName"
        information_only="1" >
        <SimpleStringInformationHelper />
     </StringVectorProperty>

     <StringVectorProperty name="FileName"
                           clean_command="RemoveAllFileNames"
                           command="AddFileName"
                           animateable="0"
                           number_of_elements="1"
                           repeat_command="1"
                           information_property="FileNameInfo">
       <FileListDomain name="files"/>
       <Documentation>
         The list of files to be read by the reader. Each file is expected to be in the VTK XML rectilinear grid data format. The standard extension is .vtr. If more than one file is specified, the reader will switch to file series mode in which it will pretend that it can support time and provide one file per time step.
       </Documentation>
     </StringVectorProperty>

     <DoubleVectorProperty name="TimestepValues"
                           repeatable="1"
                           information_only="1">
       <TimeStepsInformationHelper/>
       <Documentation>
         Available timestep values.
       </Documentation>
     </DoubleVectorProperty>
     <Hints>
      <ReaderFactory extensions="vtr"
          file_description="VTK RectilinearGrid Files" />
     </Hints>

   </SourceProxy> <!-- XMLRectilinearGridReader -->

   <SourceProxy name="XMLPPolyDataReader"
                          class="vtkFileSeriesReader"
                          label="XML Partitioned Polydata Reader"
                          si_class="vtkSIFileSeriesReaderProxy"
                          file_name_method="SetFileName">
     <Documentation short_help="Read partitioned VTK XML polydata files."
                    long_help="Reads the summary file and the assicoated VTK XML polydata files.">
       The XML Partitioned Polydata reader reads the partitioned VTK polydata file format. It reads the partitioned format's summary file and then the associated VTK XML polydata files. The expected file extension is .pvtp. This reader also supports file series.
     </Documentation>

     <SubProxy>
       <Proxy name="Reader"
              proxygroup="internal_sources" proxyname="XMLPPolyDataReaderCore">
       </Proxy>
       <ExposedProperties>
         <Property name="CellArrayInfo" />
         <Property name="CellArrayStatus" />
         <Property name="PointArrayInfo" />
         <Property name="PointArrayStatus" />
       </ExposedProperties>
     </SubProxy>

     <StringVectorProperty name="FileNameInfo"
        command="GetCurrentFileName"
        information_only="1" >
        <SimpleStringInformationHelper />
     </StringVectorProperty>

     <StringVectorProperty name="FileName"
                           clean_command="RemoveAllFileNames"
                           command="AddFileName"
                           animateable="0"
                           number_of_elements="1"
                           repeat_command="1"
                           information_property="FileNameInfo">
       <FileListDomain name="files"/>
       <Documentation>
         The list of files to be read by the reader. Each file is expected to be in the partitioned VTK XML polygonal dataset format. The standard extension is .pvtp. If more than one file is specified, the reader will switch to file series mode in which it will pretend that it can support time and provide one file per time step.
       </Documentation>
     </StringVectorProperty>

     <DoubleVectorProperty name="TimestepValues"
                           repeatable="1"
                           information_only="1">
       <TimeStepsInformationHelper/>
       <Documentation>
         Available timestep values.
       </Documentation>
     </DoubleVectorProperty>

     <Hints>
      <ReaderFactory extensions="pvtp"
          file_description="VTK PolyData Files (partitioned)" />
     </Hints>

   </SourceProxy> <!-- XMLPPolyDataReader -->

   <SourceProxy name="XMLPUnstructuredGridReader"
                          class="vtkFileSeriesReader"
                          label="XML Partitioned Unstructured Grid Reader"
                          si_class="vtkSIFileSeriesReaderProxy"
                          file_name_method="SetFileName">
     <Documentation short_help="Read partitioned VTK XML unstructured grid data files."
                    long_help="Reads the summary file and the associated VTK XML unstructured grid data files.">
       The XML Partitioned Unstructured Grid reader reads the partitioned VTK unstructured grid data file format. It reads the partitioned format's summary file and then the associated VTK XML unstructured grid data files. The expected file extension is .pvtu. This reader also supports file series.
     </Documentation>

     <SubProxy>
       <Proxy name="Reader"
              proxygroup="internal_sources"
              proxyname="XMLPUnstructuredGridReaderCore">
       </Proxy>
       <ExposedProperties>
         <Property name="CellArrayInfo" />
         <Property name="CellArrayStatus" />
         <Property name="PointArrayInfo" />
         <Property name="PointArrayStatus" />
       </ExposedProperties>
     </SubProxy>

     <StringVectorProperty name="FileNameInfo"
        command="GetCurrentFileName"
        information_only="1" >
        <SimpleStringInformationHelper />
     </StringVectorProperty>

     <StringVectorProperty name="FileName"
                           clean_command="RemoveAllFileNames"
                           command="AddFileName"
                           animateable="0"
                           number_of_elements="1"
                           repeat_command="1"
                           information_property="FileNameInfo">
       <FileListDomain name="files"/>
       <Documentation>
         The list of files to be read by the reader. Each file is expected to be in the partitioned VTK XML unstructured grid data format. The standard extension is .pvtu. If more than one file is specified, the reader will switch to file series mode in which it will pretend that it can support time and provide one file per time step.
       </Documentation>
     </StringVectorProperty>

     <DoubleVectorProperty name="TimestepValues"
                           repeatable="1"
                           information_only="1">
       <TimeStepsInformationHelper/>
       <Documentation>
         Available timestep values.
       </Documentation>
     </DoubleVectorProperty>

     <Hints>
      <ReaderFactory extensions="pvtu"
          file_description="VTK UnstructuredGrid Files (partitioned)" />
     </Hints>
   </SourceProxy> <!-- XMLPUnstructuredGridReader -->

   <SourceProxy name="XMLPImageDataReader"
                          class="vtkFileSeriesReader"
                          label="XML Partitioned Image Data Reader"
                          si_class="vtkSIFileSeriesReaderProxy"
                          file_name_method="SetFileName">
     <Documentation short_help="Read partitioned VTK XML image data files."
                    long_help="Reads the summary file and the associated VTK XML image data files.">
       The XML Partitioned Image Data reader reads the partitioned VTK image data file format. It reads the partitioned format's summary file and then the associated VTK XML image data files. The expected file extension is .pvti. This reader also supports file series.
     </Documentation>

     <SubProxy>
       <Proxy name="Reader"
              proxygroup="internal_sources"
              proxyname="XMLPImageDataReaderCore">
       </Proxy>
       <ExposedProperties>
         <Property name="CellArrayInfo" />
         <Property name="CellArrayStatus" />
         <Property name="PointArrayInfo" />
         <Property name="PointArrayStatus" />
       </ExposedProperties>
     </SubProxy>

     <StringVectorProperty name="FileNameInfo"
        command="GetCurrentFileName"
        information_only="1" >
        <SimpleStringInformationHelper />
     </StringVectorProperty>

     <StringVectorProperty name="FileName"
                           clean_command="RemoveAllFileNames"
                           command="AddFileName"
                           animateable="0"
                           number_of_elements="1"
                           repeat_command="1"
                           information_property="FileNameInfo">
       <FileListDomain name="files"/>
       <Documentation>
         The list of files to be read by the reader. Each file is expected to be in the partitioned VTK XML image data format. The standard extension is .pvti. If more than one file is specified, the reader will switch to file series mode in which it will pretend that it can support time and provide one file per time step.
       </Documentation>
     </StringVectorProperty>

     <DoubleVectorProperty name="TimestepValues"
                           repeatable="1"
                           information_only="1">
       <TimeStepsInformationHelper/>
       <Documentation>
         Available timestep values.
       </Documentation>
     </DoubleVectorProperty>

     <Hints>
      <ReaderFactory extensions="pvti"
          file_description="VTK ImageData Files (partitioned)" />
     </Hints>

   </SourceProxy> <!-- XMLPImageDataReader -->

   <SourceProxy name="XMLPStructuredGridReader"
                          class="vtkFileSeriesReader"
                          label="XML Partitioned Structured Grid Reader"
                          si_class="vtkSIFileSeriesReaderProxy"
                          file_name_method="SetFileName">
     <Documentation short_help="Read partitioned VTK XML structured grid data files."
                    long_help="Reads the summary file and the associated VTK XML structured grid data files.">
       The XML Partitioned Structured Grid reader reads the partitioned VTK structured grid data file format. It reads the partitioned format's summary file and then the associated VTK XML structured grid data files. The expected file extension is .pvts. This reader also supports file series.
     </Documentation>

     <SubProxy>
       <Proxy name="Reader"
              proxygroup="internal_sources"
              proxyname="XMLPStructuredGridReaderCore">
       </Proxy>
       <ExposedProperties>
         <Property name="CellArrayInfo" />
         <Property name="CellArrayStatus" />
         <Property name="PointArrayInfo" />
         <Property name="PointArrayStatus" />
       </ExposedProperties>
     </SubProxy>

     <StringVectorProperty name="FileNameInfo"
        command="GetCurrentFileName"
        information_only="1" >
        <SimpleStringInformationHelper />
     </StringVectorProperty>

     <StringVectorProperty name="FileName"
                           clean_command="RemoveAllFileNames"
                           command="AddFileName"
                           animateable="0"
                           number_of_elements="1"
                           repeat_command="1"
                           information_property="FileNameInfo">
       <FileListDomain name="files"/>
       <Documentation>
         The list of files to be read by the reader. Each file is expected to be in the partitioned VTK XML structured grid data format. The standard extension is .pvts. If more than one file is specified, the reader will switch to file series mode in which it will pretend that it can support time and provide one file per time step.
       </Documentation>
     </StringVectorProperty>

     <DoubleVectorProperty name="TimestepValues"
                           repeatable="1"
                           information_only="1">
       <TimeStepsInformationHelper/>
       <Documentation>
         Available timestep values.
       </Documentation>
     </DoubleVectorProperty>

     <Hints>
      <ReaderFactory extensions="pvts"
          file_description="VTK StructuredGrid Files (partitioned)" />
     </Hints>

   </SourceProxy> <!-- XMLPStructuredGridReader -->

   <SourceProxy name="XMLPRectilinearGridReader"
                          class="vtkFileSeriesReader"
                          label="XML Partitioned Rectilinear Grid Reader"
                          si_class="vtkSIFileSeriesReaderProxy"
                          file_name_method="SetFileName">
     <Documentation short_help="Read partitioned VTK XML rectilinear grid data files."
                    long_help="Reads the summary file and the associated VTK XML rectilinear grid data files.">
       The XML Partitioned Rectilinear Grid reader reads the partitioned VTK rectilinear grid file format. It reads the partitioned format's summary file and then the associated VTK XML rectilinear grid files. The expected file extension is .pvtr. This reader also supports file series.
     </Documentation>

     <SubProxy>
       <Proxy name="Reader"
              proxygroup="internal_sources"
              proxyname="XMLPRectilinearGridReaderCore">
       </Proxy>
       <ExposedProperties>
         <Property name="CellArrayInfo" />
         <Property name="CellArrayStatus" />
         <Property name="PointArrayInfo" />
         <Property name="PointArrayStatus" />
       </ExposedProperties>
     </SubProxy>

     <StringVectorProperty name="FileNameInfo"
        command="GetCurrentFileName"
        information_only="1" >
        <SimpleStringInformationHelper />
     </StringVectorProperty>

     <StringVectorProperty name="FileName"
                           clean_command="RemoveAllFileNames"
                           command="AddFileName"
                           animateable="0"
                           number_of_elements="1"
                           repeat_command="1"
                           information_property="FileNameInfo">
       <FileListDomain name="files"/>
       <Documentation>
         The list of files to be read by the reader. Each file is expected to be in the partitioned VTK XML rectilinear grid data format. The standard extension is .pvtr. If more than one file is specified, the reader will switch to file series mode in which it will pretend that it can support time and provide one file per time step.
       </Documentation>
     </StringVectorProperty>

     <DoubleVectorProperty name="TimestepValues"
                           repeatable="1"
                           information_only="1">
       <TimeStepsInformationHelper/>
       <Documentation>
         Available timestep values.
       </Documentation>
     </DoubleVectorProperty>

     <Hints>
      <ReaderFactory extensions="pvtr"
          file_description="VTK RectilinearGrid Files (partitioned)" />
     </Hints>

   </SourceProxy> <!-- XMLPRectilinearGridReader -->

   <SourceProxy name="RTXMLPolyDataReader"
                class="vtkRTXMLPolyDataReader">
     <StringVectorProperty
        name="FileName"
        command="SetFileName"
        animateable="0"
        number_of_elements="1">
        <FileListDomain name="files"/>
        <Documentation>
          Set the file name for the real-time VTK polygonal dataset reader.
        </Documentation>
     </StringVectorProperty>

     <StringVectorProperty
        name="Location"
        command="SetLocation"
        number_of_elements="1">
        <FileListDomain name="files"/>
        <Documentation>
          Set the data directory containing real time data files.
        </Documentation>
     </StringVectorProperty>

     <StringVectorProperty
        name="NextFileName"
        command="GetNextFileName"
        number_of_elements="1"
        information_only="1">
        <SimpleStringInformationHelper/>
     </StringVectorProperty>

     <IntVectorProperty
        name="NewDataAvailable"
        command="NewDataAvailable"
        number_of_elements="1"
                    default_values="2"
        information_only="1">
        <SimpleIntInformationHelper/>
     </IntVectorProperty>

     <Property
        name="UpdateToNextFile"
        command="UpdateToNextFile">
     </Property>

     <Property
        name="ResetReader"
        command="ResetReader">
     </Property>
     <!-- End of RTXMLPolyDataReader -->
   </SourceProxy>

   <SourceProxy name="LegacyVTKFileReader"
                          class="vtkFileSeriesReader"
                          label="Legacy VTK Reader"
                          si_class="vtkSIFileSeriesReaderProxy"
                          file_name_method="SetFileName">
     <Documentation
       short_help="Read legacy VTK files."
       long_help="Reads files stored in VTK's legacy file format.">
       The Legacy VTK reader loads files stored in VTK's legacy file format (before VTK 4.2, although still supported). The expected file extension is .vtk. The type of the dataset may be structured grid, uniform rectilinear grid (image/volume), non-uniform rectiinear grid, unstructured grid, or polygonal. This reader also supports file series.
     </Documentation>
      <SubProxy>
        <Proxy name="Reader"
          proxygroup="internal_sources" proxyname="legacyreader">
        </Proxy>
      </SubProxy>

     <StringVectorProperty name="FileNameInfo"
        command="GetCurrentFileName"
        information_only="1" >
        <SimpleStringInformationHelper />
     </StringVectorProperty>

     <StringVectorProperty
        name="FileNames"
        clean_command="RemoveAllFileNames"
        command="AddFileName"
        animateable="0"
        number_of_elements="1"
        repeat_command="1"
        information_property="FileNameInfo" >
        <FileListDomain name="files"/>
       <Documentation>
         The list of files to be read by the reader. If more than one file is specified, the reader will switch to file series mode in which it will pretend that it can support time and provide one file per time step.
       </Documentation>
     </StringVectorProperty>

     <DoubleVectorProperty
        name="TimestepValues"
        repeatable="1"
        information_only="1">
        <TimeStepsInformationHelper/>
        <Documentation>
          Available timestep values.
        </Documentation>
     </DoubleVectorProperty>

     <Hints>
      <ReaderFactory extensions="vtk"
          file_description="Legacy VTK files" />
     </Hints>
     <!-- End LegacyVTKFileReader -->
   </SourceProxy>

   <SourceProxy name="pvtkfile"
                class="vtkPDataSetReader"
                label="Partitioned Legacy VTK Reader">
     <Documentation
       short_help="Read partitioned legacy VTK files."
       long_help="Reads files stored in VTK partitioned legacy format.">
       The Partitioned Legacy VTK reader loads files stored in VTK's partitioned legac file format (before VTK 4.2, although still supported). The expected file extension is .pvtk. The type of the dataset may be structured grid, uniform rectilinear grid (image/volume), non-uniform rectilinear grid, unstructured grid, or polygonal.
     </Documentation>
     <StringVectorProperty
        name="FileName"
        animateable="0"
        command="SetFileName"
        number_of_elements="1">
       <FileListDomain name="files"/>
       <Documentation>
         This property specifies the file name for the Partitioned Legacy VTK reader.
       </Documentation>
     </StringVectorProperty>

     <Hints>
      <ReaderFactory extensions="pvtk"
          file_description="Legacy VTK Files (partitioned)" />
     </Hints>
   <!-- End pvtkfile -->
   </SourceProxy>

   <SourceProxy name="ensight"
                class="vtkPGenericEnSightReader"
                label="EnSight Reader">
     <Documentation
       short_help="Read EnSight files."
       long_help="Reads EnSight 6 and Gold files.">
       The EnSight reader reads files in the format produced by CEI's EnSight. EnSight 6 and Gold files (both ASCII and binary) are supported. The default extension is .case. The output of this reader is a multi-block dataset.
     </Documentation>
     <StringVectorProperty
        name="CaseFileName"
        command="SetCaseFileName"
        animateable="0"
        number_of_elements="1">
        <FileListDomain name="files"/>
        <Documentation>
          This property specifies the case file name for the EnSight reader.
        </Documentation>
     </StringVectorProperty>

     <DoubleVectorProperty
        name="TimestepValues"
        repeatable="1"
        information_only="1">
        <TimeStepsInformationHelper/>
        <Documentation>
          Available timestep values.
        </Documentation>
     </DoubleVectorProperty>

     <StringVectorProperty
        name="CellArrayInfo"
        information_only="1">
        <ArraySelectionInformationHelper attribute_name="Cell"/>
     </StringVectorProperty>

     <StringVectorProperty
        name="CellArrayStatus"
        command="SetCellArrayStatus"
        number_of_elements="0"
        repeat_command="1"
        number_of_elements_per_command="2"
        element_types="2 0"
        information_property="CellArrayInfo"
        label="Cell Arrays">
       <ArraySelectionDomain name="array_list">
          <RequiredProperties>
             <Property name="CellArrayInfo" function="ArrayList"/>
          </RequiredProperties>
       </ArraySelectionDomain>
       <Documentation>
         This property lists which cell-centered arrays to read.
       </Documentation>
     </StringVectorProperty>

     <StringVectorProperty
        name="PointArrayInfo"
        information_only="1">
        <ArraySelectionInformationHelper attribute_name="Point"/>
     </StringVectorProperty>

     <StringVectorProperty
        name="PointArrayStatus"
        command="SetPointArrayStatus"
        number_of_elements="0"
        repeat_command="1"
        number_of_elements_per_command="2"
        element_types="2 0"
        information_property="PointArrayInfo"
        label="Point Arrays">
       <ArraySelectionDomain name="array_list">
          <RequiredProperties>
             <Property name="PointArrayInfo" function="ArrayList"/>
          </RequiredProperties>
       </ArraySelectionDomain>
       <Documentation>
         This property lists which point-centered arrays to read.
       </Documentation>
     </StringVectorProperty>

     <Hints>
      <ReaderFactory extensions="case CASE Case"
          file_description="EnSight Files" />
     </Hints>
   <!-- End ensight -->
   </SourceProxy>

   <SourceProxy name="spcthreader" class="vtkSpyPlotReader"
                label="Spy Plot Reader">
     <Documentation
       short_help="Read files in the Spy Plot format."
       long_help="Reads files in the SPCTH Spy Plot file format.">
       The Spy Plot reader loads an ASCII meta-file called the "case" file (extension .spcth). The case file lists all the binary files containing the dataset. This reader produces hierarchical datasets.
     </Documentation>
     <StringVectorProperty
        name="FileName"
        command="SetFileName"
        animateable="0"
        number_of_elements="1">
        <FileListDomain name="files"/>
        <Documentation>
          This property specifies the file name for the Spy Plot reader.
        </Documentation>
     </StringVectorProperty>

     <DoubleVectorProperty
        name="TimestepValues"
        repeatable="1"
        information_only="1">
        <TimeStepsInformationHelper/>
        <Documentation>
          Available timestep values.
        </Documentation>
     </DoubleVectorProperty>

     <IntVectorProperty
        name="DownConvertVolumeFraction"
        command="SetDownConvertVolumeFraction"
        number_of_elements="1"
        default_values="1" >
       <BooleanDomain name="bool"/>
       <Documentation>
         If this property is set to 0, the type of the volume fraction is float; is set to 1, the type is unsigned char.
       </Documentation>
     </IntVectorProperty>

     <IntVectorProperty
       name="ComputeDerivedVariables"
       command="SetComputeDerivedVariables"
       number_of_elements="1"
       default_values="1" >
       <BooleanDomain name="bool"/>
       <Documentation>
         If this property is set to 1, the reader will convert derived variables like material density for the materials
         that the user has selected. For Density the user needs to have selected Material Mass and Material Volume Fraction.
       </Documentation>
     </IntVectorProperty>

     <IntVectorProperty
        name="DistributeFiles"
        command="SetDistributeFiles"
        number_of_elements="1"
        default_values="1" >
       <BooleanDomain name="bool"/>
       <Documentation>
         In parallel mode, if this property is set to 1, the reader will distribute files or blocks.
       </Documentation>
     </IntVectorProperty>

     <IntVectorProperty
        name="GenerateLevelArray"
        command="SetGenerateLevelArray"
        number_of_elements="1"
        default_values="0" >
       <BooleanDomain name="bool"/>
       <Documentation>
         If this property is set to 1, a cell array will be generated that stores the level of each block.
       </Documentation>
     </IntVectorProperty>

     <IntVectorProperty
        name="GenerateActiveBlockArray"
        command="SetGenerateActiveBlockArray"
        number_of_elements="1"
        default_values="0" >
       <BooleanDomain name="bool"/>
       <Documentation>
         If this property is set to 1, a cell array will be generated that stores the active status of a block.
       </Documentation>
     </IntVectorProperty>

     <IntVectorProperty
        name="GenerateTracerArray"
        command="SetGenerateTracerArray"
        number_of_elements="1"
        default_values="0" >
       <BooleanDomain name="bool"/>
       <Documentation>
         If this property is set to 1, a cell array will be generated that stores the coordinates of any tracers.
       </Documentation>
     </IntVectorProperty>

     <IntVectorProperty
        name="GenerateBlockIdArray"
        command="SetGenerateBlockIdArray"
        number_of_elements="1"
        default_values="0" >
       <BooleanDomain name="bool"/>
       <Documentation>
         If this property is set to 1, a cell array will be generated that stores a unique blockId for each block.
       </Documentation>
     </IntVectorProperty>

     <IntVectorProperty
        name="MergeXYZComponents"
        command="SetMergeXYZComponents"
        number_of_elements="1"
        default_values="1" >
       <BooleanDomain name="bool"/>
       <Documentation>
         If this property is set to 1, cell arrays named (for example) X velocity, Y velocity and Z velocity will be combined into a single vector array named velocity.
       </Documentation>
     </IntVectorProperty>

     <StringVectorProperty
        name="CellArrayInfo"
        information_only="1">
        <ArraySelectionInformationHelper attribute_name="Cell"/>
     </StringVectorProperty>

     <StringVectorProperty
        name="CellArrayStatus"
        command="SetCellArrayStatus"
        number_of_elements="0"
        repeat_command="1"
        number_of_elements_per_command="2"
        element_types="2 0"
        information_property="CellArrayInfo"
        label="Cell Arrays">
       <ArraySelectionDomain name="array_list">
          <RequiredProperties>
             <Property name="CellArrayInfo" function="ArrayList"/>
          </RequiredProperties>
       </ArraySelectionDomain>
       <Documentation>
         This property lists which cell-centered arrays to read.
       </Documentation>
     </StringVectorProperty>

     <Hints>
      <ReaderFactory filename_patterns="spct*"
          file_description="SpyPlot CTH dataset" />
     </Hints>
   <!-- End spcthreader-->
   </SourceProxy>

  <SourceProxy name="SPCTHRestartReader"
                         class="vtkFileSeriesReader"
                         label="Restarted Sim Spy Plot Reader"
                         si_class="vtkSIFileSeriesReaderProxy"
                         file_name_method="SetFileName">
    <Documentation short_help="Read SPCTH files from simulation restarts."
                   long_help="Reads collections of SPCTH files from simulations that were restarted.">
      When a CTH simulation is restarted, typically you get a new set of output files. When you read them in your visualization, you often want to string these file sets together as if it was one continuous dump of files. This reader allows you to specify a metadata file that will implicitly string the files together.
    </Documentation>
    <SubProxy>
      <Proxy name="Reader" proxygroup="sources" proxyname="spcthreader" />
      <ExposedProperties>
        <Property name="DownConvertVolumeFraction" />
        <Property name="DistributeFiles" />
        <Property name="GenerateLevelArray" />
        <Property name="GenerateActiveBlockArray" />
        <Property name="GenerateBlockIdArray" />
        <Property name="CellArrayInfo" />
        <Property name="CellArrayStatus" />
      </ExposedProperties>
    </SubProxy>

    <StringVectorProperty name="FileName"
                          animateable="0"
                          command="SetMetaFileName"
                          number_of_elements="1">
      <FileListDomain name="files" />
      <Documentation>
        This points to a special metadata file that lists the output files for each restart.
      </Documentation>
    </StringVectorProperty>

    <IntVectorProperty name="UseMetaFile"
                       command="SetUseMetaFile"
                       number_of_elements="1"
                       default_values="1">
      <BooleanDomain name="bool" />
      <Documentation>
        This hidden property must always be set to 1 for this proxy to work.
      </Documentation>
    </IntVectorProperty>

    <DoubleVectorProperty name="TimestepValues"
                          repeatable="1"
                          information_only="1">
      <TimeStepsInformationHelper/>
    </DoubleVectorProperty>

    <Hints>
      <!-- This property is here simply to set it. -->
      <Property name="UseMetaFile" show="0" />
      <ReaderFactory extensions="spcth-timeseries"
          file_description="Case file for restarted CTH outputs" />
    </Hints>
    <!-- SPCTHRestartReader -->
  </SourceProxy>


   <SourceProxy name="spcthhistoryreader" class="vtkSpyPlotHistoryReader"
   label="spcth history reader">
      <Documentation
        short_help="Read a comma-separated spctch history file."
        long_help="Reads an spcth history file where each row translates into a single time step
        and the columns are points, materials and properties.">
      </Documentation>
      <StringVectorProperty name="FileName"
        command="SetFileName"
        animateable="0"
        number_of_elements="1">
        <FileListDomain name="files"/>
        <Documentation>
          This property specifies the file name for the VRML reader.
        </Documentation>
      </StringVectorProperty>


      <StringVectorProperty name="CommentCharacter"
        command="SetCommentCharacter"
        number_of_elements="1"
        default_values="%">
        <Documentation>
          This property lists the characters that is used as the first character on comment lines
        </Documentation>
      </StringVectorProperty>

      <StringVectorProperty name="Delimeter"
        command="SetDelimeter"
        number_of_elements="1"
        default_values=",">
        <Documentation>
          Character that is used as the delimeter.
        </Documentation>
      </StringVectorProperty>

     <DoubleVectorProperty
        name="TimestepValues"
        repeatable="1"
        information_only="1">
        <TimeStepsInformationHelper/>
        <Documentation>
          Available timestep values.
        </Documentation>
     </DoubleVectorProperty>

      <Hints>
       <ReaderFactory
       extensions="hscth"
       filename_patterns="*hsct*"
       file_description="Spy Plot History Files" />
      </Hints>
      <!-- End of SPCTHHistoryReader -->
   </SourceProxy>


   <SourceProxy name="vrmlreader" class="vtkVRMLSource" label="VRML Reader">
     <Documentation
       short_help="Read VRML 2.0 files."
       long_help="Load the geometry from a VRML 2.0 file.">
       The VRML reader loads only the geometry from a VRML (Virtual Reality Modeling Language) 2.0 file. The expected file extension is .wrl. The output of this reader is a polygonal dataset.
     </Documentation>
     <StringVectorProperty
        name="FileName"
        animateable="0"
        command="SetFileName"
        number_of_elements="1">
        <FileListDomain name="files"/>
        <Documentation>
          This property specifies the file name for the VRML reader.
        </Documentation>
     </StringVectorProperty>
     <Hints>
      <ReaderFactory extensions="wrl vrml"
          file_description="VRML 2 Files" />
     </Hints>
   <!-- End vrmlreader -->
   </SourceProxy>

   <SourceProxy name="plyreader" class="vtkPLYReader" label="PLY Reader">
     <Documentation
       short_help="Read PLY polygonal files."
       long_help="Reads files stored in Stanford University's PLY polygonal file format.">
       The PLY reader reads files stored in the PLY polygonal file format developed at Stanford University. The PLY files that ParaView can read must have the elements "vertex" and "face" defined. The "vertex" elements must have the propertys "x", "y", and "z". The "face" elements must have the property "vertex_indices" defined. The default file extension for this reader is .ply.
     </Documentation>
     <StringVectorProperty
        name="FileName"
        animateable="0"
        command="SetFileName"
        number_of_elements="1">
        <FileListDomain name="files"/>
        <Documentation>
          This property specifies the file name for the PLY reader.
        </Documentation>
     </StringVectorProperty>
     <Hints>
      <ReaderFactory extensions="ply"
          file_description="PLY Polygonal File Format" />
     </Hints>
   <!-- End plyreader -->
   </SourceProxy>

   <SourceProxy name="pdbreader" class="vtkPDBReader" label="PDB Reader">
     <Documentation
       short_help="Read PDB files."
       long_help="Reads PDB molecule files.">
       The PDB reader reads files in the format used by the Protein Data Bank (an archive of experimentally determined three-dimensional structures of biological macromolecules). The expected file extension is .pdb. The output datasets are polygonal.
     </Documentation>
     <StringVectorProperty
        name="FileName"
        animateable="0"
        command="SetFileName"
        number_of_elements="1">
        <FileListDomain name="files"/>
        <Documentation>
          This property specifies the file name for the PDB reader.
        </Documentation>
     </StringVectorProperty>
     <Hints>
      <ReaderFactory extensions="pdb" file_description="Protein Data Bank Files" />
     </Hints>
   <!-- End pdbreader -->
   </SourceProxy>

   <SourceProxy name="xyzreader" class="vtkXYZMolReader" label="XYZ Reader">
     <Documentation
       short_help="Read XYZ molecular data files."
       long_help="Reads XYZ molecular data files into a polygonal dataset.">
       The XYZ reader reads XYZ molecular data files. The expected file extension is .xyz. The output of this reader is a polygonal dataset.
     </Documentation>
     <StringVectorProperty
        name="FileName"
        command="SetFileName"
        animateable="0"
        number_of_elements="1">
        <FileListDomain name="files"/>
        <Documentation>
          This property specifies the file name for the XYZ reader.
        </Documentation>
     </StringVectorProperty>

     <IntVectorProperty
        name="TimeStep"
        command="SetTimeStep"
        number_of_elements="1"
        animateable="1"
        default_values="0" >
       <IntRangeDomain name="range"/>
       <Documentation>
         This property specifies the timestep the XYZ reader should load.
       </Documentation>
     </IntVectorProperty>

     <Hints>
      <ReaderFactory extensions="xyz"
          file_description="XMol Molecule Files" />
     </Hints>
   <!-- End xyzreader -->
   </SourceProxy>

   <SourceProxy name="PhastaReader"
                class="vtkPPhastaReader"
                label="Phasta Reader">
     <Documentation
       short_help="Read datasets stored in the Phasta format."
       long_help="Reads the parallel Phasta meta-file and the underlying Phasta files.">
       This Phasta reader reads files stored in the Phasta (a CFD package) format. The expected file extension is .pht. The output of this reader is a multipiece data set.
     </Documentation>
     <StringVectorProperty
        name="FileName"
        command="SetFileName"
        animateable="0"
        number_of_elements="1">
        <FileListDomain name="files"/>
        <Documentation>
          This property specifies the file name for the Phasta reader.
        </Documentation>
     </StringVectorProperty>

     <DoubleVectorProperty
         name="TimestepValues"
         repeatable="1"
         information_only="1">
        <TimeStepsInformationHelper/>
        <Documentation>
          Available timestep values.
        </Documentation>
     </DoubleVectorProperty>

     <Hints>
      <ReaderFactory extensions="pht"
          file_description="Phasta Files" />
     </Hints>
   </SourceProxy>

   <SourceProxy name="EnzoReader"
                class="vtkEnzoReader"
                label="Enzo Reader">
     <Documentation
       short_help="Read multi-block dataset from an Enzo file."
       long_help="Reads multi-block dataset from an Enzo file.">
         This Enzo reader loads data stored in Enzo format. The output of this reader is a multi-block dataset.
     </Documentation>
     <StringVectorProperty
        name="FileName"
        command="SetFileName"
        animateable="0"
        number_of_elements="1">
        <FileListDomain name="files"/>
        <Documentation>
            This property specifies the file name for the Enzo reader.
        </Documentation>
     </StringVectorProperty>

     <IntVectorProperty
       name="BlockOutputType"
       command="SetBlockOutputType"
       number_of_elements="1"
       default_values="0"
       animateable="0">
       <EnumerationDomain name="enum">
         <Entry value="0" text="Image Data"/>
         <Entry value="1" text="Rectilinear Grid"/>
       </EnumerationDomain>
       <Documentation>
         The property indicates the output type of each block, either vtkImageData (by default) or vtkRectilinearGrid.
       </Documentation>
     </IntVectorProperty>

     <IntVectorProperty
       name="MaxLevel"
       command="SetMaxLevel"
       number_of_elements="1"
       default_values="100" >
       <IntRangeDomain name="range"/>
       <Documentation>
         Do not blocks above this level.
       </Documentation>
     </IntVectorProperty>

     <IntVectorProperty name="LoadParticles"
       command="SetLoadParticles"
       number_of_elements="1"
       default_values="1">
       <BooleanDomain name="bool" />
       <Documentation>
         Load particles when on.
       </Documentation>
     </IntVectorProperty>

     <Hints>
      <ReaderFactory extensions="boundary hierarchy"
          file_description="Enzo Files" />
     </Hints>
   </SourceProxy>

   <SourceProxy name="FlashReader"
                class="vtkFlashReader"
                label="Flash Reader">
     <Documentation
       short_help="Read multi-block dataset from a Flash file."
       long_help="Reads multi-block dataset from a Flash file.">
         This Flash reader loads data stored in Flash format. The output of this reader is a multi-block dataset.
     </Documentation>
     <StringVectorProperty
        name="FileName"
        command="SetFileName"
        animateable="0"
        number_of_elements="1">
        <FileListDomain name="files"/>
        <Documentation>
            This property specifies the file name for the Flash reader.
        </Documentation>
     </StringVectorProperty>

     <IntVectorProperty
       name="BlockOutputType"
       command="SetBlockOutputType"
       number_of_elements="1"
       default_values="0"
       animateable="0">
       <EnumerationDomain name="enum">
         <Entry value="0" text="Image Data"/>
         <Entry value="1" text="Rectilinear Grid"/>
       </EnumerationDomain>
       <Documentation>
         The property indicates the output type of each block, either vtkImageData (by default) or vtkRectilinearGrid.
       </Documentation>
     </IntVectorProperty>

     <IntVectorProperty name="LoadParticles"
       command="SetLoadParticles"
       number_of_elements="1"
       default_values="1">
       <BooleanDomain name="bool" />
       <Documentation>
         Load particles when on.
       </Documentation>
     </IntVectorProperty>

     <IntVectorProperty name="LoadMortonCurve"
       command="SetLoadMortonCurve"
       number_of_elements="1"
       default_values="0">
       <BooleanDomain name="bool" />
       <Documentation>
         Generate morton curve when on.
       </Documentation>
     </IntVectorProperty>

     <Hints>
      <ReaderFactory extensions="Flash flash"
          file_description="Flash Files" />
     </Hints>
   </SourceProxy>

   <SourceProxy name="stlreader"
                          class="vtkFileSeriesReader"
                          label="STL Reader"
                          si_class="vtkSIFileSeriesReaderProxy"
                          file_name_method="SetFileName">
     <Documentation
         short_help="Read STL files."
       long_help="Reads ASCII or binary stereo lithography (STL) files.">
       The STL reader reads ASCII or binary stereo lithography (STL) files. The expected file extension is .stl. The output of this reader is a polygonal dataset. This reader also supports file series.
     </Documentation>

     <SubProxy>
       <Proxy name="Reader"
              proxygroup="internal_sources" proxyname="stlreadercore">
       </Proxy>
     </SubProxy>

     <StringVectorProperty name="FileNameInfo"
        command="GetCurrentFileName"
        information_only="1" >
        <SimpleStringInformationHelper />
     </StringVectorProperty>


     <StringVectorProperty
        name="FileNames"
        clean_command="RemoveAllFileNames"
        command="AddFileName"
        animateable="0"
        number_of_elements="1"
        repeat_command="1"
        information_property="FileNameInfo" >
        <FileListDomain name="files"/>
       <Documentation>
         The list of files to be read by the reader. If more than one file is specified, the reader will switch to file series mode in which it will pretend that it can support time and provide one file per time step.
       </Documentation>
     </StringVectorProperty>

     <DoubleVectorProperty
        name="TimestepValues"
        repeatable="1"
        information_only="1">
        <TimeStepsInformationHelper/>
        <Documentation>
          Available timestep values.
        </Documentation>
     </DoubleVectorProperty>
     <Hints>
      <ReaderFactory extensions="stl"
          file_description="Stereo Lithography" />
     </Hints>
     <!-- End stlreader-->
   </SourceProxy>

   <SourceProxy name="byureader" class="vtkBYUReader" label="BYU Reader">
     <Documentation
       short_help="Read Movie.BYU files."
       long_help="Reads Movie.BYU files to produce polygonal data.">
       The BYU reader reads data stored in Movie.BYU format. The expected file extension is .g. The datasets resulting from reading these files are polygonal.
     </Documentation>
     <StringVectorProperty
        name="FileName"
        animateable="0"
        command="SetFileName"
        number_of_elements="1">
        <FileListDomain name="files"/>
        <Documentation>
          This property specifies the file name for the BYU reader.
        </Documentation>
     </StringVectorProperty>
     <Hints>
      <ReaderFactory extensions="g"
          file_description="BYU Files"/>
     </Hints>
   <!-- End byureader -->
   </SourceProxy>

   <SourceProxy name="objreader" class="vtkOBJReader" label="Wavefront OBJ Reader">
     <Documentation
       short_help="Read Wavefront .OBJ files."
       long_help="Reads Wavefront .OBJ files to produce polygonal and line data.">
       The OBJ reader reads data stored in Wavefront .OBJ format.
       The expected file extension is .obj, the datasets resulting
       from reading these files are polygons and lines.
     </Documentation>
     <StringVectorProperty
        name="FileName"
        animateable="0"
        command="SetFileName"
        number_of_elements="1">
        <FileListDomain name="files"/>
        <Documentation>
          This property specifies the file name for the OBJ reader.
        </Documentation>
     </StringVectorProperty>
     <Hints>
      <ReaderFactory extensions="obj"
          file_description="Wavefront OBJ Files"/>
     </Hints>
   <!-- End vtkOBJReader -->
   </SourceProxy>

   <SourceProxy name="gaussiancubereader" class="vtkGaussianCubeReader"
                label="Gaussian Cube Reader">
     <Documentation
       short_help="Read Gaussian Cube data files."
       long_help="Produce polygonal data by reading a Gaussian Cube file.">
       The Gaussian Cube reader produces polygonal data by reading data files produced by the Gaussian software package. The expected file extension is .cube.
     </Documentation>

     <OutputPort name="Output" index="0" />
     <OutputPort name="Gridded Data" index="1" />

     <StringVectorProperty
        name="FileName"
        animateable="0"
        command="SetFileName"
        number_of_elements="1">
        <FileListDomain name="files"/>
        <Documentation>
          This property specifies the file name for the Gaussian Cube reader.
        </Documentation>
     </StringVectorProperty>

      <DoubleVectorProperty
         name="HBScale"
         command="SetHBScale"
         number_of_elements="1"
         default_values="1.0" >
        <DoubleRangeDomain name="range"/>
        <Documentation>
          A scaling factor to compute bonds with hydrogen atoms.
        </Documentation>
      </DoubleVectorProperty>

      <DoubleVectorProperty
         name="BScale"
         command="SetBScale"
         number_of_elements="1"
         default_values="1.0" >
        <DoubleRangeDomain name="range"/>
        <Documentation>
          A scaling factor to compute bonds between non-hydrogen atoms
        </Documentation>
      </DoubleVectorProperty>

     <Hints>
      <ReaderFactory extensions="cube"
          file_description="Gaussian Cube Files" />
     </Hints>
   <!-- End gaussiancubereader -->
   </SourceProxy>

   <SourceProxy name="popreader" class="vtkPOPReader" label="POP Reader">
     <Documentation
       short_help="Read POP data files."
       long_help="Reads data files from the Parallel Ocean Program (POP).">
       The POP reader reads data files from the Parallel Ocean Program (POP). The expected file extension is .pop. The output of this reader is a structured grid dataset.
     </Documentation>
     <StringVectorProperty
        name="FileName"
        animateable="0"
        command="SetFileName"
        number_of_elements="1">
        <FileListDomain name="files"/>
        <Documentation>
          This property specifies the file name for the POP Ocean file reader.
        </Documentation>
     </StringVectorProperty>

      <DoubleVectorProperty
         name="Radius"
         command="SetRadius"
         number_of_elements="1"
         default_values="60000" >
        <DoubleRangeDomain name="range"/>
        <Documentation>
          This property specifies the radius of the dataset.
        </Documentation>
      </DoubleVectorProperty>

     <IntVectorProperty
        name="ClipExtent"
        command="SetClipExtent"
        number_of_elements="6"
        default_values="-2147483647 2147483647 -2147483647 2147483647 -2147483647 2147483647" >
       <IntRangeDomain name="range"/>
       <Documentation>
         This property indicates the minimum and maximum extent in each dimension of the dataset (X, Y, and Z) to read.
       </Documentation>
     </IntVectorProperty>

     <IntVectorProperty
        name="NumberOfGhostLevels"
        command="SetNumberOfGhostLevels"
        number_of_elements="1"
        default_values="1" >
       <IntRangeDomain name="range"/>
       <Documentation>
         This property indicates the number of ghost levels to generate.
       </Documentation>
     </IntVectorProperty>

     <Hints>
      <ReaderFactory extensions="pop"
          file_description="POP Ocean Files"/>
     </Hints>
   <!-- End popreader -->
   </SourceProxy>

   <SourceProxy name="ensightMS"
                class="vtkPVEnSightMasterServerReader2"
                label="EnSight Master Server Reader">
     <Documentation
       short_help="Read parallel EnSight files."
       long_help="Reads files in EnSight's Master Server format.">
       The EnSight Master Server reader reads EnSight's parallel files. The master file ususally has a .sos extension and may point to multiple .case files. The output is a multi-block dataset.
     </Documentation>
     <StringVectorProperty
        name="CaseFileName"
        command="SetCaseFileName"
        animateable="0"
        number_of_elements="1">
        <FileListDomain name="files"/>
        <Documentation>
          This property specifies the name of the .sos file for the EnSight Master Server reader.
        </Documentation>
     </StringVectorProperty>

     <IntVectorProperty
       name="ByteOrder"
       command="SetByteOrder"
       number_of_elements="1"
       default_values="0" >
       <EnumerationDomain name="enum">
         <Entry value="0" text="BigEndian"/>
         <Entry value="1" text="LittleEndian"/>
       </EnumerationDomain>
       <Documentation>
         This property indicates the byte order of the binary file(s).
       </Documentation>
     </IntVectorProperty>

     <DoubleVectorProperty
       name="TimestepValues"
       repeatable="1"
       information_only="1">
       <TimeStepsInformationHelper/>
       <Documentation>
         Available timestep values.
       </Documentation>
     </DoubleVectorProperty>

     <DoubleVectorProperty
       name="SetTimeValue"
       command="SetTimeValue"
       number_of_elements="1"
       default_values="0.0"
       animateable="1">
       <DoubleRangeDomain name="range"/>
       <Documentation>
         This property indicates which time value to read.
       </Documentation>
     </DoubleVectorProperty>

     <StringVectorProperty
       name="CellArrayInfo"
       information_only="1">
       <ArraySelectionInformationHelper attribute_name="Cell"/>
     </StringVectorProperty>

    <StringVectorProperty
        name="CellArrayStatus"
        command="SetCellArrayStatus"
        number_of_elements="0"
        repeat_command="1"
        number_of_elements_per_command="2"
        element_types="2 0"
        information_property="CellArrayInfo"
        label="Cell Arrays">
       <ArraySelectionDomain name="array_list">
          <RequiredProperties>
             <Property name="CellArrayInfo" function="ArrayList"/>
          </RequiredProperties>
       </ArraySelectionDomain>
       <Documentation>
         This property lists which cell-centered arrays to read.
       </Documentation>
     </StringVectorProperty>

     <StringVectorProperty
        name="PointArrayInfo"
        information_only="1">
        <ArraySelectionInformationHelper attribute_name="Point"/>
     </StringVectorProperty>

     <StringVectorProperty
        name="PointArrayStatus"
        command="SetPointArrayStatus"
        number_of_elements="0"
        repeat_command="1"
        number_of_elements_per_command="2"
        element_types="2 0"
        information_property="PointArrayInfo"
        label="Point Arrays">
       <ArraySelectionDomain name="array_list">
          <RequiredProperties>
             <Property name="PointArrayInfo" function="ArrayList"/>
          </RequiredProperties>
       </ArraySelectionDomain>
       <Documentation>
         This property lists which point-centered arrays to read.
       </Documentation>
     </StringVectorProperty>

     <Hints>
      <ReaderFactory extensions="sos SOS"
          file_description="EnSight Master Server Files" />
     </Hints>
   <!-- End ensightMS -->
   </SourceProxy>

   <SourceProxy name="ImageReader"
                class="vtkMPIImageReader"
                label="Image Reader">
     <Documentation
       short_help="Read raw regular rectilinear grid data from a file."
       long_help="Reads raw regular rectilinear grid data from a file. The dimensions and type of the data must be specified.">
       The Image reader reads raw, regular, rectilinear grid (image/volume) data from a file. Because no metadata is provided, the user must specify information about the size, spacing, dimensionality, etc. about the dataset.
     </Documentation>
     <!-- Unlike most readers, we need to show the "filename" so that users
          can strip off the extension and replace it in the file pattern.
          I'm creating this "Property" hint that has an attribute to force
          whether the given property is shown in the GUI or not. -->
     <Hints>
       <Property name="FilePrefix" show="1"/>
       <ReaderFactory extensions="raw"
          file_description="Raw (binary) Files" />
     </Hints>

     <StringVectorProperty
        name="FilePrefix"
        command="SetFilePrefix"
        number_of_elements="1">
       <FileListDomain name="files"/>
       <Documentation>
         The text string contained in this property specifies the file prefix (directory plus common initial part of file name) for the raw binary uniform rectilinear grid dataset.
       </Documentation>
     </StringVectorProperty>

     <StringVectorProperty
        name="FilePattern"
        command="SetFilePattern"
        number_of_elements="1"
        default_values="%s">
        <Documentation>
          The text string contained in the property specifies the format string to determine the file names necessary for reading this dataset. In creating the filenames, %s will be replaced by the prefix and %d by a digit which represents the slice number in Z. The format string is the same as that used by printf.
        </Documentation>
     </StringVectorProperty>

     <IntVectorProperty
        name="DataScalarType"
        command="SetDataScalarType"
        number_of_elements="1"
        default_values="4" >
       <EnumerationDomain name="enum">
         <Entry value="2" text="char"/>
         <Entry value="3" text="unsigned char"/>
         <Entry value="4" text="short"/>
         <Entry value="5" text="unsigned short"/>
         <Entry value="6" text="int"/>
         <Entry value="7" text="unsigned int"/>
         <Entry value="8" text="long"/>
         <Entry value="9" text="unsigned long"/>
         <Entry value="10" text="float"/>
         <Entry value="11" text="double"/>
       </EnumerationDomain>
       <Documentation>
         The value of this property indicates the scalar type of the pixels/voxels in the file(s): short, int, float ...
       </Documentation>
     </IntVectorProperty>

     <IntVectorProperty
        name="DataByteOrder"
        command="SetDataByteOrder"
        number_of_elements="1"
        default_values="0" >
       <EnumerationDomain name="enum">
         <Entry value="0" text="BigEndian"/>
         <Entry value="1" text="LittleEndian"/>
       </EnumerationDomain>
       <Documentation>
         This property indicates the byte order of the binary file(s).
       </Documentation>
     </IntVectorProperty>

     <IntVectorProperty
        name="FileDimensionality"
        command="SetFileDimensionality"
        number_of_elements="1"
        default_values="3">
       <EnumerationDomain name="enum">
         <Entry value="2" text="2"/>
         <Entry value="3" text="3"/>
       </EnumerationDomain>
       <Documentation>
         This property indicates whether the file(s) in this dataset contain slices (2D) or volumes (3D).
       </Documentation>
     </IntVectorProperty>

      <DoubleVectorProperty
         name="DataOrigin"
         command="SetDataOrigin"
         number_of_elements="3"
         default_values="0.0 0.0 0.0" >
        <DoubleRangeDomain name="range"/>
        <Documentation>
          The coordinate contained in this property specifies the position of the point with index (0,0,0).
        </Documentation>
      </DoubleVectorProperty>

      <DoubleVectorProperty
         name="DataSpacing"
         command="SetDataSpacing"
         number_of_elements="3"
         default_values="1.0 1.0 1.0" >
        <DoubleRangeDomain name="range"/>
        <Documentation>
          This property specifies the size of a voxel in each dimension.
        </Documentation>
      </DoubleVectorProperty>

     <IntVectorProperty
        name="DataExtent"
        command="SetDataExtent"
        number_of_elements="6"
        default_values="0 0 0 0 0 0" >
       <IntRangeDomain name="range"/>
       <Documentation>
         This property specifies the minimum and maximum index values of the data in each dimension (xmin, xmax, ymin, ymax, zmin, zmax).
       </Documentation>
     </IntVectorProperty>

     <IntVectorProperty
        name="NumberOfScalarComponents"
        command="SetNumberOfScalarComponents"
        number_of_elements="1"
        default_values="1" >
       <IntRangeDomain name="range"/>
       <Documentation>
         This property specifies the number of components the scalar value at each pixel or voxel has (e.g., RGB - 3 scalar components).
       </Documentation>
     </IntVectorProperty>

     <StringVectorProperty
        name="ScalarArrayName"
        command="SetScalarArrayName"
        number_of_elements="1"
        default_values="ImageFile">
        <Documentation>
          This property contains a text string listing a name to assign to the point-centered data array read.
        </Documentation>
     </StringVectorProperty>

     <IntVectorProperty name="FileLowerLeft"
                        command="SetFileLowerLeft"
                        number_of_elements="1"
                        default_values="1">
       <BooleanDomain name="bool" />
       <Documentation>
         This property determines whether the data originates in the lower left corner (on) or the upper left corner (off). Most scientific data is written with a right-handed axes that originates in the lower left corner. However, several 2D image file formats write the image from the upper left corner.
       </Documentation>
     </IntVectorProperty>
   <!-- End ImageReader -->
   </SourceProxy>

   <SourceProxy name="NrrdReader"
                class="vtkPNrrdReader"
                label="Nrrd Reader">
     <Documentation short_help="Read raw image files with Nrrd meta data."
                    long_help="Reads raw image files with Nrrd meta data.">
       The Nrrd reader reads raw image data much like the Raw Image Reader
       except that it will also read metadata information in the Nrrd format.
       This means that the reader will automatically set information like file
       dimensions.

       There are several limitations on what type of nrrd files we can
       read. This reader only supports nrrd files in raw format. Other
       encodings like ascii and hex will result in errors. When reading in
       detached headers, this only supports reading one file that is
       detached.
     </Documentation>

     <StringVectorProperty name="FileName"
                           command="SetFileName"
                           animateable="0"
                           number_of_elements="1">
       <FileListDomain name="files" />
       <Documentation>
         The name of the file to read (or the meta data file that will
         point to the actual file).
       </Documentation>
     </StringVectorProperty>

     <IntVectorProperty name="DataVOI"
                        command="SetDataVOI"
                        label="Data VOI"
                        number_of_elements="6"
                        default_values="0 0 0 0 0 0">
       <Documentation>
         The data volume of interest (VOI). The VOI is a sub-extent of the
         data that you want loaded. Setting a VOI is useful when reading
         from a large data set and you are only interested in a small
         portion of the data. If left containing all 0's, then the reader
         will load in the entire data set.
       </Documentation>
     </IntVectorProperty>

     <Hints>
       <ReaderFactory extensions="nrrd nhdr"
                      file_description="Nrrd Raw Image Files" />
     </Hints>

   </SourceProxy> <!-- NrrdReader -->

   <SourceProxy name="PNGSeriesReader"
                          class="vtkFileSeriesReader"
                          label="PNG Series Reader"
                          si_class="vtkSIFileSeriesReaderProxy"
                          file_name_method="SetFileName">
     <Documentation
       short_help="Read a PNG file."
       long_help="Reads a PNG file into an image data.">
       The PNG reader reads PNG (Portable Network Graphics) files, and the output is a uniform rectilinear (image/volume) dataset. The default file extension is .png.
     </Documentation>

     <StringVectorProperty
        name="FileNames"
        clean_command="RemoveAllFileNames"
        command="AddFileName"
        animateable="0"
        number_of_elements="1"
        repeat_command="1">
        <FileListDomain name="files"/>
       <Documentation>
         The list of files to be read by the reader. If more than one file is specified,
         the reader will switch to file series mode in which it will pretend that it
         can support time and provide one file per time step.
       </Documentation>
     </StringVectorProperty>

     <DoubleVectorProperty
        name="TimestepValues"
        repeatable="1"
        information_only="1">
        <TimeStepsInformationHelper/>
        <Documentation>
          Available timestep values.
        </Documentation>
     </DoubleVectorProperty>

     <SubProxy>
        <Proxy name="Reader"
          proxygroup="internal_sources" proxyname="PNGReader">
        </Proxy>
      </SubProxy>

     <Hints>
        <ReaderFactory extensions="png"
          file_description="PNG Image Files" />
     </Hints>

     <!-- End PNGSeriesReader -->
   </SourceProxy>


   <SourceProxy name="JPEGSeriesReader"
                          class="vtkFileSeriesReader"
                          label="JPEG Series Reader"
                          si_class="vtkSIFileSeriesReaderProxy"
                          file_name_method="SetFileName">
     <Documentation
       short_help="Read a series of JPEG files."
       long_help="Reads a series of JPEG files into an time sequence of image datas.">
       The JPEG series reader reads JPEG files. The output is a time sequence of uniform
       rectilinear (image/volume) dataset. The default file extension is .jpg or .jpeg.
     </Documentation>

     <StringVectorProperty
        name="FileNames"
        clean_command="RemoveAllFileNames"
        command="AddFileName"
        animateable="0"
        number_of_elements="1"
        repeat_command="1">
        <FileListDomain name="files"/>
       <Documentation>
         The list of files to be read by the reader. If more than one file is specified,
         the reader will switch to file series mode in which it will pretend that it
         can support time and provide one file per time step.
       </Documentation>
     </StringVectorProperty>

     <DoubleVectorProperty
        name="TimestepValues"
        repeatable="1"
        information_only="1">
        <TimeStepsInformationHelper/>
        <Documentation>
          Available timestep values.
        </Documentation>
     </DoubleVectorProperty>

     <SubProxy>
        <Proxy name="Reader"
          proxygroup="internal_sources" proxyname="JPEGReader">
        </Proxy>
      </SubProxy>

     <Hints>
        <ReaderFactory extensions="jpg jpeg"
          file_description="JPEG Image Files" />
     </Hints>

     <!-- End JPEGSeriesReader -->
   </SourceProxy>

   <SourceProxy name="TIFFSeriesReader"
                          class="vtkFileSeriesReader"
                          label="TIFF Series Reader"
                          si_class="vtkSIFileSeriesReaderProxy"
                          file_name_method="SetFileName">
     <Documentation
       short_help="Read a series of TIFF files."
       long_help="Reads a series of TIFF files into an time sequence of image datas.">
       The TIFF series reader reads TIFF files. The output is a time sequence of uniform
       rectilinear (image/volume) dataset. The default file extension is .tif or .tiff.
     </Documentation>

     <StringVectorProperty
        name="FileNames"
        clean_command="RemoveAllFileNames"
        command="AddFileName"
        animateable="0"
        number_of_elements="1"
        repeat_command="1">
        <FileListDomain name="files"/>
       <Documentation>
         The list of files to be read by the reader. If more than one file is specified,
         the reader will switch to file series mode in which it will pretend that it
         can support time and provide one file per time step.
       </Documentation>
     </StringVectorProperty>

     <DoubleVectorProperty
        name="TimestepValues"
        repeatable="1"
        information_only="1">
        <TimeStepsInformationHelper/>
        <Documentation>
          Available timestep values.
        </Documentation>
     </DoubleVectorProperty>

     <SubProxy>
        <Proxy name="Reader"
          proxygroup="internal_sources" proxyname="TIFFReader">
        </Proxy>
      </SubProxy>

     <Hints>
        <ReaderFactory extensions="tif tiff"
          file_description="TIFF Image Files" />
     </Hints>

     <!-- End TIFFSeriesReader -->
   </SourceProxy>

   <SourceProxy name="XdmfReader"
                class="vtkXdmfReader"
                label="XDMF Reader">
     <Documentation
       short_help="Read XDMF data files."
       long_help="Reads XDMF (eXtensible Data Model and Format) files.">
       The XDMF reader reads files in XDMF format. The expected file extension
       is .xmf. Metadata is stored in the XDMF file using an XML format, and
       large attribute arrays are stored in a corresponding HDF5 file. The
       output may be unstructured grid, structured grid, or rectiliner grid.
       See http://www.xdmf.org for a description of the file format.
     </Documentation>
     <StringVectorProperty
        name="FileName"
        command="SetFileName"
        animateable="0"
        number_of_elements="1">
        <FileListDomain name="files"/>
        <Documentation>
          This property specifies the file name for the XDMF reader.
        </Documentation>
     </StringVectorProperty>

     <DoubleVectorProperty name="TimestepValues"
        information_only="1">
       <TimeStepsInformationHelper/>
     </DoubleVectorProperty>

     <StringVectorProperty
        name="PointArrayInfo"
        information_only="1">
        <ArraySelectionInformationHelper attribute_name="Point"/>
     </StringVectorProperty>

     <StringVectorProperty
        name="PointArrayStatus"
        command="SetPointArrayStatus"
        number_of_elements="0"
        repeat_command="1"
        number_of_elements_per_command="2"
        element_types="2 0"
        information_property="PointArrayInfo"
        animateable="0"
        label="Point Arrays">
       <ArraySelectionDomain name="array_list">
          <RequiredProperties>
             <Property name="PointArrayInfo" function="ArrayList"/>
          </RequiredProperties>
       </ArraySelectionDomain>
       <Documentation>
         This property lists which point-centered arrays to read.
       </Documentation>
     </StringVectorProperty>

     <StringVectorProperty
        name="CellArrayInfo"
        information_only="1">
        <ArraySelectionInformationHelper attribute_name="Cell"/>
     </StringVectorProperty>

     <StringVectorProperty
        name="CellArrayStatus"
        command="SetCellArrayStatus"
        number_of_elements="0"
        repeat_command="1"
        number_of_elements_per_command="2"
        element_types="2 0"
        information_property="CellArrayInfo"
        animateable="0"
        label="Cell Arrays">
       <ArraySelectionDomain name="array_list">
          <RequiredProperties>
             <Property name="CellArrayInfo" function="ArrayList"/>
          </RequiredProperties>
       </ArraySelectionDomain>
       <Documentation>
         This property lists which cell-centered arrays to read.
       </Documentation>
     </StringVectorProperty>

     <StringVectorProperty
        name="SetInfo"
        information_only="1">
        <ArraySelectionInformationHelper attribute_name="Set"/>
     </StringVectorProperty>

     <StringVectorProperty
        name="SetStatus"
        label="Sets"
        command="SetSetStatus"
        number_of_elements="2"
        repeat_command="1"
        number_of_elements_per_command="2"
        element_types="2 0"
        information_property="SetInfo">
       <ArraySelectionDomain name="array_list">
          <RequiredProperties>
             <Property name="SetInfo" function="ArrayList"/>
          </RequiredProperties>
       </ArraySelectionDomain>
       <Documentation>
         Select the sets to be loaded from the dataset, if any.
       </Documentation>
     </StringVectorProperty>

     <StringVectorProperty name="GridInfo"
        information_only="1"
        si_class="vtkSISILProperty"
        command="GetSIL"
        subtree="Blocks" />

    <IdTypeVectorProperty name="SILTimeStamp"
                          command="GetSILUpdateStamp"
                          number_of_elements="1"
                          default_values="0"
                          information_only="1" />
     
     <StringVectorProperty
        name="GridStatus"
        label="Grids"
        command="SetGridStatus"
        repeat_command="1"
        number_of_elements_per_command="2"
        element_types="2 0" >
       <SILDomain name="array_list" subtree="Blocks">
          <RequiredProperties>
             <Property name="GridInfo" function="ArrayList" />
             <Property name="SILTimeStamp" function="TimeStamp" />
          </RequiredProperties>
       </SILDomain>
        <Documentation>
         Controls which particular data sets to read from a file that contains
         many data sets inside a composite data set collection.
        </Documentation>
     </StringVectorProperty>

     <IntVectorProperty
        name="Stride"
        command="SetStride"
        number_of_elements="3"
        default_values="1 1 1"
        animateable="0">
        <IntRangeDomain name="range" min="1 1 1" />
        <Documentation>
         If loading structured data, this property indicate the number of
         indices per dimension (X, Y, or Z) to skip between each point included
         in this output.
        </Documentation>
     </IntVectorProperty>

     <Hints>
      <ReaderFactory extensions="xmf xdmf"
          file_description="Xdmf Reader" />
     </Hints>

     <!-- End of XdmfReader -->
   </SourceProxy>

   <SourceProxy name="ExodusIIReader"
                          class="vtkExodusFileSeriesReader"
                          si_class="vtkSIFileSeriesReaderProxy"
                          file_name_method="SetFileName">
     <Documentation
       short_help="Read Exodus II files."
       long_help="Reads an Exodus II file to produce an unstructured grid.">
        The Exodus reader loads Exodus II files and produces an unstructured grid output. The default file extensions are .g, .e, .ex2, .ex2v2, .exo, .gen, .exoII, .exii, .0, .00, .000, and .0000. The file format is described fully at: http://endo.sandia.gov/SEACAS/Documentation/exodusII.pdf.

       Each Exodus file contains a single set of points with 2-D or 3-D coordinates plus one or more blocks, sets, and maps. Block group elements (or their bounding edges or faces) of the same type together. Sets select subsets (across all the blocks in a file) of elements, sides of elements (which may be of mixed dimensionality), bounding faces of volumetric elements, or bounding edges of volumetric or areal elements. Each block or set may have multiple result variables, each of which defines a value per element, per timestep.

       The elements (cells), faces of elements (when enumerated in face blocks), edges of elements (when enumerated in edge blocks), and nodes (points) in a file may be assigned an arbitrary integer number by an element map, face map, edge map, or node map, respectively. Usually, only a single map of each type exists and is employed to assign a unique global ID to entities across multiple files which partition a large mesh for a distributed-memory calculation. However here may be multiply maps of each type and there are no constraints which force the integers to be unique.

       The connectivity of elements is constant across all of the timesteps in any single Exodus II file. However, multiple files which specify a single time-evolution of a mesh may be used to represent meshes which exhibit changes in connectivity infrequently.

     </Documentation>
     <SubProxy>
       <Proxy name="Reader"
              proxygroup="internal_sources" proxyname="ExodusIIReaderCore" />
       <ExposedProperties>
         <Property name="FilePrefix" />
         <Property name="FilePrefixInfo" />
         <Property name="FilePattern" />
         <Property name="FilePatternInfo" />
         <Property name="FileRange" />
         <Property name="FileRangeInfo" />
         <Property name="XMLFileName" />
         <Property name="XMLFileNameInfo" />
         <Property name="HasModeShapes" />
         <Property name="ModeShape" />
         <Property name="AnimateVibrations" />
         <Property name="Refresh" />
         <Property name="SILUpdateStamp" />
         <Property name="EdgeBlocks" />
         <Property name="EdgeBlocksInfo" />
         <Property name="FaceBlocks" />
         <Property name="FaceBlocksInfo" />
         <Property name="ElementBlocks" />
         <Property name="GlobalVariables" />
         <Property name="GlobalVariablesInfo" />
         <Property name="PointVariables" />
         <Property name="PointVariablesInfo" />
         <Property name="EdgeVariables" />
         <Property name="EdgeVariablesInfo" />
         <Property name="FaceVariables" />
         <Property name="FaceVariablesInfo" />
         <Property name="ElementVariables" />
         <Property name="ElementVariablesInfo" />
         <Property name="NodeMapInfo" />
         <Property name="NodeMapArrayStatus" />
         <Property name="EdgeMapInfo" />
         <Property name="EdgeMapArrayStatus" />
         <Property name="FaceMapInfo" />
         <Property name="FaceMapArrayStatus" />
         <Property name="ElementMapInfo" />
         <Property name="ElementMapArrayStatus" />
         <Property name="NodeSetInfo" />
         <Property name="NodeSetArrayStatus" />
         <Property name="SideSetInfo" />
         <Property name="SideSetArrayStatus" />
         <Property name="FaceSetInfo" />
         <Property name="FaceSetArrayStatus" />
         <Property name="EdgeSetInfo" />
         <Property name="EdgeSetArrayStatus" />
         <Property name="ElementSetInfo" />
         <Property name="ElementSetArrayStatus" />
         <Property name="ElementSetResultArrayInfo" />
         <Property name="ElementSetResultArrayStatus" />
         <Property name="SideSetResultArrayInfo" />
         <Property name="SideSetResultArrayStatus" />
         <Property name="FaceSetResultArrayInfo" />
         <Property name="FaceSetResultArrayStatus" />
         <Property name="EdgeSetResultArrayInfo" />
         <Property name="EdgeSetResultArrayStatus" />
         <Property name="NodeSetResultArrayInfo" />
         <Property name="NodeSetResultArrayStatus" />
         <Property name="ApplyDisplacements" />
         <Property name="DisplacementMagnitude" />
         <Property name="GenerateObjectIdCellArray" />
         <Property name="GenerateGlobalNodeIdArray" />
         <Property name="GenerateGlobalElementIdArray" />
         <Property name="ExodusModelMetadata" />
       </ExposedProperties>
     </SubProxy>

     <StringVectorProperty name="FileNameInfo"
                           command="GetCurrentFileName"
                           information_only="1">
       <SimpleStringInformationHelper />
     </StringVectorProperty>

     <StringVectorProperty name="FileName"
                           clean_command="RemoveAllFileNames"
                           command="AddFileName"
                           animateable="0"
                           number_of_elements="1"
                           information_property="FileNameInfo"
                           repeat_command="1">
       <FileListDomain name="files" />
       <Documentation>
         This property specifies the file name for the Exodus reader.
       </Documentation>
     </StringVectorProperty>

     <IntVectorProperty name="UseMetaFile"
                        command="SetUseMetaFile"
                        number_of_elements="1"
                        default_values="0">
       <BooleanDomain name="bool" />
       <Documentation>
         This hidden property must always be set to 1 for this proxy to work.
       </Documentation>
     </IntVectorProperty>

     <DoubleVectorProperty name="TimestepValues"
                           repeatable="1"
                           information_only="1">
       <TimeStepsInformationHelper/>
     </DoubleVectorProperty>

     <Hints>
       <!-- This property is here simply to set it. -->
       <Property name="UseMetaFile" show="0" />
       <!-- This is for special GUI control. -->
       <Property name="Refresh" show="0"/>
       <ReaderFactory
          extensions="g e ex2 ex2v2 exo gen exoII 0 00 000 0000 exii"
          filename_patterns="*e-s*"
          file_description="ExodusII"/>
     </Hints>
     <!-- ExodusIIReader -->
   </SourceProxy>

   <SourceProxy name="ExodusRestartReader"
                          class="vtkExodusFileSeriesReader"
                          label="Restarted Sim Exodus Reader"
                          si_class="vtkSIFileSeriesReaderProxy"
                          file_name_method="SetFileName">
     <Documentation short_help="Read Exodus files from simulation restarts."
                    long_help="Reads collections of Exodus output files from simulations that were restarted.">
       When a simulation that outputs exodus files is restarted, typically you get a new set of output files. When you read them in your visualization, you often want to string these file sets together as if it was one continuous dump of files. This reader allows you to specify a metadata file that will implicitly string the files together.
     </Documentation>
     <SubProxy>
       <Proxy name="Reader"
              proxygroup="internal_sources" proxyname="ExodusIIReaderCore" />
       <ExposedProperties>
         <Property name="XMLFileNameInfo" />
         <Property name="XMLFileName" />
         <Property name="HasModeShapes" />
         <Property name="ModeShape" />
         <Property name="AnimateVibrations" />
         <Property name="Refresh" />
         <Property name="SILUpdateStamp" />
         <Property name="EdgeBlocks" />
         <Property name="EdgeBlocksInfo" />
         <Property name="FaceBlocks" />
         <Property name="FaceBlocksInfo" />
         <Property name="ElementBlocks" />
         <Property name="GlobalVariables" />
         <Property name="GlobalVariablesInfo" />
         <Property name="PointVariables" />
         <Property name="PointVariablesInfo" />
         <Property name="EdgeVariables" />
         <Property name="EdgeVariablesInfo" />
         <Property name="FaceVariables" />
         <Property name="FaceVariablesInfo" />
         <Property name="ElementVariables" />
         <Property name="ElementVariablesInfo" />
         <Property name="NodeMapInfo" />
         <Property name="NodeMapArrayStatus" />
         <Property name="EdgeMapInfo" />
         <Property name="EdgeMapArrayStatus" />
         <Property name="FaceMapInfo" />
         <Property name="FaceMapArrayStatus" />
         <Property name="ElementMapInfo" />
         <Property name="ElementMapArrayStatus" />
         <Property name="NodeSetInfo" />
         <Property name="NodeSetArrayStatus" />
         <Property name="SideSetInfo" />
         <Property name="SideSetArrayStatus" />
         <Property name="FaceSetInfo" />
         <Property name="FaceSetArrayStatus" />
         <Property name="EdgeSetInfo" />
         <Property name="EdgeSetArrayStatus" />
         <Property name="ElementSetInfo" />
         <Property name="ElementSetArrayStatus" />
         <Property name="ElementSetResultArrayInfo" />
         <Property name="ElementSetResultArrayStatus" />
         <Property name="SideSetResultArrayInfo" />
         <Property name="SideSetResultArrayStatus" />
         <Property name="FaceSetResultArrayInfo" />
         <Property name="FaceSetResultArrayStatus" />
         <Property name="EdgeSetResultArrayInfo" />
         <Property name="EdgeSetResultArrayStatus" />
         <Property name="NodeSetResultArrayInfo" />
         <Property name="NodeSetResultArrayStatus" />
         <Property name="ApplyDisplacements" />
         <Property name="DisplacementMagnitude" />
         <Property name="GenerateObjectIdCellArray" />
         <Property name="GenerateGlobalNodeIdArray" />
         <Property name="GenerateGlobalElementIdArray" />
         <Property name="ExodusModelMetadata" />
       </ExposedProperties>
     </SubProxy>

     <StringVectorProperty name="FileNameInfo"
                           command="GetCurrentFileName"
                           information_only="1">
       <SimpleStringInformationHelper />
     </StringVectorProperty>

     <StringVectorProperty name="FileName"
                           animateable="0"
                           command="SetMetaFileName"
                           information_property="FileNameInfo"
                           number_of_elements="1">
       <FileListDomain name="files" />
       <Documentation>
         This points to a special metadata file that lists the output files for each restart.
       </Documentation>
     </StringVectorProperty>

     <IntVectorProperty name="UseMetaFile"
                        command="SetUseMetaFile"
                        number_of_elements="1"
                        default_values="1">
       <BooleanDomain name="bool" />
       <Documentation>
         This hidden property must always be set to 1 for this proxy to work.
       </Documentation>
     </IntVectorProperty>

     <DoubleVectorProperty name="TimestepValues"
                           repeatable="1"
                           information_only="1">
       <TimeStepsInformationHelper/>
     </DoubleVectorProperty>

     <Hints>
       <!-- This property is here simply to set it. -->
       <Property name="UseMetaFile" show="0" />
       <!-- This is for special GUI control. -->
       <Property name="Refresh" show="0"/>

      <ReaderFactory extensions="ex-timeseries"
          file_description="Metafile for restarted exodus outputs" />
     </Hints>
     <!-- ExodusRestartReader -->
   </SourceProxy>

   <SourceProxy name="AVSucdSeriesReader"
                          class="vtkFileSeriesReader"
                          label="AVS UCD Reader"
                          si_class="vtkSIFileSeriesReaderProxy"
                          file_name_method="SetFileName">
     <Documentation
       short_help="Read a dataset in AVS UCD format."
       long_help="Reads binary or ASCII files stored in AVS UCD format.">
       The AVS UCD reader reads binary or ASCII files stored in AVS UCD format.
       The default file extension is .inp. The output of this reader is
       unstructured grid. This supports reading a file series.
     </Documentation>

     <SubProxy>
       <Proxy name="Reader"
         proxygroup="internal_sources" proxyname="AVSucdReader">
       </Proxy>
       <ExposedProperties>
          <Property name="CellArrayInfo" />
          <Property name="CellArrayStatus" />
          <Property name="PointArrayInfo" />
          <Property name="PointArrayStatus" />
       </ExposedProperties>
     </SubProxy>

     <StringVectorProperty name="FileNameInfo"
        command="GetCurrentFileName"
        information_only="1" >
        <SimpleStringInformationHelper />
     </StringVectorProperty>


     <StringVectorProperty
        name="FileNames"
        clean_command="RemoveAllFileNames"
        command="AddFileName"
        animateable="0"
        number_of_elements="1"
        repeat_command="1"
        information_property="FileNameInfo" >
        <FileListDomain name="files"/>
       <Documentation>
         The list of files to be read by the reader. If more than one file is
         specified, the reader will switch to file series mode in which it will
         pretend that it can support time and provide one file per time step.
       </Documentation>
     </StringVectorProperty>

     <DoubleVectorProperty
        name="TimestepValues"
        repeatable="1"
        information_only="1">
        <TimeStepsInformationHelper/>
        <Documentation>
          Available timestep values.
        </Documentation>
     </DoubleVectorProperty>

     <Hints>
      <ReaderFactory extensions="inp"
          file_description="AVS UCD Binary/ASCII Files"/>
     </Hints>
   <!-- End of AVSucdSeriesReader -->
   </SourceProxy>

   <SourceProxy name="Facet Reader"
                class="vtkFacetReader">
     <Documentation
       short_help="Read a dataset in Facet format."
       long_help="Reads ASCII files stored in Facet format.">
       The Facet Reader reads files in Facet format: a simple ASCII file format listing point coordinates and connectivity between these points. The default file extension is .facet. The output of the Facet Reader is polygonal.
     </Documentation>
     <StringVectorProperty
        name="FileName"
        animateable="0"
        command="SetFileName"
        number_of_elements="1">
        <FileListDomain name="files"/>
        <Documentation>
          This property specifies the file name for the Facet reader.
        </Documentation>
     </StringVectorProperty>

     <Hints>
      <ReaderFactory extensions="facet"
          file_description="Facet Polygonal Data Files" />
     </Hints>
   <!-- End Facet Reader -->
   </SourceProxy>

  <SourceProxy name="TIFFReader"
                class="vtkTIFFReader"
                label="TIFF Reader">
     <Documentation
       short_help="Read a TIFF file."
       long_help="Reads a TIFF file into an image data.">
       The TIFF reader reads TIFF (Tagged Image File Format) files, and the output is a uniform rectilinear (image/volume) dataset. The default file extension is .tiff.
     </Documentation>
     <StringVectorProperty
        name="FileName"
        animateable="0"
        command="SetFileName"
        number_of_elements="1">
        <FileListDomain name="files"/>
        <Documentation>
          This property specifies the file name for the TIFF reader.
        </Documentation>
     </StringVectorProperty>

     <Hints>
      <ReaderFactory extensions="tif tiff"
          file_description="TIFF Image Files"/>
     </Hints>
   <!-- End TIFFReader -->
   </SourceProxy>

   <SourceProxy name="SESAMEReader"
                class="vtkSESAMEReader"
                label="SESAME Reader">
     <Documentation
       short_help="Read SESAME data files."
       long_help="Reads SESAME data files, producing rectilinear grids.">
       The SESAME reader reads SESAME data files, and outputs rectilinear grids. The expected file extension is .sesame.
     </Documentation>
     <StringVectorProperty
        name="FileName"
        command="SetFileName"
        animateable="0"
        number_of_elements="1">
        <FileListDomain name="files"/>
        <Documentation>
          This property specifies the file name for the SESAME reader.
        </Documentation>
     </StringVectorProperty>
     <IntVectorProperty
         name="TableId"
         command="SetTable"
         number_of_elements="1"
         default_values="-1">
         <EnumerationDomain name="enum">
           <RequiredProperties>
             <Property name="TableIds" function="Enumeration"/>
          </RequiredProperties>
         </EnumerationDomain>
         <Documentation>
           This proeprty indicates which table to read.
         </Documentation>
     </IntVectorProperty>
     <IntVectorProperty
         name="TableIds"
         command="GetTableIdsAsArray"
         information_only="1">
         <IntArrayInformationHelper />
     </IntVectorProperty>
     <StringVectorProperty
         name="TableArrayInfo"
         information_only="1">
         <ArraySelectionInformationHelper attribute_name="Table"/>
     </StringVectorProperty>

     <Hints>
      <ReaderFactory extensions="sesame"
          file_description="SESAME" />
     </Hints>
     <!-- End SESAMEReader -->
   </SourceProxy>
    <!-- Beginning of OpenFOAM Reader -->
    <SourceProxy name="OpenFOAMReader" class="vtkPOpenFOAMReader">
     <Documentation
       short_help="Read OpenFOAM data files."
       long_help="Reads OpenFOAM data files, producing multi-block dataset.">
       The OpenFOAM reader reads OpenFOAM data files and outputs multi-block datasets. Mesh information and time dependent data are supported.
        The OpenFOAM format is described fully at http://www.openfoam.com/docs/user/basic-file-format.php
     </Documentation>
      <StringVectorProperty
         name="FileName"
         command="SetFileName"
         number_of_elements="1"
         animateable="0">
        <FileListDomain name="files"/>
        <Documentation>
          This property specifies the file name for the reader.
        </Documentation>
      </StringVectorProperty>

      <Property
         name="Refresh"
         command="SetRefresh"
         is_internal="1"
         animateable="0">
        <Documentation>
          Refresh time information and selection list metadata. Useful when watching a running simulation.
        </Documentation>
      </Property>

      <IntVectorProperty
         name="CaseType"
         command="SetCaseType"
         number_of_elements="1"
         default_values="1"
         animateable="0">
        <EnumerationDomain name="enum">
          <Entry value="0" text="Decomposed Case"/>
          <Entry value="1" text="Reconstructed Case"/>
        </EnumerationDomain>
        <Documentation>
          The property indicates whether decomposed mesh or reconstructed mesh should be read
        </Documentation>
      </IntVectorProperty>

      <IntVectorProperty
         name="CreateCellToPoint"
         command="SetCreateCellToPoint"
         number_of_elements="1"
         default_values="1"
         label="Create cell-to-point filtered data"
         animateable="0">
        <BooleanDomain name="bool"/>
        <Documentation>
          Create point data from cell data. Beware: the filter does not do inverse distance weighting.
        </Documentation>
      </IntVectorProperty>

      <IntVectorProperty
         name="AddDimensionsToArrayNames"
         command="SetAddDimensionsToArrayNames"
         number_of_elements="1"
         default_values="0"
         label="Add dimensional units to array names"
         animateable="0">
        <BooleanDomain name="bool"/>
        <Documentation>
          Read dimensional units from field data and add them to array names as human-readable string.
        </Documentation>
      </IntVectorProperty>

      <DoubleVectorProperty
         name="TimestepValues"
         repeatable="1"
         information_only="1">
        <TimeStepsInformationHelper/>
      </DoubleVectorProperty>

      <StringVectorProperty
         name="PatchArrayInfo"
         information_only="1">
        <ArraySelectionInformationHelper attribute_name="Patch"/>
      </StringVectorProperty>

      <StringVectorProperty
         name="MeshRegions"
         command="SetPatchArrayStatus"
         number_of_elements="0"
         repeat_command="1"
         number_of_elements_per_command="2"
         element_types="2 0"
         information_property="PatchArrayInfo"
         animateable="0">
        <ArraySelectionDomain name="array_list">
          <RequiredProperties>
            <Property name="PatchArrayInfo" function="ArrayList"/>
          </RequiredProperties>
        </ArraySelectionDomain>
      </StringVectorProperty>

      <StringVectorProperty
         name="CellArrayInfo"
         information_only="1">
        <ArraySelectionInformationHelper attribute_name="Cell"/>
      </StringVectorProperty>
      <StringVectorProperty
         name="CellArrays"
         command="SetCellArrayStatus"
         number_of_elements="0"
         repeat_command="1"
         number_of_elements_per_command="2"
         element_types="2 0"
         information_property="CellArrayInfo"
         animateable="0">
        <ArraySelectionDomain name="array_list">
          <RequiredProperties>
            <Property name="CellArrayInfo" function="ArrayList"/>
          </RequiredProperties>
        </ArraySelectionDomain>
      </StringVectorProperty>

      <StringVectorProperty
         name="PointArrayInfo"
         information_only="1">
        <ArraySelectionInformationHelper attribute_name="Point"/>
      </StringVectorProperty>
      <StringVectorProperty
         name="PointArrays"
         command="SetPointArrayStatus"
         number_of_elements="0"
         repeat_command="1"
         number_of_elements_per_command="2"
         element_types="2 0"
         information_property="PointArrayInfo"
         animateable="0">
        <ArraySelectionDomain name="array_list">
          <RequiredProperties>
            <Property name="PointArrayInfo" function="ArrayList"/>
          </RequiredProperties>
        </ArraySelectionDomain>
      </StringVectorProperty>

      <StringVectorProperty
         name="LagrangianArrayInfo"
         information_only="1">
        <ArraySelectionInformationHelper attribute_name="Lagrangian"/>
      </StringVectorProperty>
      <StringVectorProperty
         name="LagrangianArrays"
         command="SetLagrangianArrayStatus"
         number_of_elements="0"
         repeat_command="1"
         number_of_elements_per_command="2"
         element_types="2 0"
         information_property="LagrangianArrayInfo"
         animateable="0">
        <ArraySelectionDomain name="array_list">
          <RequiredProperties>
            <Property name="LagrangianArrayInfo" function="ArrayList"/>
          </RequiredProperties>
        </ArraySelectionDomain>
      </StringVectorProperty>

      <IntVectorProperty
         name="CacheMesh"
         command="SetCacheMesh"
         number_of_elements="1"
         default_values="1"
         label="Cache mesh"
         animateable="0">
        <BooleanDomain name="bool"/>
        <Documentation>
          Cache the OpenFOAM mesh between GUI selection changes.
        </Documentation>
      </IntVectorProperty>

      <IntVectorProperty
         name="DecomposePolyhedra"
         command="SetDecomposePolyhedra"
         number_of_elements="1"
         default_values="1"
         label="Decompose polyhedra"
         animateable="0">
        <BooleanDomain name="bool"/>
        <Documentation>
          Decompose polyhedra into tetrahedra and pyramids.
        </Documentation>
      </IntVectorProperty>

      <IntVectorProperty
         name="ListTimeStepsByControlDict"
         command="SetListTimeStepsByControlDict"
         number_of_elements="1"
         default_values="0"
         label="List timesteps according to controlDict"
         animateable="0">
        <BooleanDomain name="bool"/>
        <Documentation>
          List time directories listed according to the settings in controlDict.
        </Documentation>
      </IntVectorProperty>

      <IntVectorProperty
         name="PositionsIsIn13Format"
         command="SetPositionsIsIn13Format"
         number_of_elements="1"
         default_values="0"
         label="Lagrangian positions are in OF 1.3 binary format"
         animateable="0">
        <BooleanDomain name="bool"/>
        <Documentation>
          Set if Lagrangian positions files are in OpenFOAM 1.3 binary format.
        </Documentation>
      </IntVectorProperty>

      <IntVectorProperty
         name="ReadZones"
         command="SetReadZones"
         number_of_elements="1"
         default_values="0"
         label="Read zones"
         animateable="0">
        <BooleanDomain name="bool"/>
        <Documentation>
          Read point/face/cell-Zones?
        </Documentation>
      </IntVectorProperty>

      <Hints>
        <ReaderFactory extensions="foam"
           file_description="OpenFOAM" />
        <Property name="FileName" show="1"/>
        <Property name="Refresh" show="0"/>
      </Hints>

    </SourceProxy>
    <!-- End of OpenFOAM Reader -->

    <!-- Beginning of MFIX Reader -->
    <SourceProxy name="MFIXReader" class="vtkMFIXReader">
      <Documentation
        short_help="Reads a dataset in MFIX file format."
        long_help="Reads a dataset in MFIX file format." >
        vtkMFIXReader creates an unstructured grid dataset. It reads a restart
        file and a set of sp files. The restart file contains the mesh
        information. MFIX meshes are either cylindrical or rectilinear, but
        this reader will convert them to an unstructured grid. The sp files
        contain transient data for the cells. Each sp file has one or more
        variables stored inside it.
      </Documentation>
      <StringVectorProperty name="FileName"
                            command="SetFileName"
                            animateable="0"
                            number_of_elements="1">
        <FileListDomain name="files"/>
        <Documentation>
          Set the file name for the MFIX reader.
        </Documentation>
      </StringVectorProperty>

      <StringVectorProperty name="CellArrayInfo"
                           information_only="1">
        <ArraySelectionInformationHelper attribute_name="Cell"/>
      </StringVectorProperty>

      <StringVectorProperty name="CellArrayStatus"
                            command="SetCellArrayStatus"
                            number_of_elements="0"
                            repeat_command="1"
                            number_of_elements_per_command="2"
                            element_types="2 0"
                            information_property="CellArrayInfo"
                            label="Cell Arrays">
        <ArraySelectionDomain name="array_list">
          <RequiredProperties>
            <Property name="CellArrayInfo" function="ArrayList"/>
          </RequiredProperties>
        </ArraySelectionDomain>
        <Documentation>
          Select which cell-centered arrays to read.
        </Documentation>
      </StringVectorProperty>

      <DoubleVectorProperty
          name="TimestepValues"
          repeatable="1"
          information_only="1">
       <TimeStepsInformationHelper/>
      </DoubleVectorProperty>

     <Hints>
      <ReaderFactory extensions="RES"
          file_description="MFIX Unstructured Grid Files" />
     </Hints>
    </SourceProxy>
    <!-- End of MFIX Reader -->

   <!-- Beginning of FLUENT Reader -->
   <SourceProxy name="FLUENTReader"
                class="vtkFLUENTReader">
     <Documentation
        short_help="Reads a dataset in Fluent file format."
        long_help="Reads a dataset in Fluent file format." >
        FLUENTReader creates an unstructured grid dataset. It reads .cas and
        .dat files stored in FLUENT native format.
     </Documentation>
     <StringVectorProperty name="FileName"
                           command="SetFileName"
                           animateable="0"
                           number_of_elements="1">
       <FileListDomain name="files"/>
       <Documentation>
         Set the file  name for the FLUENT reader.
       </Documentation>
     </StringVectorProperty>
     <StringVectorProperty name="CellArrayInfo"
                           information_only="1">
       <ArraySelectionInformationHelper attribute_name="Cell"/>
     </StringVectorProperty>
     <StringVectorProperty name="CellArrayStatus"
                           command="SetCellArrayStatus"
                           number_of_elements="0"
                           repeat_command="1"
                           number_of_elements_per_command="2"
                           element_types="2 0"
                           information_property="CellArrayInfo"
                           label="Cell Arrays">
       <ArraySelectionDomain name="array_list">
         <RequiredProperties>
           <Property name="CellArrayInfo"
                     function="ArrayList"/>
         </RequiredProperties>
       </ArraySelectionDomain>
       <Documentation>
         Select which cell-centered arrays to read.
       </Documentation>
     </StringVectorProperty>

     <Hints>
      <ReaderFactory extensions="cas"
          file_description="Fluent Case Files" />
     </Hints>
   </SourceProxy>
   <!-- End of FLUENT Reader -->

   <!-- Beginning of ProStar Reader -->
   <SourceProxy
      name="ProStarReader"
      class="vtkProStarReader"
      label="proSTAR (STARCD) Reader">
     <Documentation
        short_help="Reads geometry in proSTAR (STARCD) file format."
        long_help="Reads geometry in proSTAR (STARCD) file format." >
       ProStarReader creates an unstructured grid dataset.
       It reads .cel/.vrt files stored in proSTAR (STARCD) ASCII format.
     </Documentation>
     <StringVectorProperty
        name="FileName"
        command="SetFileName"
        animateable="0"
        number_of_elements="1">
       <FileListDomain name="files"/>
       <Documentation>
         Set the file name for the proSTAR (STARCD) reader.
       </Documentation>
     </StringVectorProperty>
     <DoubleVectorProperty
        name="ScaleFactor"
        command="SetScaleFactor"
        animateable="0"
        default_values="1"
        number_of_elements="1">
       <Documentation>
         Scaling factor for the points
       </Documentation>
      </DoubleVectorProperty>
     <Hints>
       <ReaderFactory extensions="cel vrt"
           file_description="proSTAR Files" />
     </Hints>
   </SourceProxy>
   <!-- End of ProStar Reader -->

   <!-- Beginning of LSDyna Reader -->
   <SourceProxy name="LSDynaReader" class="vtkLSDynaReader">
     <Documentation
      short_help="Read LS-Dyna databases (d3plot)."
      long_help="Reads LS-Dyna databases (d3plot)." >
      This reader reads LS-Dyna databases.
     </Documentation>

     <StringVectorProperty name="FileName"
                           command="SetFileName"
                           animateable="0"
                           number_of_elements="1">
        <FileListDomain name="files"/>
        <Documentation>
          Set the file name for the LSDyna reader.
        </Documentation>
     </StringVectorProperty>

     <DoubleVectorProperty
         name="TimestepValues"
         repeatable="1"
         information_only="1">
       <TimeStepsInformationHelper/>
     </DoubleVectorProperty>

     <StringVectorProperty name="SolidArrayInfo" information_only="1">
        <ArraySelectionInformationHelper attribute_name="Solid"/>
     </StringVectorProperty>

     <StringVectorProperty name="SolidArrayStatus"
                           command="SetSolidArrayStatus"
                           number_of_elements="2"
                           repeat_command="1"
                           number_of_elements_per_command="2"
                           element_types="2 0"
                           information_property="SolidArrayInfo"
                           label="Solid Arrays">
       <ArraySelectionDomain name="array_list">
          <RequiredProperties>
             <Property name="SolidArrayInfo" function="ArrayList"/>
          </RequiredProperties>
       </ArraySelectionDomain>
       <Documentation>
         Select which solid arrays to read.
       </Documentation>
     </StringVectorProperty>

     <StringVectorProperty name="ThickShellArrayInfo" information_only="1">
        <ArraySelectionInformationHelper attribute_name="ThickShell"/>
     </StringVectorProperty>

     <StringVectorProperty name="ThickShellArrayStatus"
                           command="SetThickShellArrayStatus"
                           number_of_elements="2"
                           repeat_command="1"
                           number_of_elements_per_command="2"
                           element_types="2 0"
                           information_property="ThickShellArrayInfo"
                           label="Thick Shell Arrays">
       <ArraySelectionDomain name="array_list">
          <RequiredProperties>
             <Property name="ThickShellArrayInfo" function="ArrayList"/>
          </RequiredProperties>
       </ArraySelectionDomain>
       <Documentation>
         Select which thick shell arrays to read.
       </Documentation>
     </StringVectorProperty>

     <StringVectorProperty name="ShellArrayInfo" information_only="1">
        <ArraySelectionInformationHelper attribute_name="Shell"/>
     </StringVectorProperty>

     <StringVectorProperty name="ShellArrayStatus"
                           command="SetShellArrayStatus"
                           number_of_elements="2"
                           repeat_command="1"
                           number_of_elements_per_command="2"
                           element_types="2 0"
                           information_property="ShellArrayInfo"
                           label="Shell Arrays">
       <ArraySelectionDomain name="array_list">
          <RequiredProperties>
             <Property name="ShellArrayInfo" function="ArrayList"/>
          </RequiredProperties>
       </ArraySelectionDomain>
       <Documentation>
         Select which shell arrays to read.
       </Documentation>
     </StringVectorProperty>

     <StringVectorProperty name="RigidBodyArrayInfo" information_only="1">
        <ArraySelectionInformationHelper attribute_name="RigidBody"/>
     </StringVectorProperty>

     <StringVectorProperty name="RigidBodyArrayStatus"
                           command="SetRigidBodyArrayStatus"
                           number_of_elements="2"
                           repeat_command="1"
                           number_of_elements_per_command="2"
                           element_types="2 0"
                           information_property="RigidBodyArrayInfo"
                           label="Rigid Body Arrays">
       <ArraySelectionDomain name="array_list">
          <RequiredProperties>
             <Property name="RigidBodyArrayInfo" function="ArrayList"/>
          </RequiredProperties>
       </ArraySelectionDomain>
       <Documentation>
         Select which rigid body arrays to load.
       </Documentation>
     </StringVectorProperty>

     <StringVectorProperty name="RoadSurfaceArrayInfo" information_only="1">
        <ArraySelectionInformationHelper attribute_name="RoadSurface"/>
     </StringVectorProperty>

     <StringVectorProperty name="RoadSurfaceArrayStatus"
                           command="SetRoadSurfaceArrayStatus"
                           number_of_elements="2"
                           repeat_command="1"
                           number_of_elements_per_command="2"
                           element_types="2 0"
                           information_property="RoadSurfaceArrayInfo"
                           label="Road Surface Arrays">
       <ArraySelectionDomain name="array_list">
          <RequiredProperties>
             <Property name="RoadSurfaceArrayInfo" function="ArrayList"/>
          </RequiredProperties>
       </ArraySelectionDomain>
       <Documentation>
         Select which road surface arrays to read.
       </Documentation>
     </StringVectorProperty>

     <StringVectorProperty name="BeamArrayInfo" information_only="1">
        <ArraySelectionInformationHelper attribute_name="Beam"/>
     </StringVectorProperty>

     <StringVectorProperty name="BeamArrayStatus"
                           command="SetBeamArrayStatus"
                           number_of_elements="2"
                           repeat_command="1"
                           number_of_elements_per_command="2"
                           element_types="2 0"
                           information_property="BeamArrayInfo"
                           label="Beam Arrays">
       <ArraySelectionDomain name="array_list">
          <RequiredProperties>
             <Property name="BeamArrayInfo" function="ArrayList"/>
          </RequiredProperties>
       </ArraySelectionDomain>
       <Documentation>
         Select which beam arrays to read.
       </Documentation>
     </StringVectorProperty>

     <StringVectorProperty name="ParticleArrayInfo" information_only="1">
        <ArraySelectionInformationHelper attribute_name="Particle"/>
     </StringVectorProperty>

     <StringVectorProperty name="ParticleArrayStatus"
                           command="SetParticleArrayStatus"
                           number_of_elements="2"
                           repeat_command="1"
                           number_of_elements_per_command="2"
                           element_types="2 0"
                           information_property="ParticleArrayInfo"
                           label="Particle Arrays">
       <ArraySelectionDomain name="array_list">
          <RequiredProperties>
             <Property name="ParticleArrayInfo" function="ArrayList"/>
          </RequiredProperties>
       </ArraySelectionDomain>
       <Documentation>
         Select which particle arrays to read.
       </Documentation>
     </StringVectorProperty>

     <StringVectorProperty name="PointArrayInfo" information_only="1">
        <ArraySelectionInformationHelper attribute_name="Point"/>
     </StringVectorProperty>

     <StringVectorProperty name="PointArrayStatus"
                           command="SetPointArrayStatus"
                           number_of_elements="2" repeat_command="1"
                           number_of_elements_per_command="2"
                           element_types="2 0"
                           information_property="PointArrayInfo"
                           label="Point Arrays">
       <ArraySelectionDomain name="array_list">
          <RequiredProperties>
             <Property name="PointArrayInfo" function="ArrayList"/>
          </RequiredProperties>
       </ArraySelectionDomain>
       <Documentation>
         Select which point-centered arrays to read.
       </Documentation>
     </StringVectorProperty>

     <StringVectorProperty name="PartArrayInfo" information_only="1">
        <ArraySelectionInformationHelper attribute_name="Part"/>
     </StringVectorProperty>

     <StringVectorProperty name="PartArrayStatus"
                           command="SetPartArrayStatus"
                           number_of_elements="2"
                           repeat_command="1"
                           number_of_elements_per_command="2"
                           element_types="2 0"
                           information_property="PartArrayInfo"
                           label="Part Arrays">
       <ArraySelectionDomain name="array_list">
          <RequiredProperties>
             <Property name="PartArrayInfo" function="ArrayList"/>
          </RequiredProperties>
       </ArraySelectionDomain>
       <Documentation>
         Select which part arrays to read.
       </Documentation>
     </StringVectorProperty>

     <IntVectorProperty name="DeformedMesh"
                        command="SetDeformedMesh"
                        number_of_elements="1"
                        default_values="1" >
       <BooleanDomain name="bool"/>
       <Documentation>
         Should the mesh be deformed over time (if the Deflection node array is set to load)?
       </Documentation>
     </IntVectorProperty>

     <IntVectorProperty name="RemoveDeletedCells"
                        command="SetRemoveDeletedCells"
                        number_of_elements="1"
                        default_values="1" >
       <BooleanDomain name="bool"/>
       <Documentation>
         Should cells that have been deleted (failed structurally, for example) be removed from the mesh?
       </Documentation>
     </IntVectorProperty>

     <IntVectorProperty name="SplitByMaterialId"
                        command="SetSplitByMaterialId"
                        number_of_elements="1"
                        default_values="0"
                        label="Split by Material Id">
       <BooleanDomain name="bool"/>
       <Documentation>
         Should each material have its own mesh, or should there be one mesh for all materials?
       </Documentation>
     </IntVectorProperty>

     <Hints>
      <ReaderFactory extensions="k lsdyna d3plot"
        filename_patterns="d3plot"
        file_description="LSDyna" />
     </Hints>

   </SourceProxy>
   <!-- End of LSDyna Reader -->

    <SourceProxy name="netCDFReader"
                           class="vtkFileSeriesReader"
                           label="NetCDF Reader"
                           si_class="vtkSIFileSeriesReaderProxy"
                           file_name_method="SetFileName">
      <Documentation short_help="Read regular arrays from netCDF files."
                     long_help="Reads regular arrays from netCDF files. Will also read any topological information specified by the COARDS and CF conventions.">
        Reads arrays from netCDF files into structured VTK data sets. In
        the absence of any other information, the files will be read as
        image data. This reader will also look for meta information
        specified by the CF convention that specify things like topology
        and time. This information can cause the output to be a nonuniform
        rectilinear grid or curvilinear (structured) grid. Details on the
        CF convention can be found at http://cf-pcmdi.llnl.gov/. It should
        be noted that the CF convention is a superset of the COARDS
        convention, so COARDS conventions will also be recognized.
      </Documentation>

      <StringVectorProperty name="FileName"
                            clean_command="RemoveAllFileNames"
                            command="AddFileName"
                            animateable="0"
                            number_of_elements="1"
                            repeat_command="1">
        <FileListDomain name="files" />
        <Documentation>
          The name of the files to load.
        </Documentation>
      </StringVectorProperty>

      <SubProxy>
        <Proxy name="Reader"
               proxygroup="internal_sources" proxyname="netCDFReaderCore" />
        <ExposedProperties>
          <Property name="DimensionInfo" />
          <Property name="Dimensions" />
          <Property name="VariableDimensionInfo" />
          <Property name="VariableArrayInfo" />
          <Property name="SphericalCoordinates" />
          <Property name="VerticalScale" />
          <Property name="VerticalBias" />
          <Property name="ReplaceFillValueWithNan" />
          <Property name="OutputType" />
        </ExposedProperties>
      </SubProxy>

      <DoubleVectorProperty name="TimestepValues"
                            repeatable="1"
                            information_only="1">
        <TimeStepsInformationHelper />
        <Documentation>
          This magic property sends time information to the animation
          panel. ParaView will then automatically set up the animation to
          visit the time steps defined in the file.
        </Documentation>
      </DoubleVectorProperty>

     <Hints>
      <ReaderFactory extensions="ncdf nc"
          file_description="netCDF files generic and CF conventions" />
     </Hints>

    </SourceProxy> <!-- netCDFReader -->

    <SourceProxy name="SLACReader"
                 class="vtkPSLACReader"
                 label="SLAC Data Reader">
      <Documentation>
        A reader for a data format used by Omega3p, Tau3p, and several
        other tools used at the Standford Linear Accelerator Center (SLAC).
        The underlying format uses netCDF to store arrays, but also imposes
        several conventions to form an unstructured grid of elements.
      </Documentation>

      <OutputPort name="External Surface" index="0" />
      <OutputPort name="Entire Volume" index="1" />

      <StringVectorProperty name="MeshFileName"
                            command="SetMeshFileName"
                            animateable="0"
                            number_of_elements="1">
        <FileListDomain name="files" />
        <Documentation>
          The name of the mesh file to load.
        </Documentation>
      </StringVectorProperty>

      <StringVectorProperty name="ModeFileName"
                            clean_command="RemoveAllModeFileNames"
                            command="AddModeFileName"
                            animateable="0"
                            number_of_elements="1"
                            repeat_command="1">
        <FileListDomain name="files" />
        <Documentation>
          The name of the mode files to load. The points in the mode file should be the same as the mesh file.
        </Documentation>
      </StringVectorProperty>

      <IntVectorProperty name="ReadInternalVolume"
                         command="SetReadInternalVolume"
                         animateable="0"
                         number_of_elements="1"
                         default_values="0">
        <BooleanDomain name="bool" />
        <Documentation>
          If on, read the internal volume of the data set.
        </Documentation>
      </IntVectorProperty>

      <IntVectorProperty name="ReadExternalSurface"
                         command="SetReadExternalSurface"
                         animateable="0"
                         number_of_elements="1"
                         default_values="1">
        <BooleanDomain name="bool" />
        <Documentation>
          If on, read the external surfaces of the data set.
        </Documentation>
      </IntVectorProperty>

      <IntVectorProperty name="ReadMidpoints"
                         command="SetReadMidpoints"
                         animateable="0"
                         number_of_elements="1"
                         default_values="0">
        <BooleanDomain name="bool" />
        <Documentation>
          If on, reads midpoint information for external surfaces and builds
          quadratic surface triangles.
        </Documentation>
      </IntVectorProperty>

<!--       <StringVectorProperty name="VariableArrayStatus" -->
<!--                             command="SetVariableArrayStatus" -->
<!--                             number_of_elements="0" -->
<!--                             repeat_command="1" -->
<!--                             number_of_elements_per_command="2" -->
<!--                             element_types="2 0" -->
<!--                             information_property="VariableArrayInfo" -->
<!--                             label="Variables"> -->
<!--         <ArraySelectionDomain name="array_list"> -->
<!--           <RequiredProperties> -->
<!--             <Property name="VariableArrayInfo" function="ArrayList" /> -->
<!--           </RequiredProperties> -->
<!--         </ArraySelectionDomain> -->
<!--         <Documentation> -->
<!--           This property lists which mode variables to load from the mode file. -->
<!--         </Documentation> -->
<!--       </StringVectorProperty> -->

      <DoubleVectorProperty name="TimestepValues"
                            repeatable="1"
                            information_only="1">
        <TimeStepsInformationHelper />
        <Documentation>
          This magic property sends time information to the animation
          panel. ParaView will then automatically set up the animation to
          visit the time steps defined in the file.
        </Documentation>
      </DoubleVectorProperty>

      <DoubleVectorProperty name="TimeRange" information_only="1">
        <TimeRangeInformationHelper/>
        <Documentation>
          This magic property sends time range information to the animation
          panel. ParaView uses this information to set the range of time
          for the animation. This property is important for when there are
          no timesteps but you still want to give ParaView a range of
          values to use.
        </Documentation>
      </DoubleVectorProperty>

     <Hints>
      <ReaderFactory extensions="ncdf nc"
          file_description="SLAC Mesh Files" />
        <!-- Usually you want to look at the external surface, but the
             volume is there for visualizing the internal fields. -->
        <OutputPort index="1" visible="0" />
     </Hints>
    </SourceProxy> <!-- SLACReader -->

    <SourceProxy name="SLACParticleReader"
                           class="vtkFileSeriesReader"
                           label="SLAC Particle Data Reader"
                           si_class="vtkSIFileSeriesReaderProxy"
                           file_name_method="SetFileName">
      <Documentation>
        The SLAC Particle data reader.
      </Documentation>

      <SubProxy>
        <Proxy name="Reader"
               proxygroup="internal_sources" proxyname="SLACParticleReaderCore">
        </Proxy>

      </SubProxy>

      <StringVectorProperty name="FileName"
                            clean_command="RemoveAllFileNames"
                            command="AddFileName"
                            animateable="0"
                            number_of_elements="1"
                            repeat_command="1">
        <FileListDomain name="files" />
        <Documentation>
          A list of files to be read in a time series.
        </Documentation>
      </StringVectorProperty>

      <DoubleVectorProperty name="TimestepValues"
                            repeatable="1"
                            information_only="1">
        <TimeStepsInformationHelper />
        <Documentation>
          Available timestep values.
        </Documentation>
      </DoubleVectorProperty>

     <Hints>
       <ReaderFactory extensions="ncdf netcdf"
          file_description="SLAC Particle Files" />
     </Hints>
    </SourceProxy> <!-- SLACParticleReader -->

   <SourceProxy name="CSVReader"
                          class="vtkFileSeriesReader"
                          label="CSV Reader"
                          si_class="vtkSIFileSeriesReaderProxy"
                          file_name_method="SetFileName">
      <Documentation
        short_help="Read a comma-separated values file."
        long_help="Reads a comma-separated values file into a 1D rectilinear grid.">
        The CSV reader reads a comma-separated values file into a 1D rectilinear
        grid. If the file was saved using the CSVWriter, then the rectilinear
        grid's points and point data can be restored as well as the cell data.
        Otherwise all the data in the CSV file is treated as cell data. The
        default file extension is .csv.
        This can read file series as well.
      </Documentation>

      <StringVectorProperty name="FileName"
                            clean_command="RemoveAllFileNames"
                            command="AddFileName"
                            animateable="0"
                            number_of_elements="1"
                            repeat_command="1"
                            information_property="FileNameInfo">
        <FileListDomain name="files"/>
        <Documentation>
          The list of files to be read by the reader. Each file is expected to be
          a csv file. If more than one file is specified, the reader will switch to
          file series mode in which it will pretend that it can support time and
          provide one file per time step.
        </Documentation>
      </StringVectorProperty>

     <StringVectorProperty name="FileNameInfo"
        command="GetCurrentFileName"
        information_only="1" >
        <SimpleStringInformationHelper />
     </StringVectorProperty>


      <DoubleVectorProperty name="TimestepValues"
                            repeatable="1"
                            information_only="1">
        <TimeStepsInformationHelper/>
        <Documentation>
          Available timestep values.
        </Documentation>
      </DoubleVectorProperty>

      <SubProxy>
        <Proxy name="Reader"
               proxygroup="internal_sources"
               proxyname="CSVReaderCore">
        </Proxy>
        <ExposedProperties>
          <Property name="DetectNumericColumns" />
          <Property name="UseStringDelimiter" />
          <Property name="HaveHeaders" />
          <Property name="FieldDelimiterCharacters" />
          <Property name="MergeConsecutiveDelimiters" />
        </ExposedProperties>
      </SubProxy>

     <Hints>
        <!-- View can be used to specify the preferred view for the proxy -->
        <View type="SpreadSheetView" />
        <ReaderFactory extensions="csv"
          file_description="Comma-separated-values" />
     </Hints>
      <!-- End of CSVReader -->
   </SourceProxy>

   <SourceProxy name="ParticleReader"
                          class="vtkFileSeriesReader"
                          label="Particles Reader"
                          si_class="vtkSIFileSeriesReaderProxy"
                          file_name_method="SetFileName">
      <Documentation short_help="Read particle data."
        long_help="Reads particle data.">
        vtkParticleReader reads either a binary or a text file of particles.
        Each particle can have associated with it an optional scalar value. So
        the format is: x, y, z, scalar (all floats or doubles). The text file
        can consist of a comma delimited set of values. In most cases
        vtkParticleReader can automatically determine whether the file is text
        or binary. The data can be either float or double. Progress updates
        are provided. With respect to binary files, random access into the file
        to read pieces is supported.
      </Documentation>

      <StringVectorProperty name="FileName"
                            clean_command="RemoveAllFileNames"
                            command="AddFileName"
                            animateable="0"
                            number_of_elements="1"
                            repeat_command="1"
                            information_property="FileNameInfo">
        <FileListDomain name="files"/>
        <Documentation>
          The list of files to be read by the reader.
        </Documentation>
      </StringVectorProperty>

      <StringVectorProperty name="FileNameInfo"
        command="GetCurrentFileName"
        information_only="1" >
        <SimpleStringInformationHelper />
      </StringVectorProperty>


      <DoubleVectorProperty name="TimestepValues"
                            repeatable="1"
                            information_only="1">
        <TimeStepsInformationHelper/>
        <Documentation>
          Available timestep values.
        </Documentation>
      </DoubleVectorProperty>

      <SubProxy>
        <Proxy name="Reader"
               proxygroup="internal_sources"
               proxyname="ParticleReaderCore">
        </Proxy>
        <ExposedProperties>
          <Property name="ByteOrder" />
          <Property name="HasScalar" />
          <Property name="FileType" />
          <Property name="DataType" />
        </ExposedProperties>
      </SubProxy>

     <Hints>
        <ReaderFactory extensions="particles"
          file_description="VTK Particle Files" />
     </Hints>

      <!-- End of CSVReader -->
   </SourceProxy>

   <SourceProxy name="TecplotReader"
                          class="vtkFileSeriesReader"
                          label="Tecplot Reader"
                          si_class="vtkSIFileSeriesReaderProxy"
                          file_name_method="SetFileName">
     <Documentation
       short_help="Read files in the Tecplot ASCII file format."
       long_help="Reads files in the Tecplot ASCII file format.">
       The Tecplot reader extracts multiple zones (blocks) of data from a Tecplot ASCII file, in which a zone is stored in either point packing mode (i.e., tuple-based, with only point data supported) or block packing mode (i.e., component-based, with point data and cell data supported). The output of the reader is a vtkMultiBlockDataset, of which each block is either a vtkStructuredGrid or a vtkUnstructuredGrid. This supports reading a file series.
     </Documentation>

     <StringVectorProperty
        name="FileNames"
        clean_command="RemoveAllFileNames"
        command="AddFileName"
        animateable="0"
        number_of_elements="1"
        repeat_command="1"
        information_property="FileNameInfo" >
        <FileListDomain name="files"/>
       <Documentation>
           The list of files to be read by the reader.
       </Documentation>
     </StringVectorProperty>

     <StringVectorProperty name="FileNameInfo"
        command="GetCurrentFileName"
        information_only="1" >
        <SimpleStringInformationHelper />
     </StringVectorProperty>

     <DoubleVectorProperty
        name="TimestepValues"
        repeatable="1"
        information_only="1">
        <TimeStepsInformationHelper/>
        <Documentation>
          Available timestep values.
        </Documentation>
     </DoubleVectorProperty>

     <SubProxy>
       <Proxy name="Reader"
         proxygroup="internal_sources" proxyname="TecplotReaderCore">
       </Proxy>
       <ExposedProperties>
          <Property name="DataArrayInfo" />
          <Property name="DataArrayStatus" />
       </ExposedProperties>
     </SubProxy>

     <Hints>
        <ReaderFactory extensions="tec TEC Tec tp TP"
          file_description="Tecplot Files" />
     </Hints>

   <!-- End TecplotReader -->
   </SourceProxy>

   <!-- Start vtkVPICReader -->
   <SourceProxy name="VPICReader"
                class="vtkVPICReader"
                label="VPIC Reader">

     <Documentation
       short_help="Read VPIC simulation files."
       long_help="Reads distributed VPIC files into an ImageData.">
       VPIC is a 3D kinetic plasma particle-in-cell simulation. The input file (.vpc) opened by the VPIC reader is an ASCII description of the data files which are written one file per processor, per category and per time step. These are arranged in subdirectories per category (field data and hydrology data) and then in time step subdirectories.
     </Documentation>

     <StringVectorProperty
        name="FileName"
        command="SetFileName"
        animateable="0"
        number_of_elements="1">
        <FileListDomain name="files"/>
        <Documentation>
        ASCII .vpc file describes locations of data files, grid sizes, time step sizes and type and order of data written to the files.
        </Documentation>
     </StringVectorProperty>

     <StringVectorProperty
        name="PointArrayInfo"
        information_only="1">
        <ArraySelectionInformationHelper attribute_name="Point"/>
     </StringVectorProperty>

     <StringVectorProperty
        name="PointArrayStatus"
        command="SetPointArrayStatus"
        number_of_elements="2"
        repeat_command="1"
        number_of_elements_per_command="2"
        element_types="2 0"
        information_property="PointArrayInfo"
        label="Point Arrays">
        <ArraySelectionDomain name="array_list" >
          <RequiredProperties>
             <Property name="PointArrayInfo" function="ArrayList"/>
          </RequiredProperties>
        </ArraySelectionDomain>
        <Documentation>
        Variables written to the data files are described in the .vpc file and are presented for selection. Only selected variables are loaded for a time step.
        </Documentation>
     </StringVectorProperty>

     <DoubleVectorProperty
         name="TimestepValues"
         repeatable="1"
         information_only="1">
       <TimeStepsInformationHelper/>
     </DoubleVectorProperty>

     <IntVectorProperty
         name="SetStride"
         label="Stride"
         command="SetStride"
         number_of_elements="3"
         default_values="1 1 1">
         <IntRangeDomain name="range" min="1"/>
         <Documentation>
         VPIC data may be very large and not all is needed for effective visualization. Setting the stride selects every nth data item within the files for display.
         </Documentation>
     </IntVectorProperty>

     <IntVectorProperty
        name="DefaultXExtent"
        command="GetXLayout"
        information_only="1">
        <SimpleIntInformationHelper/>
        <Documentation>
        VPIC data is written one file per simulation processor. This coarse map of files is used in partitioning files between visualizing processors so that each ParaView processor has its own set of files to display. Default extent is all files available.
        </Documentation>
     </IntVectorProperty>

     <IntVectorProperty
        name="DefaultYExtent"
        command="GetYLayout"
        information_only="1">
        <SimpleIntInformationHelper/>
        <Documentation>
        VPIC data is written one file per simulation processor. This coarse map of files is used in partitioning files between visualizing processors so that each ParaView processor has its own set of files to display. Default extent is all files available.
        </Documentation>
     </IntVectorProperty>

     <IntVectorProperty
        name="DefaultZExtent"
        command="GetZLayout"
        information_only="1">
        <SimpleIntInformationHelper/>
        <Documentation>
        VPIC data is written one file per simulation processor. This coarse map of files is used in partitioning files between visualizing processors so that each ParaView processor has its own set of files to display. Default extent is all files available.
        </Documentation>
     </IntVectorProperty>

     <IntVectorProperty
        name="XExtent"
        label="X Extent"
        command="SetXExtent"
        number_of_elements="2"
        animateable="1"
        default_values="-1 -1">
        <IntRangeDomain name="XRange">
             <RequiredProperties>
                 <Property name="DefaultXExtent" function="Range"/>
             </RequiredProperties>
        </IntRangeDomain>
        <Documentation>
        VPIC data is written one file per simulation processor. This coarse map of files is used in partitioning files between visualizing processors so that each ParaView processor has its own set of files to display. Ghost cell overlap is handled within the reader. To limit the View of VPIC information the extent in the X dimension of "files" can be specified. Only the files selected will be displayed and they will be partitioned between the visualizing processors, allowing a higher resolution over a smaller area.
        </Documentation>
     </IntVectorProperty>

     <IntVectorProperty
        name="YExtent"
        label="Y Extent"
        command="SetYExtent"
        number_of_elements="2"
        animateable="1"
        default_values="-1 -1">
        <IntRangeDomain name="YRange">
             <RequiredProperties>
                 <Property name="DefaultYExtent" function="Range"/>
             </RequiredProperties>
        </IntRangeDomain>
        <Documentation>
        VPIC data is written one file per simulation processor. This coarse map of files is used in partitioning files between visualizing processors so that each ParaView processor has its own set of files to display. Ghost cell overlap is handled within the reader. To limit the View of VPIC information the extent in the Y dimension of "files" can be specified. Only the files selected will be displayed and they will be partitioned between the visualizing processors, allowing a higher resolution over a smaller area.
        </Documentation>
     </IntVectorProperty>

     <IntVectorProperty
        name="ZExtent"
        label="Z Extent"
        command="SetZExtent"
        number_of_elements="2"
        animateable="1"
        default_values="-1 -1">
        <IntRangeDomain name="ZRange">
             <RequiredProperties>
                 <Property name="DefaultZExtent" function="Range"/>
             </RequiredProperties>
        </IntRangeDomain>
        <Documentation>
        VPIC data is written one file per simulation processor. This coarse map of files is used in partitioning files between visualizing processors so that each ParaView processor has its own set of files to display. Ghost cell overlap is handled within the reader. To limit the View of VPIC information the extent in the Z dimension of "files" can be specified. Only the files selected will be displayed and they will be partitioned between the visualizing processors, allowing a higher resolution over a smaller area.
        </Documentation>
     </IntVectorProperty>

     <Hints>
        <ReaderFactory extensions="vpc"
          file_description="VPIC Files" />
     </Hints>

   </SourceProxy>
   <!-- End vtkVPICReader -->

   <!-- Start WindBladeReader -->

   <SourceProxy name="WindBladeReader"
                class="vtkWindBladeReader"
                label="WindBlade reader">

     <Documentation
       short_help="Read WindBlade simulation files."
       long_help="Reads WindBlade/Firetec simulation files possibly including wind turbines and topolgy files.">
       WindBlade/Firetec is a simulation dealing with the effects of wind on wind turbines or on the spread of fires. It produces three outputs - a StructuredGrid for the wind data fields, a StructuredGrid for the ground topology, and a PolyData for turning turbine blades. The input file (.wind) opened by the WindBlade reader is an ASCII description of the data files expected. Data is accumulated by the simulation processor and is written one file per time step. WindBlade can deal with topology if a flag is turned on and expects (x,y) data for the ground. It also can deal with turning wind turbines from other time step data files which gives polygon positions of segments of the blades and data for each segment.
     </Documentation>

     <OutputPort name="Field" index="0" />
     <OutputPort name="Blade" index="1" />
     <OutputPort name="Ground" index="2" />

      <StringVectorProperty name="Filename"
        command="SetFilename"
        animateable="0"
        number_of_elements="1">
        <FileListDomain name="files"/>
        <Documentation>
        ASCII .wind file describes locations of data files, grid sizes and variable deltas, time step sizes, whether topology is used, whether turbines are used, and type and order of data written to the files.
        </Documentation>
      </StringVectorProperty>

     <DoubleVectorProperty
         name="TimestepValues"
         repeatable="1"
         information_only="1">
       <TimeStepsInformationHelper/>
     </DoubleVectorProperty>

      <StringVectorProperty
        name="PointArrayInfo"
        information_only="1">
        <ArraySelectionInformationHelper attribute_name="Point"/>
      </StringVectorProperty>

      <StringVectorProperty
        name="PointArrayStatus"
        command="SetPointArrayStatus"
        number_of_elements="2"
        repeat_command="1"
        number_of_elements_per_command="2"
        element_types="2 0"
        information_property="PointArrayInfo"
        label="Point Arrays">
        <ArraySelectionDomain name="array_list" >
          <RequiredProperties>
             <Property name="PointArrayInfo" function="ArrayList"/>
          </RequiredProperties>
        </ArraySelectionDomain>
        <Documentation>
        Variables written to the data files are described in the .wind file and are presented for selection. Only selected variables are loaded for a time step.
        </Documentation>
      </StringVectorProperty>

      <Hints>
        <ReaderFactory extensions="wind"
          file_description="WindBlade Data" />
      </Hints>

   </SourceProxy>
   <!-- End WindBladeReader -->

   <SourceProxy name="NetCDFCAMReader"
                class="vtkNetCDFCAMReader"
                label="NetCDF CAM reader">
     <Documentation
        short_help="Read unstructured grid NetCDF files in CAM format."
        long_help="Reads unstructured grid data from NetCDF files. There are 2 files, a points+fields file which is set as FileName and a cell connectivity file set as ConnectivityFileName.">
       This reader reads in unstructured grid data from a NetCDF file. The grid data is in a set of planes
       as quadrilateral cells. The reader creates hex cells in order to create a volumetric grid.
     </Documentation>

     <StringVectorProperty
        name="ConnectivityFileName"
        animateable="0"
        command="SetConnectivityFileName"
        number_of_elements="1">
       <FileListDomain name="files"/>
       <Documentation>
         This property specifies the file name to read for the grid connectivity.
       </Documentation>
     </StringVectorProperty>

     <StringVectorProperty
        name="PointsFileName"
        animateable="0"
        command="SetFileName"
        number_of_elements="1">
       <FileListDomain name="files"/>
       <Documentation>
         This property specifies the file name to read for the points and field information.
       </Documentation>
     </StringVectorProperty>

     <Hints>
       <ReaderFactory extensions="nc ncdf"
                      file_description="CAM NetCDF (Unstructured)" />
     </Hints>

   </SourceProxy>
   <!-- End NetCDFCAMReader -->

   <SourceProxy name="NetCDFPOPReader"
                class="vtkFileSeriesReader"
                si_class="vtkSIFileSeriesReaderProxy"
                file_name_method="SetFileName"
                label="NetCDF POP reader">
     <Documentation
        short_help="Read rectilinear grid data from a NetCDF file in the POP format."
        long_help="Reads rectilinear grid data from a NetCDF POP file.">
       The reader reads regular rectilinear grid (image/volume) data from a NetCDF file.
     </Documentation>

     <SubProxy>
       <Proxy name="Reader"
              proxygroup="internal_sources"
              proxyname="NetCDFPOPReaderCore">
       </Proxy>
       <ExposedProperties>
         <Property name="VariableArrayInfo" />
         <Property name="VariableArrayStatus" />
         <Property name="Stride" />
       </ExposedProperties>
     </SubProxy>


     <StringVectorProperty name="FileNameInfo"
                           command="GetCurrentFileName"
                           information_only="1" >
       <SimpleStringInformationHelper />
     </StringVectorProperty>

     <StringVectorProperty name="FileName"
                           clean_command="RemoveAllFileNames"
                           command="AddFileName"
                           animateable="0"
                           number_of_elements="1"
                           repeat_command="1"
                           information_property="FileNameInfo" >
       <FileListDomain name="files"/>
       <Documentation>
         The list of files to be read by the reader.
       </Documentation>
     </StringVectorProperty>

     <DoubleVectorProperty name="TimestepValues"
                           repeatable="1"
                           information_only="1">
       <TimeStepsInformationHelper/>
       <Documentation>
         Available timestep values.
       </Documentation>
     </DoubleVectorProperty>

     <Hints>
       <ReaderFactory extensions="pop.ncdf pop.nc" file_description="POP Ocean NetCDF (Rectilinear)" />
     </Hints>
   </SourceProxy>
   <!-- End NetCDFPOPReader -->

#ifdef PARAVIEW_USE_MPI
   <SourceProxy name="PNetCDFPOPReader"
                class="vtkFileSeriesReader"
                si_class="vtkSIFileSeriesReaderProxy"
                file_name_method="SetFileName"
                label="Parallel NetCDF POP reader"
                multiprocess_support="multiple_processes">
     <Documentation
        short_help="Read rectilinear grid data from a NetCDF file in the POP format in parallel."
        long_help="Reads rectilinear grid data from a NetCDF POP file in parallel.">
       The reader reads regular rectilinear grid (image/volume) data from a NetCDF file.
       Only a subset of the processes actually read the file and these processes
       communicate the data to other processes.
     </Documentation>

     <SubProxy>
       <Proxy name="Reader"
              proxygroup="internal_sources"
              proxyname="PNetCDFPOPReaderCore">
       </Proxy>
       <ExposedProperties>
         <Property name="VariableArrayInfo" />
         <Property name="VariableArrayStatus" />
         <Property name="Stride" />
         <Property name="NumberOfReaderProcesses" />
       </ExposedProperties>
     </SubProxy>

     <StringVectorProperty name="FileNameInfo"
                           command="GetCurrentFileName"
                           information_only="1" >
       <SimpleStringInformationHelper />
     </StringVectorProperty>

     <StringVectorProperty name="FileName"
                           clean_command="RemoveAllFileNames"
                           command="AddFileName"
                           animateable="0"
                           number_of_elements="1"
                           repeat_command="1"
                           information_property="FileNameInfo" >
       <FileListDomain name="files"/>
       <Documentation>
         The list of files to be read by the reader.
       </Documentation>
     </StringVectorProperty>

     <DoubleVectorProperty name="TimestepValues"
                           repeatable="1"
                           information_only="1">
       <TimeStepsInformationHelper/>
       <Documentation>
         Available timestep values.
       </Documentation>
     </DoubleVectorProperty>

     <Hints>
       <ReaderFactory extensions="pop.ncdf pop.nc" file_description="Parallel POP Ocean NetCDF (Rectilinear)" />
     </Hints>
   </SourceProxy>
   <!-- End PNetCDFPOPReader -->
#endif

   <SourceProxy name="CosmoReader"
                          class="vtkFileSeriesReader"
                          label="COSMO Reader"
                          si_class="vtkSIFileSeriesReaderProxy"
                          file_name_method="SetFileName">
     <Documentation
       short_help="Read a cosmology file."
       long_help="Reads a cosmology file into a vtkUnstructuredGrid.">
       The Cosmology reader reads a binary file of particle location,
       velocity, and id creating a vtkUnstructuredGrid. The default
       file extension is .cosmo. Reads LANL Cosmo format or Gadget format.
     </Documentation>

     <SubProxy>
       <Proxy name="Reader"
              proxygroup="internal_sources"
              proxyname="CosmoReaderCore">
       </Proxy>
       <ExposedProperties>
         <Property name="CosmoFormat" />
         <Property name="RL" />
         <Property name="Overlap" />
       </ExposedProperties>
     </SubProxy>

     <StringVectorProperty name="FileNameInfo"
        command="GetCurrentFileName"
        information_only="1" >
        <SimpleStringInformationHelper />
     </StringVectorProperty>

     <StringVectorProperty name="FileName"
                           clean_command="RemoveAllFileNames"
                           command="AddFileName"
                           animateable="0"
                           number_of_elements="1"
                           repeat_command="1"
                           information_property="FileNameInfo" >
       <FileListDomain name="files"/>
       <Documentation>
         The list of files to be read by the reader.
       </Documentation>
     </StringVectorProperty>

     <DoubleVectorProperty name="TimestepValues"
                           repeatable="1"
                           information_only="1">
       <TimeStepsInformationHelper/>
       <Documentation>
         Available timestep values.
       </Documentation>
     </DoubleVectorProperty>

     <Hints>
       <ReaderFactory extensions="cosmo gadget2" file_description="Cosmology files" />
     </Hints>
   </SourceProxy>

   <SourceProxy name="MPASReader"
                class="vtkMPASReader"
                label="NetCDF MPAS reader">
     <Documentation
         short_help="Read unstructured grid MPAS data from a file."
         long_help="Reads unstructured grid MPAS data from a file.">
       This reader reads unstructured grid MPAS data from a file. It creates a dual grid
       It assumes the grid is in the global domain. By default, it creates a spherical
       view of vertical layer 0. It assumes it is ocean data. It gives several options to
       change the view to multilayer (all vertical layers will have a thickness determined
       by the value in the slider), lat/lon projection or atmospheric (vertical layers go out
       away from the center of the sphere, instead of down towards the center as they do
       for ocean data). It doesn't handle data in the rectangular domain. This is not a
       parallel reader. It expects one .nc file of data. It can display cell or vertex-centered
       data, but not edge data. When converted to the dual grid, cell-centered data becomes
       vertex-centered and vice-versa.
        NOTES:
        When using this reader, it is important that you remember to do the following:
        1.  When changing a selected variable, remember to select it also in the drop
            down box to color by. It doesn't color by that variable automatically
        2.  When selecting multilayer sphere view, start with layer thickness around 100,000
        3.  When selecting multilayer lat/lon view, start with layer thickness around 10
        4.  Always click the -Z orientation after making a switch from lat/lon to sphere,
            from single to multilayer or changing thickness.
        5.  Be conservative on the number of changes you make before hitting Apply, since there
            may be bugs in this reader. Just make one change and then hit Apply.
       For problems, contact Christine Ahrens (cahrens@lanl.gov)
     </Documentation>

     <StringVectorProperty name="FileName"
                           command="SetFileName"
                           animateable="0"
                           number_of_elements="1">
       <FileListDomain name="files"/>
       <Documentation>
         This property specifies the file name to read. It should be an MPAS format NetCDF file ending in .nc.
       </Documentation>
     </StringVectorProperty>

     <StringVectorProperty
         name="PointArrayInfo"
         information_only="1">
       <ArraySelectionInformationHelper attribute_name="Point"/>
     </StringVectorProperty>

     <StringVectorProperty
         name="PointArrayStatus"
         command="SetPointArrayStatus"
         number_of_elements="2"
         repeat_command="1"
         number_of_elements_per_command="2"
         element_types="2 0"
         information_property="PointArrayInfo" >
       <ArraySelectionDomain name="array_list" >
         <RequiredProperties>
           <Property name="PointArrayInfo" function="ArrayList"/>
         </RequiredProperties>
       </ArraySelectionDomain>
       <Documentation>
         This property lists which NetCDF dual-grid point variables to load.
       </Documentation>
     </StringVectorProperty>

     <StringVectorProperty
         name="CellArrayInfo"
         information_only="1">
       <ArraySelectionInformationHelper attribute_name="Cell"/>
     </StringVectorProperty>

     <StringVectorProperty
         name="CellArrayStatus"
         command="SetCellArrayStatus"
         number_of_elements="2"
         repeat_command="1"
         number_of_elements_per_command="2"
         element_types="2 0"
         information_property="CellArrayInfo" >
       <ArraySelectionDomain name="array_list" >
         <RequiredProperties>
           <Property name="CellArrayInfo" function="ArrayList"/>
         </RequiredProperties>
       </ArraySelectionDomain>
       <Documentation>
         This property lists which NetCDF dual-grid cell variables to load.
       </Documentation>
     </StringVectorProperty>
     <IntVectorProperty
         name="ProjectLatLon"
         command="SetProjectLatLon"
         number_of_elements="1"
         default_values="0">
       <BooleanDomain name="bool" />
         <Documentation>
           This property indicates whether to view the data in the lat/lon projection.
         </Documentation>
     </IntVectorProperty>

     <IntVectorProperty
         name="ShowMultilayerView"
         command="SetShowMultilayerView"
         number_of_elements="1"
         default_values="0">
       <BooleanDomain name="bool" />
         <Documentation>
           This property indicates whether to show multiple layers in one view, with each vertical level having the same thickness, specified by the layer thickness slider. For ocean data, the layers correspond to data at vertical level whose number increases towards the center of the sphere. For atmospheric data, the layers correspond to data at vertical levels increasing away from the center.
         </Documentation>
     </IntVectorProperty>

     <IntVectorProperty
         name="IsAtmosphere"
         command="SetIsAtmosphere"
         number_of_elements="1"
         default_values="0">
       <BooleanDomain name="bool" />
         <Documentation>
           This property indicates whether data is atmospheric. Checking this ensures the vertical levels will go up away from the sphere instead of down towards the center.
         </Documentation>
     </IntVectorProperty>

     <IntVectorProperty
        name="LayerThicknessRangeInfo"
        command="GetLayerThicknessRange"
        information_only="1">
        <SimpleIntInformationHelper/>
     </IntVectorProperty>

     <IntVectorProperty
         name="LayerThickness"
         label="Layer Thickness"
         command="SetLayerThickness"
         number_of_elements="1"
         default_values="10">
       <IntRangeDomain name="LayerThicknessRange">
       <RequiredProperties>
         <Property name="LayerThicknessRangeInfo" function="Range"/>
       </RequiredProperties>
       </IntRangeDomain>
       <Documentation>
       This property specifies how thick the layer should be if viewing the data in multilayer view. Each layer corresponds to a vertical level. A good starting point is 100,000 for the spherical view and 10 for the lat/lon projection. Click on -Z after applying this change, since the scale may change drastically.
       </Documentation>
     </IntVectorProperty>

     <IntVectorProperty
        name="CenterLonRangeInfo"
        command="GetCenterLonRange"
        information_only="1">
        <SimpleIntInformationHelper/>
     </IntVectorProperty>

     <IntVectorProperty
         name="CenterLon"
         label="Center Longitude"
         command="SetCenterLon"
         number_of_elements="1"
         default_values="180">
       <IntRangeDomain name="CenterLonRange">
       <RequiredProperties>
         <Property name="CenterLonRangeInfo" function="Range"/>
       </RequiredProperties>
       </IntRangeDomain>
       <Documentation>
       This property specifies where the center will be viewed for a lat/lon projection.
       </Documentation>
     </IntVectorProperty>

     <IntVectorProperty
         name="VerticalLevelRangeInfo"
         command="GetVerticalLevelRange"
         information_only="1">
       <SimpleIntInformationHelper/>
     </IntVectorProperty>

     <IntVectorProperty
         name="VerticalLevel"
         command="SetVerticalLevel"
         number_of_elements="1"
         default_values="0">
       <IntRangeDomain name="range" >
         <RequiredProperties>
           <Property name="VerticalLevelRangeInfo" function="Range"/>
         </RequiredProperties>
       </IntRangeDomain>
       <Documentation>
       This property specifies which vertical level is viewed if not in multilayer view. Only the data for that vertical level will be viewed. The grid is essentially the same for each vertical level, however at some ocean levels, especially the lower ones, due to the topography, the grid becomes more sparse where there is land.
       </Documentation>
     </IntVectorProperty>

     <DoubleVectorProperty
         name="TimestepValues"
         repeatable="1"
         information_only="1">
       <TimeStepsInformationHelper/>
     </DoubleVectorProperty>

     <Hints>
       <ReaderFactory extensions="ncdf nc"
                      file_description="MPAS NetCDF (Unstructured)" />
     </Hints>

   </SourceProxy>
   <!-- End MPASReader -->



   <SourceProxy name="P3DReader"
                        class="vtkFileSeriesReader"
                        label="PLOT3D Reader"
                        si_class="vtkSIFileSeriesReaderProxy"
                        file_name_method="SetQFileName">
   <Documentation
     short_help="Read PLOT3D files."
     long_help="Reads ASCII or binary PLOT3D files.">
     PLOT3D is a plotting package developed at NASA. The PLOT3D reader can read both ASCII and binary PLOT3D files. The default file extension for the geometry files is .xyz, and the default file extension for the solution files is .q. The output of this reader is a multi-block dataset containing curvilinear (structured grid) datasets.
   </Documentation>
   <SubProxy>
     <Proxy name="Reader"
            proxygroup="internal_sources" proxyname="P3DReaderCore">
     </Proxy>
     <ExposedProperties>
      <Property name="FileName" />
      <Property name="BinaryFile" />
      <Property name="MultiGrid" />
      <Property name="HasByteCount" />
      <Property name="IBlanking" />
      <Property name="TwoDimensionalGeometry" />
      <Property name="ForceRead" />
      <Property name="ByteOrder" />
      <Property name="Functions" />
     </ExposedProperties>
   </SubProxy>

   <StringVectorProperty name="FileNameInfo"
      command="GetCurrentFileName"
      information_only="1" >
      <SimpleStringInformationHelper />
   </StringVectorProperty>

   <StringVectorProperty
      name="QFileName"
      clean_command="RemoveAllFileNames"
      command="AddFileName"
      animateable="0"
      number_of_elements="1"
      repeat_command="1"
      information_property="FileNameInfo" >
      <FileListDomain name="files"/>
      <Documentation>
        The list of .q (solution) files for the PLOT3D reader. There can be
        more than one. If more that one file is specified, the reader will switch
        to file-series mode in which it will pretend that it can support time
        and provide one file per time step.
     </Documentation>
   </StringVectorProperty>

   <DoubleVectorProperty
      name="TimestepValues"
      repeatable="1"
      information_only="1">
      <TimeStepsInformationHelper/>
      <Documentation>
        Available timestep values.
      </Documentation>
   </DoubleVectorProperty>
   <Hints>
    <ReaderFactory extensions="xyz"
        file_description="PLOT3D Files" />
    <!-- This hint tells the GUI that the File | Open dialog sets the FileName
         property -->
    <DefaultFileNameProperty name="FileName" />
   </Hints>
   <!-- End plot3d reader-->
 </SourceProxy>

  </ProxyGroup>
</ServerManagerConfiguration>
