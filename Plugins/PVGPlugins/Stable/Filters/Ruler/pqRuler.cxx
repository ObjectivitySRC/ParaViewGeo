#include "pqRuler.h"
#include <pqFileDialog.h>
#include <QtDebug>

#include "vtkSMProperty.h"
#include "vtkSMDoubleVectorProperty.h"
#include "vtkSMSourceProxy.h"
#include "vtkEventQtSlotConnect.h"
#include "vtkSMProxy.h"
#include "pqProxy.h"
#include <QLabel>
#include <QPushButton>
#include <QSpinBox>
#include <QGridLayout>
#include <QLabel>
#include <QSpacerItem>
#include <QHBoxLayout>
#include <QVBoxLayout>
#include <QString>

pqRuler::pqRuler(pqProxy* pxy, QWidget* p) :
  pqAutoGeneratedObjectPanel(pxy, p)
	{	
	this->VTKConnect = vtkSmartPointer<vtkEventQtSlotConnect>::New();
	distancevp = vtkSMDoubleVectorProperty::SafeDownCast(this->proxy()->GetProperty("distance"));
	xdistancevp = vtkSMDoubleVectorProperty::SafeDownCast(this->proxy()->GetProperty("xDistance"));
	ydistancevp = vtkSMDoubleVectorProperty::SafeDownCast(this->proxy()->GetProperty("yDistance"));
	zdistancevp = vtkSMDoubleVectorProperty::SafeDownCast(this->proxy()->GetProperty("zDistance"));
	this->VTKConnect->Connect(distancevp, vtkCommand::ModifiedEvent, this, SLOT(distanceModified()));
	this->VTKConnect->Connect(xdistancevp, vtkCommand::ModifiedEvent, this, SLOT(xDistanceModified()));
	this->VTKConnect->Connect(ydistancevp, vtkCommand::ModifiedEvent, this, SLOT(yDistanceModified()));
	this->VTKConnect->Connect(zdistancevp, vtkCommand::ModifiedEvent, this, SLOT(zDistanceModified()));
	this->linkServerManagerProperties();		

	this->findChild<QPushButton*>("xAxis")->hide();
	this->findChild<QPushButton*>("yAxis")->hide();
	this->findChild<QPushButton*>("zAxis")->hide();
	this->findChild<QPushButton*>("resetBounds")->hide();
	this->findChild<QSpinBox*>("resolution")->hide();
	this->findChild<QLabel*>("label")->hide();

	QLayout *lineWidgetLayout = this->findChild<QWidget*>("pqLineWidget")->layout();

	QVBoxLayout* l = qobject_cast<QVBoxLayout*>(lineWidgetLayout);
	if(l)
	{
    QLabel* label =new QLabel("<b>Distance:</b> <i>na</i> ", this);
		l->addWidget(label);
		this->distanceLabel = label;
    QLabel* xlabel =new QLabel("<b>X distance:</b> <i>na</i> ", this);
		l->addWidget(xlabel);
		this->xDistanceLabel = xlabel;
    QLabel* ylabel =new QLabel("<b>Y distance:</b> <i>na</i> ", this);
		l->addWidget(ylabel);
		this->yDistanceLabel = ylabel;
    QLabel* zlabel =new QLabel("<b>Z distance:</b> <i>na</i> ", this);
		l->addWidget(zlabel);
		this->zDistanceLabel = zlabel;
	}
}

pqRuler::~pqRuler()
{
}

void pqRuler::accept()
{
	pqAutoGeneratedObjectPanel::accept();
}

void pqRuler::reset()
{
  // reset widgets controlled by the parent class
	pqAutoGeneratedObjectPanel::reset();
}

void pqRuler::linkServerManagerProperties()
{
  // parent class hooks up some of our widgets in the ui
	pqAutoGeneratedObjectPanel::linkServerManagerProperties();
}

void pqRuler::distanceModified()
{
	this->distanceLabel->setText(QString("<b>Distance:</b> %1 ").arg(distancevp->GetElement(0)));
}

void pqRuler::xDistanceModified()
{
	this->xDistanceLabel->setText(QString("<b>X distance:</b> %1 ").arg(xdistancevp->GetElement(0)));
}

void pqRuler::yDistanceModified()
{
	this->yDistanceLabel->setText(QString("<b>Y distance:</b> %1 ").arg(ydistancevp->GetElement(0)));
}

void pqRuler::zDistanceModified()
{
	this->zDistanceLabel->setText(QString("<b>Z distance:</b> %1 ").arg(zdistancevp->GetElement(0)));
}
