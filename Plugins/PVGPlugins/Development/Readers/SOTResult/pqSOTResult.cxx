#include "pqSOTResult.h"
#include <QComboBox>
#include <QWidget>
#include <QtDebug>
#include <QString>
#include <QStringList>
#include <QCheckBox>
#include <QLineEdit>
#include <QVBoxLayout>
#include <QWidget>

#include "vtkSMProxy.h"
#include "vtkSMProperty.h"
#include "vtkSMStringVectorProperty.h"
#include "vtkSMIntVectorProperty.h"
#include "vtkSMRenderViewProxy.h"

#include "pqRenderView.h"
#include "pqActiveView.h"
#include "pqView.h"
#include "pqSMAdaptor.h"
#include "pqPropertyManager.h"
#include "pqNamedWidgets.h"

pqSOTResult::pqSOTResult(pqProxy* pxy, QWidget* p)
  : pqAutoGeneratedObjectPanel(pxy, p)
{
	//this->radiusVariable = this->findChild<QComboBox*>("radiusVariable");
	//this->distanceVariable = this->findChild<QComboBox*>("distanceVariable");
	//this->angleVariable = this->findChild<QComboBox*>("angleVariable");
	//this->thVariable = this->findChild<QComboBox*>("thVariable");

	//this->thVariable->setEnabled(false);

	QWidget* widget = this->findChild<QWidget*>("radiusVariable_label");
	//widget->hide();
	widget = this->findChild<QWidget*>("radiusVariable");
	pqNamedWidgets::unlinkObject(widget, this->proxy(), "radiusVariable", this->propertyManager());
	widget->hide();

	//widget = this->findChild<QWidget*>("distanceVariable_Label");
	//widget->hide();
	widget = this->findChild<QWidget*>("distanceVariable");
	pqNamedWidgets::unlinkObject(widget, this->proxy(), "distanceVariable", this->propertyManager());
	widget->hide();

	//widget = this->findChild<QWidget*>("angleVariable_Label");
	//widget->hide();
	widget = this->findChild<QWidget*>("angleVariable");
	pqNamedWidgets::unlinkObject(widget, this->proxy(), "angleVariable", this->propertyManager());
	widget->hide();

	//widget = this->findChild<QWidget*>("thVariable_Label");
	//widget->hide();
	widget = this->findChild<QWidget*>("thVariable");
	pqNamedWidgets::unlinkObject(widget, this->proxy(), "thVariable", this->propertyManager());
	widget->hide();

	this->radiusVariable = new QComboBox();
	this->radiusVariable->setObjectName("radius");


	this->PanelLayout->addWidget(this->radiusVariable);

	QCheckBox *box = this->findChild<QCheckBox*>("alignCircles");
	QObject::connect(box, SIGNAL(stateChanged(int)), this, SLOT(toogleParallelProjection(int)));

	QLineEdit *applyPressed = this->findChild<QLineEdit*>("ApplyPressed");
	QObject::connect(applyPressed, SIGNAL(textChanged(const QString&)), 
		this, SLOT(onApplyPressed(const QString&)), Qt::QueuedConnection );

	vtkSMStringVectorProperty *headers = vtkSMStringVectorProperty::SafeDownCast(
		this->proxy()->GetProperty("Headers"));

	vtkSMStringVectorProperty *stringHeaders = vtkSMStringVectorProperty::SafeDownCast(
		this->proxy()->GetProperty("StringHeaders"));

	// Populate numberic property combo boxes
	QString line(headers->GetElement(0));
	QStringList lineSplit;

	lineSplit = line.split("|", QString::SkipEmptyParts);

	foreach(QString prop, lineSplit)
	{
		//this->radiusVariable->addItem(prop);
		//this->distanceVariable->addItem(prop);
		//this->angleVariable->addItem(prop);
		//this->thVariable->addItem(prop);
	}

	// Populate string property combo boxes
	QString stringLine(stringHeaders->GetElement(0));
	lineSplit = stringLine.split("|", QString::SkipEmptyParts);

	foreach(QString prop, lineSplit)
	{
		//this->thVariable->addItem(prop);
	}

	vtkSMStringVectorProperty* stv = vtkSMStringVectorProperty::SafeDownCast(
			this->proxy()->GetProperty("radiusVariable"));

	if( strlen(stv->GetElement(0)) )
	{
		//this->restoreGuiState();
	}
	


  this->linkServerManagerProperties();
}

pqSOTResult::~pqSOTResult()
{
}


void pqSOTResult::linkServerManagerProperties()
{
  // parent class hooks up some of our widgets in the ui
  pqAutoGeneratedObjectPanel::linkServerManagerProperties();
}


//-------------------------------------------------------------------------------------------------------
void pqSOTResult::restoreGuiState()
{
	QString text;

	text = vtkSMStringVectorProperty::SafeDownCast(
		this->proxy()->GetProperty("radiusVariable"))->GetElement(0);
	this->setComboBoxIndex(this->radiusVariable, text);

	text = vtkSMStringVectorProperty::SafeDownCast(
		this->proxy()->GetProperty("distanceVariable"))->GetElement(0);
	this->setComboBoxIndex(this->distanceVariable, text);

	text = vtkSMStringVectorProperty::SafeDownCast(
		this->proxy()->GetProperty("angleVariable"))->GetElement(0);
	this->setComboBoxIndex(this->angleVariable, text);

	text = vtkSMStringVectorProperty::SafeDownCast(
		this->proxy()->GetProperty("thVariable"))->GetElement(0);
	this->setComboBoxIndex(this->thVariable, text);

}


//-------------------------------------------------------------------------------------------------------
void pqSOTResult::setComboBoxIndex(QComboBox* comboBox, QString &text)
{
	for(int i=0; i<comboBox->count(); i++)
	{
		if(comboBox->itemText(i) == text)
		{
			comboBox->setCurrentIndex(i);
			return;
		}
	}
}



//-------------------------------------------------------------------------------------------------------
void pqSOTResult::toogleParallelProjection(int state)
{
	pqRenderView* ren = qobject_cast<pqRenderView*>(pqActiveView::instance().current());
	if(!ren)
	{
		return;
	}
	vtkSMRenderViewProxy *renProxy = ren->getRenderViewProxy();
	if(renProxy)
	{
		vtkSMIntVectorProperty* ivp = vtkSMIntVectorProperty::SafeDownCast(
			renProxy->GetProperty("CameraParallelProjection"));
		if(state == Qt::Checked)
		{
			pqSMAdaptor::setMultipleElementProperty(ivp,0,1);
			//this->thVariable->setEnabled(true);
		}
		else
		{
			pqSMAdaptor::setMultipleElementProperty(ivp,0,0);
			//this->thVariable->setEnabled(false);
		}
		renProxy->UpdateVTKObjects();
		//ren->resetViewDirection(0, 0, -1, 0, 1, 0);

		// if you want to turn off/on parallel projection only after apply,
		// remove the following line
		ren->render();
	}
}



//-------------------------------------------------------------------------------------------------------
void pqSOTResult:: onApplyPressed(const QString& text)
{
	pqRenderView* ren = qobject_cast<pqRenderView*>(pqActiveView::instance().current());
	if(!ren)
	{
		return;
	}
	if(text == "1")
	{
		this->toogleParallelProjection(Qt::Checked);
		ren->resetViewDirection(0, 0, -1, 0, 1, 0);
	}
	else
	{
		this->toogleParallelProjection(Qt::Unchecked);
	}

}